//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EWAV
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Linq;
    
    
    /// <summary>
    /// The 'CanvasDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV")]
    public sealed partial class CanvasDto : ComplexObject
    {
        
        private string _canvasDescription;
        
        private Guid _canvasGUID;
        
        private int _canvasId;
        
        private string _canvasName;
        
        private string _canvasSnapshotAsBase64;
        
        private DateTime _createdDate;
        
        private string _culture;
        
        private string _databaseObjectName;
        
        private string _datasource;
        
        private int _datasourceID;
        
        private string _ewavlitePermalink;
        
        private string _ewavPermalink;
        
        private double _height;
        
        private bool _isNewCanvas;
        
        private bool _isShared;
        
        private DateTime _modifiedDate;
        
        private string _status;
        
        private int _userId;
        
        private double _width;
        
        private XElement _xmlData;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCanvasDescriptionChanging(string value);
        partial void OnCanvasDescriptionChanged();
        partial void OnCanvasGUIDChanging(Guid value);
        partial void OnCanvasGUIDChanged();
        partial void OnCanvasIdChanging(int value);
        partial void OnCanvasIdChanged();
        partial void OnCanvasNameChanging(string value);
        partial void OnCanvasNameChanged();
        partial void OnCanvasSnapshotAsBase64Changing(string value);
        partial void OnCanvasSnapshotAsBase64Changed();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCultureChanging(string value);
        partial void OnCultureChanged();
        partial void OnDatabaseObjectNameChanging(string value);
        partial void OnDatabaseObjectNameChanged();
        partial void OnDatasourceChanging(string value);
        partial void OnDatasourceChanged();
        partial void OnDatasourceIDChanging(int value);
        partial void OnDatasourceIDChanged();
        partial void OnEWAVLITEPermalinkChanging(string value);
        partial void OnEWAVLITEPermalinkChanged();
        partial void OnEWAVPermalinkChanging(string value);
        partial void OnEWAVPermalinkChanged();
        partial void OnHeightChanging(double value);
        partial void OnHeightChanged();
        partial void OnIsNewCanvasChanging(bool value);
        partial void OnIsNewCanvasChanged();
        partial void OnIsSharedChanging(bool value);
        partial void OnIsSharedChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnWidthChanging(double value);
        partial void OnWidthChanged();
        partial void OnXmlDataChanging(XElement value);
        partial void OnXmlDataChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasDto"/> class.
        /// </summary>
        public CanvasDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CanvasDescription' value.
        /// </summary>
        [DataMember()]
        public string CanvasDescription
        {
            get
            {
                return this._canvasDescription;
            }
            set
            {
                if ((this._canvasDescription != value))
                {
                    this.OnCanvasDescriptionChanging(value);
                    this.RaiseDataMemberChanging("CanvasDescription");
                    this.ValidateProperty("CanvasDescription", value);
                    this._canvasDescription = value;
                    this.RaiseDataMemberChanged("CanvasDescription");
                    this.OnCanvasDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanvasGUID' value.
        /// </summary>
        [DataMember()]
        public Guid CanvasGUID
        {
            get
            {
                return this._canvasGUID;
            }
            set
            {
                if ((this._canvasGUID != value))
                {
                    this.OnCanvasGUIDChanging(value);
                    this.RaiseDataMemberChanging("CanvasGUID");
                    this.ValidateProperty("CanvasGUID", value);
                    this._canvasGUID = value;
                    this.RaiseDataMemberChanged("CanvasGUID");
                    this.OnCanvasGUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanvasId' value.
        /// </summary>
        [DataMember()]
        public int CanvasId
        {
            get
            {
                return this._canvasId;
            }
            set
            {
                if ((this._canvasId != value))
                {
                    this.OnCanvasIdChanging(value);
                    this.RaiseDataMemberChanging("CanvasId");
                    this.ValidateProperty("CanvasId", value);
                    this._canvasId = value;
                    this.RaiseDataMemberChanged("CanvasId");
                    this.OnCanvasIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanvasName' value.
        /// </summary>
        [DataMember()]
        public string CanvasName
        {
            get
            {
                return this._canvasName;
            }
            set
            {
                if ((this._canvasName != value))
                {
                    this.OnCanvasNameChanging(value);
                    this.RaiseDataMemberChanging("CanvasName");
                    this.ValidateProperty("CanvasName", value);
                    this._canvasName = value;
                    this.RaiseDataMemberChanged("CanvasName");
                    this.OnCanvasNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanvasSnapshotAsBase64' value.
        /// </summary>
        [DataMember()]
        public string CanvasSnapshotAsBase64
        {
            get
            {
                return this._canvasSnapshotAsBase64;
            }
            set
            {
                if ((this._canvasSnapshotAsBase64 != value))
                {
                    this.OnCanvasSnapshotAsBase64Changing(value);
                    this.RaiseDataMemberChanging("CanvasSnapshotAsBase64");
                    this.ValidateProperty("CanvasSnapshotAsBase64", value);
                    this._canvasSnapshotAsBase64 = value;
                    this.RaiseDataMemberChanged("CanvasSnapshotAsBase64");
                    this.OnCanvasSnapshotAsBase64Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Culture' value.
        /// </summary>
        [DataMember()]
        public string Culture
        {
            get
            {
                return this._culture;
            }
            set
            {
                if ((this._culture != value))
                {
                    this.OnCultureChanging(value);
                    this.RaiseDataMemberChanging("Culture");
                    this.ValidateProperty("Culture", value);
                    this._culture = value;
                    this.RaiseDataMemberChanged("Culture");
                    this.OnCultureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatabaseObjectName' value.
        /// </summary>
        [DataMember()]
        public string DatabaseObjectName
        {
            get
            {
                return this._databaseObjectName;
            }
            set
            {
                if ((this._databaseObjectName != value))
                {
                    this.OnDatabaseObjectNameChanging(value);
                    this.RaiseDataMemberChanging("DatabaseObjectName");
                    this.ValidateProperty("DatabaseObjectName", value);
                    this._databaseObjectName = value;
                    this.RaiseDataMemberChanged("DatabaseObjectName");
                    this.OnDatabaseObjectNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Datasource' value.
        /// </summary>
        [DataMember()]
        public string Datasource
        {
            get
            {
                return this._datasource;
            }
            set
            {
                if ((this._datasource != value))
                {
                    this.OnDatasourceChanging(value);
                    this.RaiseDataMemberChanging("Datasource");
                    this.ValidateProperty("Datasource", value);
                    this._datasource = value;
                    this.RaiseDataMemberChanged("Datasource");
                    this.OnDatasourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceID' value.
        /// </summary>
        [DataMember()]
        public int DatasourceID
        {
            get
            {
                return this._datasourceID;
            }
            set
            {
                if ((this._datasourceID != value))
                {
                    this.OnDatasourceIDChanging(value);
                    this.RaiseDataMemberChanging("DatasourceID");
                    this.ValidateProperty("DatasourceID", value);
                    this._datasourceID = value;
                    this.RaiseDataMemberChanged("DatasourceID");
                    this.OnDatasourceIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EWAVLITEPermalink' value.
        /// </summary>
        [DataMember()]
        public string EWAVLITEPermalink
        {
            get
            {
                return this._ewavlitePermalink;
            }
            set
            {
                if ((this._ewavlitePermalink != value))
                {
                    this.OnEWAVLITEPermalinkChanging(value);
                    this.RaiseDataMemberChanging("EWAVLITEPermalink");
                    this.ValidateProperty("EWAVLITEPermalink", value);
                    this._ewavlitePermalink = value;
                    this.RaiseDataMemberChanged("EWAVLITEPermalink");
                    this.OnEWAVLITEPermalinkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EWAVPermalink' value.
        /// </summary>
        [DataMember()]
        public string EWAVPermalink
        {
            get
            {
                return this._ewavPermalink;
            }
            set
            {
                if ((this._ewavPermalink != value))
                {
                    this.OnEWAVPermalinkChanging(value);
                    this.RaiseDataMemberChanging("EWAVPermalink");
                    this.ValidateProperty("EWAVPermalink", value);
                    this._ewavPermalink = value;
                    this.RaiseDataMemberChanged("EWAVPermalink");
                    this.OnEWAVPermalinkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Height' value.
        /// </summary>
        [DataMember()]
        public double Height
        {
            get
            {
                return this._height;
            }
            set
            {
                if ((this._height != value))
                {
                    this.OnHeightChanging(value);
                    this.RaiseDataMemberChanging("Height");
                    this.ValidateProperty("Height", value);
                    this._height = value;
                    this.RaiseDataMemberChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNewCanvas' value.
        /// </summary>
        [DataMember()]
        public bool IsNewCanvas
        {
            get
            {
                return this._isNewCanvas;
            }
            set
            {
                if ((this._isNewCanvas != value))
                {
                    this.OnIsNewCanvasChanging(value);
                    this.RaiseDataMemberChanging("IsNewCanvas");
                    this.ValidateProperty("IsNewCanvas", value);
                    this._isNewCanvas = value;
                    this.RaiseDataMemberChanged("IsNewCanvas");
                    this.OnIsNewCanvasChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsShared' value.
        /// </summary>
        [DataMember()]
        public bool IsShared
        {
            get
            {
                return this._isShared;
            }
            set
            {
                if ((this._isShared != value))
                {
                    this.OnIsSharedChanging(value);
                    this.RaiseDataMemberChanging("IsShared");
                    this.ValidateProperty("IsShared", value);
                    this._isShared = value;
                    this.RaiseDataMemberChanged("IsShared");
                    this.OnIsSharedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public double Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'XmlData' value.
        /// </summary>
        [DataMember()]
        public XElement XmlData
        {
            get
            {
                return this._xmlData;
            }
            set
            {
                if ((this._xmlData != value))
                {
                    this.OnXmlDataChanging(value);
                    this.RaiseDataMemberChanging("XmlData");
                    this.ValidateProperty("XmlData", value);
                    this._xmlData = value;
                    this.RaiseDataMemberChanged("XmlData");
                    this.OnXmlDataChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'OrganizationDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV")]
    public sealed partial class OrganizationDto : ComplexObject
    {
        
        private bool _active;
        
        private int _adminCount;
        
        private int _analystCount;
        
        private int _datasourceCount;
        
        private int _datasourcesCount;
        
        private string _description;
        
        private int _id;
        
        private string _name;
        
        private int _superAdminCount;
        
        private int _totalUserCount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnAdminCountChanging(int value);
        partial void OnAdminCountChanged();
        partial void OnAnalystCountChanging(int value);
        partial void OnAnalystCountChanged();
        partial void OnDatasourceCountChanging(int value);
        partial void OnDatasourceCountChanged();
        partial void OnDatasourcesCountChanging(int value);
        partial void OnDatasourcesCountChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSuperAdminCountChanging(int value);
        partial void OnSuperAdminCountChanged();
        partial void OnTotalUserCountChanging(int value);
        partial void OnTotalUserCountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationDto"/> class.
        /// </summary>
        public OrganizationDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AdminCount' value.
        /// </summary>
        [DataMember()]
        public int AdminCount
        {
            get
            {
                return this._adminCount;
            }
            set
            {
                if ((this._adminCount != value))
                {
                    this.OnAdminCountChanging(value);
                    this.RaiseDataMemberChanging("AdminCount");
                    this.ValidateProperty("AdminCount", value);
                    this._adminCount = value;
                    this.RaiseDataMemberChanged("AdminCount");
                    this.OnAdminCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AnalystCount' value.
        /// </summary>
        [DataMember()]
        public int AnalystCount
        {
            get
            {
                return this._analystCount;
            }
            set
            {
                if ((this._analystCount != value))
                {
                    this.OnAnalystCountChanging(value);
                    this.RaiseDataMemberChanging("AnalystCount");
                    this.ValidateProperty("AnalystCount", value);
                    this._analystCount = value;
                    this.RaiseDataMemberChanged("AnalystCount");
                    this.OnAnalystCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceCount' value.
        /// </summary>
        [DataMember()]
        public int DatasourceCount
        {
            get
            {
                return this._datasourceCount;
            }
            set
            {
                if ((this._datasourceCount != value))
                {
                    this.OnDatasourceCountChanging(value);
                    this.RaiseDataMemberChanging("DatasourceCount");
                    this.ValidateProperty("DatasourceCount", value);
                    this._datasourceCount = value;
                    this.RaiseDataMemberChanged("DatasourceCount");
                    this.OnDatasourceCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourcesCount' value.
        /// </summary>
        [DataMember()]
        public int DatasourcesCount
        {
            get
            {
                return this._datasourcesCount;
            }
            set
            {
                if ((this._datasourcesCount != value))
                {
                    this.OnDatasourcesCountChanging(value);
                    this.RaiseDataMemberChanging("DatasourcesCount");
                    this.ValidateProperty("DatasourcesCount", value);
                    this._datasourcesCount = value;
                    this.RaiseDataMemberChanged("DatasourcesCount");
                    this.OnDatasourcesCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SuperAdminCount' value.
        /// </summary>
        [DataMember()]
        public int SuperAdminCount
        {
            get
            {
                return this._superAdminCount;
            }
            set
            {
                if ((this._superAdminCount != value))
                {
                    this.OnSuperAdminCountChanging(value);
                    this.RaiseDataMemberChanging("SuperAdminCount");
                    this.ValidateProperty("SuperAdminCount", value);
                    this._superAdminCount = value;
                    this.RaiseDataMemberChanged("SuperAdminCount");
                    this.OnSuperAdminCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalUserCount' value.
        /// </summary>
        [DataMember()]
        public int TotalUserCount
        {
            get
            {
                return this._totalUserCount;
            }
            set
            {
                if ((this._totalUserCount != value))
                {
                    this.OnTotalUserCountChanging(value);
                    this.RaiseDataMemberChanging("TotalUserCount");
                    this.ValidateProperty("TotalUserCount", value);
                    this._totalUserCount = value;
                    this.RaiseDataMemberChanged("TotalUserCount");
                    this.OnTotalUserCountChanged();
                }
            }
        }
    }
}
namespace EWAV.BAL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV.Web.EpiDashboard;
    
    
    /// <summary>
    /// The 'EWAVColumn' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.BAL")]
    public sealed partial class EWAVColumn : ComplexObject
    {
        
        private string _childVariableName;
        
        private int _index;
        
        private bool _isInUse;
        
        private bool _isUserDefined;
        
        private string _name;
        
        private string _noCamelName;
        
        private ColumnDataType _sqlDataTypeAsString;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChildVariableNameChanging(string value);
        partial void OnChildVariableNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnIsInUseChanging(bool value);
        partial void OnIsInUseChanged();
        partial void OnIsUserDefinedChanging(bool value);
        partial void OnIsUserDefinedChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNoCamelNameChanging(string value);
        partial void OnNoCamelNameChanged();
        partial void OnSqlDataTypeAsStringChanging(ColumnDataType value);
        partial void OnSqlDataTypeAsStringChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVColumn"/> class.
        /// </summary>
        public EWAVColumn()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ChildVariableName' value.
        /// </summary>
        [DataMember()]
        public string ChildVariableName
        {
            get
            {
                return this._childVariableName;
            }
            set
            {
                if ((this._childVariableName != value))
                {
                    this.OnChildVariableNameChanging(value);
                    this.RaiseDataMemberChanging("ChildVariableName");
                    this.ValidateProperty("ChildVariableName", value);
                    this._childVariableName = value;
                    this.RaiseDataMemberChanged("ChildVariableName");
                    this.OnChildVariableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsInUse' value.
        /// </summary>
        [DataMember()]
        public bool IsInUse
        {
            get
            {
                return this._isInUse;
            }
            set
            {
                if ((this._isInUse != value))
                {
                    this.OnIsInUseChanging(value);
                    this.RaiseDataMemberChanging("IsInUse");
                    this.ValidateProperty("IsInUse", value);
                    this._isInUse = value;
                    this.RaiseDataMemberChanged("IsInUse");
                    this.OnIsInUseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsUserDefined' value.
        /// </summary>
        [DataMember()]
        public bool IsUserDefined
        {
            get
            {
                return this._isUserDefined;
            }
            set
            {
                if ((this._isUserDefined != value))
                {
                    this.OnIsUserDefinedChanging(value);
                    this.RaiseDataMemberChanging("IsUserDefined");
                    this.ValidateProperty("IsUserDefined", value);
                    this._isUserDefined = value;
                    this.RaiseDataMemberChanged("IsUserDefined");
                    this.OnIsUserDefinedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NoCamelName' value.
        /// </summary>
        [DataMember()]
        public string NoCamelName
        {
            get
            {
                return this._noCamelName;
            }
            set
            {
                if ((this._noCamelName != value))
                {
                    this.OnNoCamelNameChanging(value);
                    this.RaiseDataMemberChanging("NoCamelName");
                    this.ValidateProperty("NoCamelName", value);
                    this._noCamelName = value;
                    this.RaiseDataMemberChanged("NoCamelName");
                    this.OnNoCamelNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlDataTypeAsString' value.
        /// </summary>
        [DataMember()]
        public ColumnDataType SqlDataTypeAsString
        {
            get
            {
                return this._sqlDataTypeAsString;
            }
            set
            {
                if ((this._sqlDataTypeAsString != value))
                {
                    this.OnSqlDataTypeAsStringChanging(value);
                    this.RaiseDataMemberChanging("SqlDataTypeAsString");
                    this.ValidateProperty("SqlDataTypeAsString", value);
                    this._sqlDataTypeAsString = value;
                    this.RaiseDataMemberChanged("SqlDataTypeAsString");
                    this.OnSqlDataTypeAsStringChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVDatasourceDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.BAL")]
    public sealed partial class EWAVDatasourceDto : ComplexObject
    {
        
        private List<EWAVColumn> _allColumns;
        
        private string _dataBaseType;
        
        private int _datasourceID;
        
        private string _datasourceName;
        
        private string _datasourceNoCamelName;
        
        private long _filteredRecords;
        
        private int _organizationId;
        
        private string _tableName;
        
        private long _totalRecords;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllColumnsChanging(List<EWAVColumn> value);
        partial void OnAllColumnsChanged();
        partial void OnDataBaseTypeChanging(string value);
        partial void OnDataBaseTypeChanged();
        partial void OnDatasourceIDChanging(int value);
        partial void OnDatasourceIDChanged();
        partial void OnDatasourceNameChanging(string value);
        partial void OnDatasourceNameChanged();
        partial void OnDatasourceNoCamelNameChanging(string value);
        partial void OnDatasourceNoCamelNameChanged();
        partial void OnFilteredRecordsChanging(long value);
        partial void OnFilteredRecordsChanged();
        partial void OnOrganizationIdChanging(int value);
        partial void OnOrganizationIdChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnTotalRecordsChanging(long value);
        partial void OnTotalRecordsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVDatasourceDto"/> class.
        /// </summary>
        public EWAVDatasourceDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllColumns' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVColumn> AllColumns
        {
            get
            {
                return this._allColumns;
            }
            set
            {
                if ((this._allColumns != value))
                {
                    this.OnAllColumnsChanging(value);
                    this.RaiseDataMemberChanging("AllColumns");
                    this.ValidateProperty("AllColumns", value);
                    this._allColumns = value;
                    this.RaiseDataMemberChanged("AllColumns");
                    this.OnAllColumnsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataBaseType' value.
        /// </summary>
        [DataMember()]
        public string DataBaseType
        {
            get
            {
                return this._dataBaseType;
            }
            set
            {
                if ((this._dataBaseType != value))
                {
                    this.OnDataBaseTypeChanging(value);
                    this.RaiseDataMemberChanging("DataBaseType");
                    this.ValidateProperty("DataBaseType", value);
                    this._dataBaseType = value;
                    this.RaiseDataMemberChanged("DataBaseType");
                    this.OnDataBaseTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceID' value.
        /// </summary>
        [DataMember()]
        public int DatasourceID
        {
            get
            {
                return this._datasourceID;
            }
            set
            {
                if ((this._datasourceID != value))
                {
                    this.OnDatasourceIDChanging(value);
                    this.RaiseDataMemberChanging("DatasourceID");
                    this.ValidateProperty("DatasourceID", value);
                    this._datasourceID = value;
                    this.RaiseDataMemberChanged("DatasourceID");
                    this.OnDatasourceIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceName' value.
        /// </summary>
        [DataMember()]
        public string DatasourceName
        {
            get
            {
                return this._datasourceName;
            }
            set
            {
                if ((this._datasourceName != value))
                {
                    this.OnDatasourceNameChanging(value);
                    this.RaiseDataMemberChanging("DatasourceName");
                    this.ValidateProperty("DatasourceName", value);
                    this._datasourceName = value;
                    this.RaiseDataMemberChanged("DatasourceName");
                    this.OnDatasourceNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceNoCamelName' value.
        /// </summary>
        [DataMember()]
        public string DatasourceNoCamelName
        {
            get
            {
                return this._datasourceNoCamelName;
            }
            set
            {
                if ((this._datasourceNoCamelName != value))
                {
                    this.OnDatasourceNoCamelNameChanging(value);
                    this.RaiseDataMemberChanging("DatasourceNoCamelName");
                    this.ValidateProperty("DatasourceNoCamelName", value);
                    this._datasourceNoCamelName = value;
                    this.RaiseDataMemberChanged("DatasourceNoCamelName");
                    this.OnDatasourceNoCamelNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilteredRecords' value.
        /// </summary>
        [DataMember()]
        public long FilteredRecords
        {
            get
            {
                return this._filteredRecords;
            }
            set
            {
                if ((this._filteredRecords != value))
                {
                    this.OnFilteredRecordsChanging(value);
                    this.RaiseDataMemberChanging("FilteredRecords");
                    this.ValidateProperty("FilteredRecords", value);
                    this._filteredRecords = value;
                    this.RaiseDataMemberChanged("FilteredRecords");
                    this.OnFilteredRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        public int OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalRecords' value.
        /// </summary>
        [DataMember()]
        public long TotalRecords
        {
            get
            {
                return this._totalRecords;
            }
            set
            {
                if ((this._totalRecords != value))
                {
                    this.OnTotalRecordsChanging(value);
                    this.RaiseDataMemberChanging("TotalRecords");
                    this.ValidateProperty("TotalRecords", value);
                    this._totalRecords = value;
                    this.RaiseDataMemberChanged("TotalRecords");
                    this.OnTotalRecordsChanged();
                }
            }
        }
    }
}
namespace EWAV.DTO
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV;
    
    
    /// <summary>
    /// The 'CanvasShareStatusDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class CanvasShareStatusDto : ComplexObject
    {
        
        private int _canvasID;
        
        private string _firstName;
        
        private string _lastName;
        
        private int _organizationID;
        
        private string _organizationName;
        
        private bool _shared;
        
        private int _userID;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCanvasIDChanging(int value);
        partial void OnCanvasIDChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnOrganizationIDChanging(int value);
        partial void OnOrganizationIDChanged();
        partial void OnOrganizationNameChanging(string value);
        partial void OnOrganizationNameChanged();
        partial void OnSharedChanging(bool value);
        partial void OnSharedChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasShareStatusDto"/> class.
        /// </summary>
        public CanvasShareStatusDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CanvasID' value.
        /// </summary>
        [DataMember()]
        public int CanvasID
        {
            get
            {
                return this._canvasID;
            }
            set
            {
                if ((this._canvasID != value))
                {
                    this.OnCanvasIDChanging(value);
                    this.RaiseDataMemberChanging("CanvasID");
                    this.ValidateProperty("CanvasID", value);
                    this._canvasID = value;
                    this.RaiseDataMemberChanged("CanvasID");
                    this.OnCanvasIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        public int OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationID");
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaiseDataMemberChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationName' value.
        /// </summary>
        [DataMember()]
        public string OrganizationName
        {
            get
            {
                return this._organizationName;
            }
            set
            {
                if ((this._organizationName != value))
                {
                    this.OnOrganizationNameChanging(value);
                    this.RaiseDataMemberChanging("OrganizationName");
                    this.ValidateProperty("OrganizationName", value);
                    this._organizationName = value;
                    this.RaiseDataMemberChanged("OrganizationName");
                    this.OnOrganizationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Shared' value.
        /// </summary>
        [DataMember()]
        public bool Shared
        {
            get
            {
                return this._shared;
            }
            set
            {
                if ((this._shared != value))
                {
                    this.OnSharedChanging(value);
                    this.RaiseDataMemberChanging("Shared");
                    this.ValidateProperty("Shared", value);
                    this._shared = value;
                    this.RaiseDataMemberChanged("Shared");
                    this.OnSharedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public int UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Connection' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class Connection : ComplexObject
    {
        
        private string _databaseName;
        
        private string _databaseObject;
        
        private DataBaseTypeEnum _databaseType;
        
        private EWAVDatabaseObjectType _dataType;
        
        private string _password;
        
        private bool _persistSecurityInfo;
        
        private string _portNumber;
        
        private string _serverName;
        
        private string _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDatabaseNameChanging(string value);
        partial void OnDatabaseNameChanged();
        partial void OnDatabaseObjectChanging(string value);
        partial void OnDatabaseObjectChanged();
        partial void OnDatabaseTypeChanging(DataBaseTypeEnum value);
        partial void OnDatabaseTypeChanged();
        partial void OnDataTypeChanging(EWAVDatabaseObjectType value);
        partial void OnDataTypeChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPersistSecurityInfoChanging(bool value);
        partial void OnPersistSecurityInfoChanged();
        partial void OnPortNumberChanging(string value);
        partial void OnPortNumberChanged();
        partial void OnServerNameChanging(string value);
        partial void OnServerNameChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Connection"/> class.
        /// </summary>
        public Connection()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DatabaseName' value.
        /// </summary>
        [DataMember()]
        public string DatabaseName
        {
            get
            {
                return this._databaseName;
            }
            set
            {
                if ((this._databaseName != value))
                {
                    this.OnDatabaseNameChanging(value);
                    this.RaiseDataMemberChanging("DatabaseName");
                    this.ValidateProperty("DatabaseName", value);
                    this._databaseName = value;
                    this.RaiseDataMemberChanged("DatabaseName");
                    this.OnDatabaseNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatabaseObject' value.
        /// </summary>
        [DataMember()]
        public string DatabaseObject
        {
            get
            {
                return this._databaseObject;
            }
            set
            {
                if ((this._databaseObject != value))
                {
                    this.OnDatabaseObjectChanging(value);
                    this.RaiseDataMemberChanging("DatabaseObject");
                    this.ValidateProperty("DatabaseObject", value);
                    this._databaseObject = value;
                    this.RaiseDataMemberChanged("DatabaseObject");
                    this.OnDatabaseObjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatabaseType' value.
        /// </summary>
        [DataMember()]
        public DataBaseTypeEnum DatabaseType
        {
            get
            {
                return this._databaseType;
            }
            set
            {
                if ((this._databaseType != value))
                {
                    this.OnDatabaseTypeChanging(value);
                    this.RaiseDataMemberChanging("DatabaseType");
                    this.ValidateProperty("DatabaseType", value);
                    this._databaseType = value;
                    this.RaiseDataMemberChanged("DatabaseType");
                    this.OnDatabaseTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataType' value.
        /// </summary>
        [DataMember()]
        public EWAVDatabaseObjectType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                if ((this._dataType != value))
                {
                    this.OnDataTypeChanging(value);
                    this.RaiseDataMemberChanging("DataType");
                    this.ValidateProperty("DataType", value);
                    this._dataType = value;
                    this.RaiseDataMemberChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersistSecurityInfo' value.
        /// </summary>
        [DataMember()]
        public bool PersistSecurityInfo
        {
            get
            {
                return this._persistSecurityInfo;
            }
            set
            {
                if ((this._persistSecurityInfo != value))
                {
                    this.OnPersistSecurityInfoChanging(value);
                    this.RaiseDataMemberChanging("PersistSecurityInfo");
                    this.ValidateProperty("PersistSecurityInfo", value);
                    this._persistSecurityInfo = value;
                    this.RaiseDataMemberChanged("PersistSecurityInfo");
                    this.OnPersistSecurityInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PortNumber' value.
        /// </summary>
        [DataMember()]
        public string PortNumber
        {
            get
            {
                return this._portNumber;
            }
            set
            {
                if ((this._portNumber != value))
                {
                    this.OnPortNumberChanging(value);
                    this.RaiseDataMemberChanging("PortNumber");
                    this.ValidateProperty("PortNumber", value);
                    this._portNumber = value;
                    this.RaiseDataMemberChanged("PortNumber");
                    this.OnPortNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ServerName' value.
        /// </summary>
        [DataMember()]
        public string ServerName
        {
            get
            {
                return this._serverName;
            }
            set
            {
                if ((this._serverName != value))
                {
                    this.OnServerNameChanging(value);
                    this.RaiseDataMemberChanging("ServerName");
                    this.ValidateProperty("ServerName", value);
                    this._serverName = value;
                    this.RaiseDataMemberChanged("ServerName");
                    this.OnServerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
    
    public enum DataBaseTypeEnum
    {
        
        MySQL = 0,
        
        PostgreSQL = 1,
        
        SQLServer = 2,
    }
    
    /// <summary>
    /// The 'DatasourceDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class DatasourceDto : ComplexObject
    {
        
        private List<UserDTO> _associatedUsers;
        
        private Connection _connection;
        
        private int _datasourceId;
        
        private string _datasourceName;
        
        private string _datasourceServerName;
        
        private EWAVDatabaseObjectType _ewavDatabaseObjectType;
        
        private bool _isActive;
        
        private bool _isEpiInfoForm;
        
        private int _numberOfUsers;
        
        private int _organizationId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAssociatedUsersChanging(List<UserDTO> value);
        partial void OnAssociatedUsersChanged();
        partial void OnConnectionChanging(Connection value);
        partial void OnConnectionChanged();
        partial void OnDatasourceIdChanging(int value);
        partial void OnDatasourceIdChanged();
        partial void OnDatasourceNameChanging(string value);
        partial void OnDatasourceNameChanged();
        partial void OnDatasourceServerNameChanging(string value);
        partial void OnDatasourceServerNameChanged();
        partial void OnEWAVDatabaseObjectTypeChanging(EWAVDatabaseObjectType value);
        partial void OnEWAVDatabaseObjectTypeChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnIsEpiInfoFormChanging(bool value);
        partial void OnIsEpiInfoFormChanged();
        partial void OnNumberOfUsersChanging(int value);
        partial void OnNumberOfUsersChanged();
        partial void OnOrganizationIdChanging(int value);
        partial void OnOrganizationIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourceDto"/> class.
        /// </summary>
        public DatasourceDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AssociatedUsers' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<UserDTO> AssociatedUsers
        {
            get
            {
                return this._associatedUsers;
            }
            set
            {
                if ((this._associatedUsers != value))
                {
                    this.OnAssociatedUsersChanging(value);
                    this.RaiseDataMemberChanging("AssociatedUsers");
                    this.ValidateProperty("AssociatedUsers", value);
                    this._associatedUsers = value;
                    this.RaiseDataMemberChanged("AssociatedUsers");
                    this.OnAssociatedUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Connection' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Connection Connection
        {
            get
            {
                return this._connection;
            }
            set
            {
                if ((this._connection != value))
                {
                    this.OnConnectionChanging(value);
                    this.RaiseDataMemberChanging("Connection");
                    this.ValidateProperty("Connection", value);
                    this._connection = value;
                    this.RaiseDataMemberChanged("Connection");
                    this.OnConnectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceId' value.
        /// </summary>
        [DataMember()]
        public int DatasourceId
        {
            get
            {
                return this._datasourceId;
            }
            set
            {
                if ((this._datasourceId != value))
                {
                    this.OnDatasourceIdChanging(value);
                    this.RaiseDataMemberChanging("DatasourceId");
                    this.ValidateProperty("DatasourceId", value);
                    this._datasourceId = value;
                    this.RaiseDataMemberChanged("DatasourceId");
                    this.OnDatasourceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceName' value.
        /// </summary>
        [DataMember()]
        public string DatasourceName
        {
            get
            {
                return this._datasourceName;
            }
            set
            {
                if ((this._datasourceName != value))
                {
                    this.OnDatasourceNameChanging(value);
                    this.RaiseDataMemberChanging("DatasourceName");
                    this.ValidateProperty("DatasourceName", value);
                    this._datasourceName = value;
                    this.RaiseDataMemberChanged("DatasourceName");
                    this.OnDatasourceNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceServerName' value.
        /// </summary>
        [DataMember()]
        public string DatasourceServerName
        {
            get
            {
                return this._datasourceServerName;
            }
            set
            {
                if ((this._datasourceServerName != value))
                {
                    this.OnDatasourceServerNameChanging(value);
                    this.RaiseDataMemberChanging("DatasourceServerName");
                    this.ValidateProperty("DatasourceServerName", value);
                    this._datasourceServerName = value;
                    this.RaiseDataMemberChanged("DatasourceServerName");
                    this.OnDatasourceServerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EWAVDatabaseObjectType' value.
        /// </summary>
        [DataMember()]
        public EWAVDatabaseObjectType EWAVDatabaseObjectType
        {
            get
            {
                return this._ewavDatabaseObjectType;
            }
            set
            {
                if ((this._ewavDatabaseObjectType != value))
                {
                    this.OnEWAVDatabaseObjectTypeChanging(value);
                    this.RaiseDataMemberChanging("EWAVDatabaseObjectType");
                    this.ValidateProperty("EWAVDatabaseObjectType", value);
                    this._ewavDatabaseObjectType = value;
                    this.RaiseDataMemberChanged("EWAVDatabaseObjectType");
                    this.OnEWAVDatabaseObjectTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsEpiInfoForm' value.
        /// </summary>
        [DataMember()]
        public bool IsEpiInfoForm
        {
            get
            {
                return this._isEpiInfoForm;
            }
            set
            {
                if ((this._isEpiInfoForm != value))
                {
                    this.OnIsEpiInfoFormChanging(value);
                    this.RaiseDataMemberChanging("IsEpiInfoForm");
                    this.ValidateProperty("IsEpiInfoForm", value);
                    this._isEpiInfoForm = value;
                    this.RaiseDataMemberChanged("IsEpiInfoForm");
                    this.OnIsEpiInfoFormChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfUsers' value.
        /// </summary>
        [DataMember()]
        public int NumberOfUsers
        {
            get
            {
                return this._numberOfUsers;
            }
            set
            {
                if ((this._numberOfUsers != value))
                {
                    this.OnNumberOfUsersChanging(value);
                    this.RaiseDataMemberChanging("NumberOfUsers");
                    this.ValidateProperty("NumberOfUsers", value);
                    this._numberOfUsers = value;
                    this.RaiseDataMemberChanged("NumberOfUsers");
                    this.OnNumberOfUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        public int OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'DatasourceUserDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class DatasourceUserDto : ComplexObject
    {
        
        private int _datasourceId;
        
        private int _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDatasourceIdChanging(int value);
        partial void OnDatasourceIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourceUserDto"/> class.
        /// </summary>
        public DatasourceUserDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceId' value.
        /// </summary>
        [DataMember()]
        public int DatasourceId
        {
            get
            {
                return this._datasourceId;
            }
            set
            {
                if ((this._datasourceId != value))
                {
                    this.OnDatasourceIdChanging(value);
                    this.RaiseDataMemberChanging("DatasourceId");
                    this.ValidateProperty("DatasourceId", value);
                    this._datasourceId = value;
                    this.RaiseDataMemberChanged("DatasourceId");
                    this.OnDatasourceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
    
    public enum EWAVDatabaseObjectType
    {
        
        Table = 0,
        
        View = 1,
        
        SqlScript = 2,
    }
    
    /// <summary>
    /// The 'EWAVFrequencyControlDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class EWAVFrequencyControlDto : ComplexObject
    {
        
        private string _frequencyColumn;
        
        private string _freqVariable;
        
        private string _nameOfDtoList;
        
        private string _perc95ClLowerColumn;
        
        private string _perc95ClUpperColumn;
        
        private string _percentColumn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFrequencyColumnChanging(string value);
        partial void OnFrequencyColumnChanged();
        partial void OnFreqVariableChanging(string value);
        partial void OnFreqVariableChanged();
        partial void OnNameOfDtoListChanging(string value);
        partial void OnNameOfDtoListChanged();
        partial void OnPerc95ClLowerColumnChanging(string value);
        partial void OnPerc95ClLowerColumnChanged();
        partial void OnPerc95ClUpperColumnChanging(string value);
        partial void OnPerc95ClUpperColumnChanged();
        partial void OnPercentColumnChanging(string value);
        partial void OnPercentColumnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVFrequencyControlDto"/> class.
        /// </summary>
        public EWAVFrequencyControlDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FrequencyColumn' value.
        /// </summary>
        [DataMember()]
        public string FrequencyColumn
        {
            get
            {
                return this._frequencyColumn;
            }
            set
            {
                if ((this._frequencyColumn != value))
                {
                    this.OnFrequencyColumnChanging(value);
                    this.RaiseDataMemberChanging("FrequencyColumn");
                    this.ValidateProperty("FrequencyColumn", value);
                    this._frequencyColumn = value;
                    this.RaiseDataMemberChanged("FrequencyColumn");
                    this.OnFrequencyColumnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FreqVariable' value.
        /// </summary>
        [DataMember()]
        public string FreqVariable
        {
            get
            {
                return this._freqVariable;
            }
            set
            {
                if ((this._freqVariable != value))
                {
                    this.OnFreqVariableChanging(value);
                    this.RaiseDataMemberChanging("FreqVariable");
                    this.ValidateProperty("FreqVariable", value);
                    this._freqVariable = value;
                    this.RaiseDataMemberChanged("FreqVariable");
                    this.OnFreqVariableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NameOfDtoList' value.
        /// </summary>
        [DataMember()]
        public string NameOfDtoList
        {
            get
            {
                return this._nameOfDtoList;
            }
            set
            {
                if ((this._nameOfDtoList != value))
                {
                    this.OnNameOfDtoListChanging(value);
                    this.RaiseDataMemberChanging("NameOfDtoList");
                    this.ValidateProperty("NameOfDtoList", value);
                    this._nameOfDtoList = value;
                    this.RaiseDataMemberChanged("NameOfDtoList");
                    this.OnNameOfDtoListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Perc95ClLowerColumn' value.
        /// </summary>
        [DataMember()]
        public string Perc95ClLowerColumn
        {
            get
            {
                return this._perc95ClLowerColumn;
            }
            set
            {
                if ((this._perc95ClLowerColumn != value))
                {
                    this.OnPerc95ClLowerColumnChanging(value);
                    this.RaiseDataMemberChanging("Perc95ClLowerColumn");
                    this.ValidateProperty("Perc95ClLowerColumn", value);
                    this._perc95ClLowerColumn = value;
                    this.RaiseDataMemberChanged("Perc95ClLowerColumn");
                    this.OnPerc95ClLowerColumnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Perc95ClUpperColumn' value.
        /// </summary>
        [DataMember()]
        public string Perc95ClUpperColumn
        {
            get
            {
                return this._perc95ClUpperColumn;
            }
            set
            {
                if ((this._perc95ClUpperColumn != value))
                {
                    this.OnPerc95ClUpperColumnChanging(value);
                    this.RaiseDataMemberChanging("Perc95ClUpperColumn");
                    this.ValidateProperty("Perc95ClUpperColumn", value);
                    this._perc95ClUpperColumn = value;
                    this.RaiseDataMemberChanged("Perc95ClUpperColumn");
                    this.OnPerc95ClUpperColumnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PercentColumn' value.
        /// </summary>
        [DataMember()]
        public string PercentColumn
        {
            get
            {
                return this._percentColumn;
            }
            set
            {
                if ((this._percentColumn != value))
                {
                    this.OnPercentColumnChanging(value);
                    this.RaiseDataMemberChanging("PercentColumn");
                    this.ValidateProperty("PercentColumn", value);
                    this._percentColumn = value;
                    this.RaiseDataMemberChanged("PercentColumn");
                    this.OnPercentColumnChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWEDatasourceDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class EWEDatasourceDto : ComplexObject
    {
        
        private string _databaseName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDatabaseNameChanging(string value);
        partial void OnDatabaseNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWEDatasourceDto"/> class.
        /// </summary>
        public EWEDatasourceDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DatabaseName' value.
        /// </summary>
        [DataMember()]
        public string DatabaseName
        {
            get
            {
                return this._databaseName;
            }
            set
            {
                if ((this._databaseName != value))
                {
                    this.OnDatabaseNameChanging(value);
                    this.RaiseDataMemberChanging("DatabaseName");
                    this.ValidateProperty("DatabaseName", value);
                    this._databaseName = value;
                    this.RaiseDataMemberChanged("DatabaseName");
                    this.OnDatabaseNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'PasswordRulesDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class PasswordRulesDTO : ComplexObject
    {
        
        private bool _consecutiveCharacters;
        
        private int _maximumLength;
        
        private int _minimumLength;
        
        private int _numberOfTypesRequiredInPassword;
        
        private bool _repeatCharacters;
        
        private string _symbols;
        
        private bool _useLowerCase;
        
        private bool _useNumeric;
        
        private bool _useSymbols;
        
        private bool _useUpperCase;
        
        private bool _useUserIdInPassword;
        
        private bool _useUserNameInPassword;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConsecutiveCharactersChanging(bool value);
        partial void OnConsecutiveCharactersChanged();
        partial void OnMaximumLengthChanging(int value);
        partial void OnMaximumLengthChanged();
        partial void OnMinimumLengthChanging(int value);
        partial void OnMinimumLengthChanged();
        partial void OnNumberOfTypesRequiredInPasswordChanging(int value);
        partial void OnNumberOfTypesRequiredInPasswordChanged();
        partial void OnRepeatCharactersChanging(bool value);
        partial void OnRepeatCharactersChanged();
        partial void OnSymbolsChanging(string value);
        partial void OnSymbolsChanged();
        partial void OnUseLowerCaseChanging(bool value);
        partial void OnUseLowerCaseChanged();
        partial void OnUseNumericChanging(bool value);
        partial void OnUseNumericChanged();
        partial void OnUseSymbolsChanging(bool value);
        partial void OnUseSymbolsChanged();
        partial void OnUseUpperCaseChanging(bool value);
        partial void OnUseUpperCaseChanged();
        partial void OnUseUserIdInPasswordChanging(bool value);
        partial void OnUseUserIdInPasswordChanged();
        partial void OnUseUserNameInPasswordChanging(bool value);
        partial void OnUseUserNameInPasswordChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordRulesDTO"/> class.
        /// </summary>
        public PasswordRulesDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConsecutiveCharacters' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool ConsecutiveCharacters
        {
            get
            {
                return this._consecutiveCharacters;
            }
            set
            {
                if ((this._consecutiveCharacters != value))
                {
                    this.OnConsecutiveCharactersChanging(value);
                    this.ValidateProperty("ConsecutiveCharacters", value);
                    this._consecutiveCharacters = value;
                    this.RaisePropertyChanged("ConsecutiveCharacters");
                    this.OnConsecutiveCharactersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaximumLength' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int MaximumLength
        {
            get
            {
                return this._maximumLength;
            }
            set
            {
                if ((this._maximumLength != value))
                {
                    this.OnMaximumLengthChanging(value);
                    this.ValidateProperty("MaximumLength", value);
                    this._maximumLength = value;
                    this.RaisePropertyChanged("MaximumLength");
                    this.OnMaximumLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinimumLength' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int MinimumLength
        {
            get
            {
                return this._minimumLength;
            }
            set
            {
                if ((this._minimumLength != value))
                {
                    this.OnMinimumLengthChanging(value);
                    this.ValidateProperty("MinimumLength", value);
                    this._minimumLength = value;
                    this.RaisePropertyChanged("MinimumLength");
                    this.OnMinimumLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfTypesRequiredInPassword' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int NumberOfTypesRequiredInPassword
        {
            get
            {
                return this._numberOfTypesRequiredInPassword;
            }
            set
            {
                if ((this._numberOfTypesRequiredInPassword != value))
                {
                    this.OnNumberOfTypesRequiredInPasswordChanging(value);
                    this.ValidateProperty("NumberOfTypesRequiredInPassword", value);
                    this._numberOfTypesRequiredInPassword = value;
                    this.RaisePropertyChanged("NumberOfTypesRequiredInPassword");
                    this.OnNumberOfTypesRequiredInPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RepeatCharacters' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool RepeatCharacters
        {
            get
            {
                return this._repeatCharacters;
            }
            set
            {
                if ((this._repeatCharacters != value))
                {
                    this.OnRepeatCharactersChanging(value);
                    this.ValidateProperty("RepeatCharacters", value);
                    this._repeatCharacters = value;
                    this.RaisePropertyChanged("RepeatCharacters");
                    this.OnRepeatCharactersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Symbols' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string Symbols
        {
            get
            {
                return this._symbols;
            }
            set
            {
                if ((this._symbols != value))
                {
                    this.OnSymbolsChanging(value);
                    this.ValidateProperty("Symbols", value);
                    this._symbols = value;
                    this.RaisePropertyChanged("Symbols");
                    this.OnSymbolsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseLowerCase' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool UseLowerCase
        {
            get
            {
                return this._useLowerCase;
            }
            set
            {
                if ((this._useLowerCase != value))
                {
                    this.OnUseLowerCaseChanging(value);
                    this.ValidateProperty("UseLowerCase", value);
                    this._useLowerCase = value;
                    this.RaisePropertyChanged("UseLowerCase");
                    this.OnUseLowerCaseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseNumeric' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool UseNumeric
        {
            get
            {
                return this._useNumeric;
            }
            set
            {
                if ((this._useNumeric != value))
                {
                    this.OnUseNumericChanging(value);
                    this.ValidateProperty("UseNumeric", value);
                    this._useNumeric = value;
                    this.RaisePropertyChanged("UseNumeric");
                    this.OnUseNumericChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseSymbols' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool UseSymbols
        {
            get
            {
                return this._useSymbols;
            }
            set
            {
                if ((this._useSymbols != value))
                {
                    this.OnUseSymbolsChanging(value);
                    this.ValidateProperty("UseSymbols", value);
                    this._useSymbols = value;
                    this.RaisePropertyChanged("UseSymbols");
                    this.OnUseSymbolsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseUpperCase' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool UseUpperCase
        {
            get
            {
                return this._useUpperCase;
            }
            set
            {
                if ((this._useUpperCase != value))
                {
                    this.OnUseUpperCaseChanging(value);
                    this.ValidateProperty("UseUpperCase", value);
                    this._useUpperCase = value;
                    this.RaisePropertyChanged("UseUpperCase");
                    this.OnUseUpperCaseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseUserIdInPassword' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool UseUserIdInPassword
        {
            get
            {
                return this._useUserIdInPassword;
            }
            set
            {
                if ((this._useUserIdInPassword != value))
                {
                    this.OnUseUserIdInPasswordChanging(value);
                    this.ValidateProperty("UseUserIdInPassword", value);
                    this._useUserIdInPassword = value;
                    this.RaisePropertyChanged("UseUserIdInPassword");
                    this.OnUseUserIdInPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseUserNameInPassword' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool UseUserNameInPassword
        {
            get
            {
                return this._useUserNameInPassword;
            }
            set
            {
                if ((this._useUserNameInPassword != value))
                {
                    this.OnUseUserNameInPasswordChanging(value);
                    this.ValidateProperty("UseUserNameInPassword", value);
                    this._useUserNameInPassword = value;
                    this.RaisePropertyChanged("UseUserNameInPassword");
                    this.OnUseUserNameInPasswordChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'PointDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class PointDTO : ComplexObject
    {
        
        private IEnumerable<string> _data;
        
        private double _latY;
        
        private double _lonX;
        
        private string _mapTip;
        
        private string _strataValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(IEnumerable<string> value);
        partial void OnDataChanged();
        partial void OnLatYChanging(double value);
        partial void OnLatYChanged();
        partial void OnLonXChanging(double value);
        partial void OnLonXChanged();
        partial void OnMapTipChanging(string value);
        partial void OnMapTipChanged();
        partial void OnStrataValueChanging(string value);
        partial void OnStrataValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PointDTO"/> class.
        /// </summary>
        public PointDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LatY' value.
        /// </summary>
        [DataMember()]
        public double LatY
        {
            get
            {
                return this._latY;
            }
            set
            {
                if ((this._latY != value))
                {
                    this.OnLatYChanging(value);
                    this.RaiseDataMemberChanging("LatY");
                    this.ValidateProperty("LatY", value);
                    this._latY = value;
                    this.RaiseDataMemberChanged("LatY");
                    this.OnLatYChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LonX' value.
        /// </summary>
        [DataMember()]
        public double LonX
        {
            get
            {
                return this._lonX;
            }
            set
            {
                if ((this._lonX != value))
                {
                    this.OnLonXChanging(value);
                    this.RaiseDataMemberChanging("LonX");
                    this.ValidateProperty("LonX", value);
                    this._lonX = value;
                    this.RaiseDataMemberChanged("LonX");
                    this.OnLonXChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MapTip' value.
        /// </summary>
        [DataMember()]
        public string MapTip
        {
            get
            {
                return this._mapTip;
            }
            set
            {
                if ((this._mapTip != value))
                {
                    this.OnMapTipChanging(value);
                    this.RaiseDataMemberChanging("MapTip");
                    this.ValidateProperty("MapTip", value);
                    this._mapTip = value;
                    this.RaiseDataMemberChanged("MapTip");
                    this.OnMapTipChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrataValue' value.
        /// </summary>
        [DataMember()]
        public string StrataValue
        {
            get
            {
                return this._strataValue;
            }
            set
            {
                if ((this._strataValue != value))
                {
                    this.OnStrataValueChanging(value);
                    this.RaiseDataMemberChanging("StrataValue");
                    this.ValidateProperty("StrataValue", value);
                    this._strataValue = value;
                    this.RaiseDataMemberChanged("StrataValue");
                    this.OnStrataValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'PointDTOCollection' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class PointDTOCollection : ComplexObject
    {
        
        private List<PointDTO> _collection;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCollectionChanging(List<PointDTO> value);
        partial void OnCollectionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PointDTOCollection"/> class.
        /// </summary>
        public PointDTOCollection()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Collection' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<PointDTO> Collection
        {
            get
            {
                return this._collection;
            }
            set
            {
                if ((this._collection != value))
                {
                    this.OnCollectionChanging(value);
                    this.RaiseDataMemberChanging("Collection");
                    this.ValidateProperty("Collection", value);
                    this._collection = value;
                    this.RaiseDataMemberChanged("Collection");
                    this.OnCollectionChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'StatCalc2x2' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class StatCalc2x2 : ComplexObject
    {
        
        private string _chiSqCorP;
        
        private string _chiSqCorVal;
        
        private string _chiSqManP;
        
        private string _chiSqManVal;
        
        private string _chiSqUncP;
        
        private string _chiSqUncVal;
        
        private string _fisherExact;
        
        private string _fisherExact2P;
        
        private string _fisherLower;
        
        private string _fisherUpper;
        
        private string _midPEstimate;
        
        private string _midPExact;
        
        private string _midPLower;
        
        private string _midPUpper;
        
        private string _oddsRatioEstimate;
        
        private string _oddsRatioLower;
        
        private string _oddsRatioUpper;
        
        private string _riskDifferenceEstimate;
        
        private string _riskDifferenceLower;
        
        private string _riskDifferenceUpper;
        
        private string _riskRatioEstimate;
        
        private string _riskRatioLower;
        
        private string _riskRatioUpper;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChiSqCorPChanging(string value);
        partial void OnChiSqCorPChanged();
        partial void OnChiSqCorValChanging(string value);
        partial void OnChiSqCorValChanged();
        partial void OnChiSqManPChanging(string value);
        partial void OnChiSqManPChanged();
        partial void OnChiSqManValChanging(string value);
        partial void OnChiSqManValChanged();
        partial void OnChiSqUncPChanging(string value);
        partial void OnChiSqUncPChanged();
        partial void OnChiSqUncValChanging(string value);
        partial void OnChiSqUncValChanged();
        partial void OnFisherExactChanging(string value);
        partial void OnFisherExactChanged();
        partial void OnFisherExact2PChanging(string value);
        partial void OnFisherExact2PChanged();
        partial void OnFisherLowerChanging(string value);
        partial void OnFisherLowerChanged();
        partial void OnFisherUpperChanging(string value);
        partial void OnFisherUpperChanged();
        partial void OnMidPEstimateChanging(string value);
        partial void OnMidPEstimateChanged();
        partial void OnMidPExactChanging(string value);
        partial void OnMidPExactChanged();
        partial void OnMidPLowerChanging(string value);
        partial void OnMidPLowerChanged();
        partial void OnMidPUpperChanging(string value);
        partial void OnMidPUpperChanged();
        partial void OnOddsRatioEstimateChanging(string value);
        partial void OnOddsRatioEstimateChanged();
        partial void OnOddsRatioLowerChanging(string value);
        partial void OnOddsRatioLowerChanged();
        partial void OnOddsRatioUpperChanging(string value);
        partial void OnOddsRatioUpperChanged();
        partial void OnRiskDifferenceEstimateChanging(string value);
        partial void OnRiskDifferenceEstimateChanged();
        partial void OnRiskDifferenceLowerChanging(string value);
        partial void OnRiskDifferenceLowerChanged();
        partial void OnRiskDifferenceUpperChanging(string value);
        partial void OnRiskDifferenceUpperChanged();
        partial void OnRiskRatioEstimateChanging(string value);
        partial void OnRiskRatioEstimateChanged();
        partial void OnRiskRatioLowerChanging(string value);
        partial void OnRiskRatioLowerChanged();
        partial void OnRiskRatioUpperChanging(string value);
        partial void OnRiskRatioUpperChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StatCalc2x2"/> class.
        /// </summary>
        public StatCalc2x2()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSqCorP' value.
        /// </summary>
        [DataMember()]
        public string ChiSqCorP
        {
            get
            {
                return this._chiSqCorP;
            }
            set
            {
                if ((this._chiSqCorP != value))
                {
                    this.OnChiSqCorPChanging(value);
                    this.RaiseDataMemberChanging("ChiSqCorP");
                    this.ValidateProperty("ChiSqCorP", value);
                    this._chiSqCorP = value;
                    this.RaiseDataMemberChanged("ChiSqCorP");
                    this.OnChiSqCorPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSqCorVal' value.
        /// </summary>
        [DataMember()]
        public string ChiSqCorVal
        {
            get
            {
                return this._chiSqCorVal;
            }
            set
            {
                if ((this._chiSqCorVal != value))
                {
                    this.OnChiSqCorValChanging(value);
                    this.RaiseDataMemberChanging("ChiSqCorVal");
                    this.ValidateProperty("ChiSqCorVal", value);
                    this._chiSqCorVal = value;
                    this.RaiseDataMemberChanged("ChiSqCorVal");
                    this.OnChiSqCorValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSqManP' value.
        /// </summary>
        [DataMember()]
        public string ChiSqManP
        {
            get
            {
                return this._chiSqManP;
            }
            set
            {
                if ((this._chiSqManP != value))
                {
                    this.OnChiSqManPChanging(value);
                    this.RaiseDataMemberChanging("ChiSqManP");
                    this.ValidateProperty("ChiSqManP", value);
                    this._chiSqManP = value;
                    this.RaiseDataMemberChanged("ChiSqManP");
                    this.OnChiSqManPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSqManVal' value.
        /// </summary>
        [DataMember()]
        public string ChiSqManVal
        {
            get
            {
                return this._chiSqManVal;
            }
            set
            {
                if ((this._chiSqManVal != value))
                {
                    this.OnChiSqManValChanging(value);
                    this.RaiseDataMemberChanging("ChiSqManVal");
                    this.ValidateProperty("ChiSqManVal", value);
                    this._chiSqManVal = value;
                    this.RaiseDataMemberChanged("ChiSqManVal");
                    this.OnChiSqManValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSqUncP' value.
        /// </summary>
        [DataMember()]
        public string ChiSqUncP
        {
            get
            {
                return this._chiSqUncP;
            }
            set
            {
                if ((this._chiSqUncP != value))
                {
                    this.OnChiSqUncPChanging(value);
                    this.RaiseDataMemberChanging("ChiSqUncP");
                    this.ValidateProperty("ChiSqUncP", value);
                    this._chiSqUncP = value;
                    this.RaiseDataMemberChanged("ChiSqUncP");
                    this.OnChiSqUncPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSqUncVal' value.
        /// </summary>
        [DataMember()]
        public string ChiSqUncVal
        {
            get
            {
                return this._chiSqUncVal;
            }
            set
            {
                if ((this._chiSqUncVal != value))
                {
                    this.OnChiSqUncValChanging(value);
                    this.RaiseDataMemberChanging("ChiSqUncVal");
                    this.ValidateProperty("ChiSqUncVal", value);
                    this._chiSqUncVal = value;
                    this.RaiseDataMemberChanged("ChiSqUncVal");
                    this.OnChiSqUncValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FisherExact' value.
        /// </summary>
        [DataMember()]
        public string FisherExact
        {
            get
            {
                return this._fisherExact;
            }
            set
            {
                if ((this._fisherExact != value))
                {
                    this.OnFisherExactChanging(value);
                    this.RaiseDataMemberChanging("FisherExact");
                    this.ValidateProperty("FisherExact", value);
                    this._fisherExact = value;
                    this.RaiseDataMemberChanged("FisherExact");
                    this.OnFisherExactChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FisherExact2P' value.
        /// </summary>
        [DataMember()]
        public string FisherExact2P
        {
            get
            {
                return this._fisherExact2P;
            }
            set
            {
                if ((this._fisherExact2P != value))
                {
                    this.OnFisherExact2PChanging(value);
                    this.RaiseDataMemberChanging("FisherExact2P");
                    this.ValidateProperty("FisherExact2P", value);
                    this._fisherExact2P = value;
                    this.RaiseDataMemberChanged("FisherExact2P");
                    this.OnFisherExact2PChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FisherLower' value.
        /// </summary>
        [DataMember()]
        public string FisherLower
        {
            get
            {
                return this._fisherLower;
            }
            set
            {
                if ((this._fisherLower != value))
                {
                    this.OnFisherLowerChanging(value);
                    this.RaiseDataMemberChanging("FisherLower");
                    this.ValidateProperty("FisherLower", value);
                    this._fisherLower = value;
                    this.RaiseDataMemberChanged("FisherLower");
                    this.OnFisherLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FisherUpper' value.
        /// </summary>
        [DataMember()]
        public string FisherUpper
        {
            get
            {
                return this._fisherUpper;
            }
            set
            {
                if ((this._fisherUpper != value))
                {
                    this.OnFisherUpperChanging(value);
                    this.RaiseDataMemberChanging("FisherUpper");
                    this.ValidateProperty("FisherUpper", value);
                    this._fisherUpper = value;
                    this.RaiseDataMemberChanged("FisherUpper");
                    this.OnFisherUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidPEstimate' value.
        /// </summary>
        [DataMember()]
        public string MidPEstimate
        {
            get
            {
                return this._midPEstimate;
            }
            set
            {
                if ((this._midPEstimate != value))
                {
                    this.OnMidPEstimateChanging(value);
                    this.RaiseDataMemberChanging("MidPEstimate");
                    this.ValidateProperty("MidPEstimate", value);
                    this._midPEstimate = value;
                    this.RaiseDataMemberChanged("MidPEstimate");
                    this.OnMidPEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidPExact' value.
        /// </summary>
        [DataMember()]
        public string MidPExact
        {
            get
            {
                return this._midPExact;
            }
            set
            {
                if ((this._midPExact != value))
                {
                    this.OnMidPExactChanging(value);
                    this.RaiseDataMemberChanging("MidPExact");
                    this.ValidateProperty("MidPExact", value);
                    this._midPExact = value;
                    this.RaiseDataMemberChanged("MidPExact");
                    this.OnMidPExactChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidPLower' value.
        /// </summary>
        [DataMember()]
        public string MidPLower
        {
            get
            {
                return this._midPLower;
            }
            set
            {
                if ((this._midPLower != value))
                {
                    this.OnMidPLowerChanging(value);
                    this.RaiseDataMemberChanging("MidPLower");
                    this.ValidateProperty("MidPLower", value);
                    this._midPLower = value;
                    this.RaiseDataMemberChanged("MidPLower");
                    this.OnMidPLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidPUpper' value.
        /// </summary>
        [DataMember()]
        public string MidPUpper
        {
            get
            {
                return this._midPUpper;
            }
            set
            {
                if ((this._midPUpper != value))
                {
                    this.OnMidPUpperChanging(value);
                    this.RaiseDataMemberChanging("MidPUpper");
                    this.ValidateProperty("MidPUpper", value);
                    this._midPUpper = value;
                    this.RaiseDataMemberChanged("MidPUpper");
                    this.OnMidPUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioEstimate' value.
        /// </summary>
        [DataMember()]
        public string OddsRatioEstimate
        {
            get
            {
                return this._oddsRatioEstimate;
            }
            set
            {
                if ((this._oddsRatioEstimate != value))
                {
                    this.OnOddsRatioEstimateChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioEstimate");
                    this.ValidateProperty("OddsRatioEstimate", value);
                    this._oddsRatioEstimate = value;
                    this.RaiseDataMemberChanged("OddsRatioEstimate");
                    this.OnOddsRatioEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioLower' value.
        /// </summary>
        [DataMember()]
        public string OddsRatioLower
        {
            get
            {
                return this._oddsRatioLower;
            }
            set
            {
                if ((this._oddsRatioLower != value))
                {
                    this.OnOddsRatioLowerChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioLower");
                    this.ValidateProperty("OddsRatioLower", value);
                    this._oddsRatioLower = value;
                    this.RaiseDataMemberChanged("OddsRatioLower");
                    this.OnOddsRatioLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioUpper' value.
        /// </summary>
        [DataMember()]
        public string OddsRatioUpper
        {
            get
            {
                return this._oddsRatioUpper;
            }
            set
            {
                if ((this._oddsRatioUpper != value))
                {
                    this.OnOddsRatioUpperChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioUpper");
                    this.ValidateProperty("OddsRatioUpper", value);
                    this._oddsRatioUpper = value;
                    this.RaiseDataMemberChanged("OddsRatioUpper");
                    this.OnOddsRatioUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskDifferenceEstimate' value.
        /// </summary>
        [DataMember()]
        public string RiskDifferenceEstimate
        {
            get
            {
                return this._riskDifferenceEstimate;
            }
            set
            {
                if ((this._riskDifferenceEstimate != value))
                {
                    this.OnRiskDifferenceEstimateChanging(value);
                    this.RaiseDataMemberChanging("RiskDifferenceEstimate");
                    this.ValidateProperty("RiskDifferenceEstimate", value);
                    this._riskDifferenceEstimate = value;
                    this.RaiseDataMemberChanged("RiskDifferenceEstimate");
                    this.OnRiskDifferenceEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskDifferenceLower' value.
        /// </summary>
        [DataMember()]
        public string RiskDifferenceLower
        {
            get
            {
                return this._riskDifferenceLower;
            }
            set
            {
                if ((this._riskDifferenceLower != value))
                {
                    this.OnRiskDifferenceLowerChanging(value);
                    this.RaiseDataMemberChanging("RiskDifferenceLower");
                    this.ValidateProperty("RiskDifferenceLower", value);
                    this._riskDifferenceLower = value;
                    this.RaiseDataMemberChanged("RiskDifferenceLower");
                    this.OnRiskDifferenceLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskDifferenceUpper' value.
        /// </summary>
        [DataMember()]
        public string RiskDifferenceUpper
        {
            get
            {
                return this._riskDifferenceUpper;
            }
            set
            {
                if ((this._riskDifferenceUpper != value))
                {
                    this.OnRiskDifferenceUpperChanging(value);
                    this.RaiseDataMemberChanging("RiskDifferenceUpper");
                    this.ValidateProperty("RiskDifferenceUpper", value);
                    this._riskDifferenceUpper = value;
                    this.RaiseDataMemberChanged("RiskDifferenceUpper");
                    this.OnRiskDifferenceUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskRatioEstimate' value.
        /// </summary>
        [DataMember()]
        public string RiskRatioEstimate
        {
            get
            {
                return this._riskRatioEstimate;
            }
            set
            {
                if ((this._riskRatioEstimate != value))
                {
                    this.OnRiskRatioEstimateChanging(value);
                    this.RaiseDataMemberChanging("RiskRatioEstimate");
                    this.ValidateProperty("RiskRatioEstimate", value);
                    this._riskRatioEstimate = value;
                    this.RaiseDataMemberChanged("RiskRatioEstimate");
                    this.OnRiskRatioEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskRatioLower' value.
        /// </summary>
        [DataMember()]
        public string RiskRatioLower
        {
            get
            {
                return this._riskRatioLower;
            }
            set
            {
                if ((this._riskRatioLower != value))
                {
                    this.OnRiskRatioLowerChanging(value);
                    this.RaiseDataMemberChanging("RiskRatioLower");
                    this.ValidateProperty("RiskRatioLower", value);
                    this._riskRatioLower = value;
                    this.RaiseDataMemberChanged("RiskRatioLower");
                    this.OnRiskRatioLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskRatioUpper' value.
        /// </summary>
        [DataMember()]
        public string RiskRatioUpper
        {
            get
            {
                return this._riskRatioUpper;
            }
            set
            {
                if ((this._riskRatioUpper != value))
                {
                    this.OnRiskRatioUpperChanging(value);
                    this.RaiseDataMemberChanging("RiskRatioUpper");
                    this.ValidateProperty("RiskRatioUpper", value);
                    this._riskRatioUpper = value;
                    this.RaiseDataMemberChanged("RiskRatioUpper");
                    this.OnRiskRatioUpperChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'UserDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class UserDTO : ComplexObject
    {
        
        private int _datasourceCount;
        
        private List<DatasourceDto> _datasourceList;
        
        private string _email;
        
        private string _firstName;
        
        private string _fullName;
        
        private int _highestRole;
        
        private bool _isActive;
        
        private bool _isExistingUser;
        
        private string _lastName;
        
        private string _passwordHash;
        
        private string _phone;
        
        private bool _shouldResetPassword;
        
        private Guid _tempId;
        
        private UserEditType _userEditType;
        
        private int _userID;
        
        private string _userName;
        
        private string _userRoleInOrganization;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDatasourceCountChanging(int value);
        partial void OnDatasourceCountChanged();
        partial void OnDatasourceListChanging(List<DatasourceDto> value);
        partial void OnDatasourceListChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnHighestRoleChanging(int value);
        partial void OnHighestRoleChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnIsExistingUserChanging(bool value);
        partial void OnIsExistingUserChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnPasswordHashChanging(string value);
        partial void OnPasswordHashChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnShouldResetPasswordChanging(bool value);
        partial void OnShouldResetPasswordChanged();
        partial void OnTempIdChanging(Guid value);
        partial void OnTempIdChanged();
        partial void OnUserEditTypeChanging(UserEditType value);
        partial void OnUserEditTypeChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserRoleInOrganizationChanging(string value);
        partial void OnUserRoleInOrganizationChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDTO"/> class.
        /// </summary>
        public UserDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceCount' value.
        /// </summary>
        [DataMember()]
        public int DatasourceCount
        {
            get
            {
                return this._datasourceCount;
            }
            set
            {
                if ((this._datasourceCount != value))
                {
                    this.OnDatasourceCountChanging(value);
                    this.RaiseDataMemberChanging("DatasourceCount");
                    this.ValidateProperty("DatasourceCount", value);
                    this._datasourceCount = value;
                    this.RaiseDataMemberChanged("DatasourceCount");
                    this.OnDatasourceCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DatasourceDto> DatasourceList
        {
            get
            {
                return this._datasourceList;
            }
            set
            {
                if ((this._datasourceList != value))
                {
                    this.OnDatasourceListChanging(value);
                    this.RaiseDataMemberChanging("DatasourceList");
                    this.ValidateProperty("DatasourceList", value);
                    this._datasourceList = value;
                    this.RaiseDataMemberChanged("DatasourceList");
                    this.OnDatasourceListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaisePropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HighestRole' value.
        /// </summary>
        [DataMember()]
        public int HighestRole
        {
            get
            {
                return this._highestRole;
            }
            set
            {
                if ((this._highestRole != value))
                {
                    this.OnHighestRoleChanging(value);
                    this.RaiseDataMemberChanging("HighestRole");
                    this.ValidateProperty("HighestRole", value);
                    this._highestRole = value;
                    this.RaiseDataMemberChanged("HighestRole");
                    this.OnHighestRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsExistingUser' value.
        /// </summary>
        [DataMember()]
        public bool IsExistingUser
        {
            get
            {
                return this._isExistingUser;
            }
            set
            {
                if ((this._isExistingUser != value))
                {
                    this.OnIsExistingUserChanging(value);
                    this.RaiseDataMemberChanging("IsExistingUser");
                    this.ValidateProperty("IsExistingUser", value);
                    this._isExistingUser = value;
                    this.RaiseDataMemberChanged("IsExistingUser");
                    this.OnIsExistingUserChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordHash' value.
        /// </summary>
        [DataMember()]
        public string PasswordHash
        {
            get
            {
                return this._passwordHash;
            }
            set
            {
                if ((this._passwordHash != value))
                {
                    this.OnPasswordHashChanging(value);
                    this.RaiseDataMemberChanging("PasswordHash");
                    this.ValidateProperty("PasswordHash", value);
                    this._passwordHash = value;
                    this.RaiseDataMemberChanged("PasswordHash");
                    this.OnPasswordHashChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShouldResetPassword' value.
        /// </summary>
        [DataMember()]
        public bool ShouldResetPassword
        {
            get
            {
                return this._shouldResetPassword;
            }
            set
            {
                if ((this._shouldResetPassword != value))
                {
                    this.OnShouldResetPasswordChanging(value);
                    this.RaiseDataMemberChanging("ShouldResetPassword");
                    this.ValidateProperty("ShouldResetPassword", value);
                    this._shouldResetPassword = value;
                    this.RaiseDataMemberChanged("ShouldResetPassword");
                    this.OnShouldResetPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TempId' value.
        /// </summary>
        [DataMember()]
        public Guid TempId
        {
            get
            {
                return this._tempId;
            }
            set
            {
                if ((this._tempId != value))
                {
                    this.OnTempIdChanging(value);
                    this.RaiseDataMemberChanging("TempId");
                    this.ValidateProperty("TempId", value);
                    this._tempId = value;
                    this.RaiseDataMemberChanged("TempId");
                    this.OnTempIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserEditType' value.
        /// </summary>
        [DataMember()]
        public UserEditType UserEditType
        {
            get
            {
                return this._userEditType;
            }
            set
            {
                if ((this._userEditType != value))
                {
                    this.OnUserEditTypeChanging(value);
                    this.RaiseDataMemberChanging("UserEditType");
                    this.ValidateProperty("UserEditType", value);
                    this._userEditType = value;
                    this.RaiseDataMemberChanged("UserEditType");
                    this.OnUserEditTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public int UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserRoleInOrganization' value.
        /// </summary>
        [DataMember()]
        public string UserRoleInOrganization
        {
            get
            {
                return this._userRoleInOrganization;
            }
            set
            {
                if ((this._userRoleInOrganization != value))
                {
                    this.OnUserRoleInOrganizationChanging(value);
                    this.RaiseDataMemberChanging("UserRoleInOrganization");
                    this.ValidateProperty("UserRoleInOrganization", value);
                    this._userRoleInOrganization = value;
                    this.RaiseDataMemberChanged("UserRoleInOrganization");
                    this.OnUserRoleInOrganizationChanged();
                }
            }
        }
    }
    
    public enum UserEditType
    {
        
        EditingPassword = 0,
        
        EditingUserInfo = 1,
    }
    
    /// <summary>
    /// The 'UserOrganizationDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.DTO")]
    public sealed partial class UserOrganizationDto : ComplexObject
    {
        
        private bool _active;
        
        private OrganizationDto _organization;
        
        private int _roleId;
        
        private string _roleText;
        
        private UserDTO _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnOrganizationChanging(OrganizationDto value);
        partial void OnOrganizationChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnRoleTextChanging(string value);
        partial void OnRoleTextChanged();
        partial void OnUserChanging(UserDTO value);
        partial void OnUserChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserOrganizationDto"/> class.
        /// </summary>
        public UserOrganizationDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Organization' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public OrganizationDto Organization
        {
            get
            {
                return this._organization;
            }
            set
            {
                if ((this._organization != value))
                {
                    this.OnOrganizationChanging(value);
                    this.RaiseDataMemberChanging("Organization");
                    this.ValidateProperty("Organization", value);
                    this._organization = value;
                    this.RaiseDataMemberChanged("Organization");
                    this.OnOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleId' value.
        /// </summary>
        [DataMember()]
        public int RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleText' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string RoleText
        {
            get
            {
                return this._roleText;
            }
            set
            {
                if ((this._roleText != value))
                {
                    this.OnRoleTextChanging(value);
                    this.ValidateProperty("RoleText", value);
                    this._roleText = value;
                    this.RaisePropertyChanged("RoleText");
                    this.OnRoleTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public UserDTO User
        {
            get
            {
                return this._user;
            }
            set
            {
                if ((this._user != value))
                {
                    this.OnUserChanging(value);
                    this.RaiseDataMemberChanging("User");
                    this.ValidateProperty("User", value);
                    this._user = value;
                    this.RaiseDataMemberChanged("User");
                    this.OnUserChanged();
                }
            }
        }
    }
}
namespace EWAV.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV.Web.Services;
    
    
    /// <summary>
    /// The 'Class1' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web")]
    public sealed partial class Class1 : ComplexObject
    {
        
        private List<EWAVDataFilterCondition> _dfc;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDfcChanging(List<EWAVDataFilterCondition> value);
        partial void OnDfcChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Class1"/> class.
        /// </summary>
        public Class1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Dfc' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVDataFilterCondition> Dfc
        {
            get
            {
                return this._dfc;
            }
            set
            {
                if ((this._dfc != value))
                {
                    this.OnDfcChanging(value);
                    this.RaiseDataMemberChanging("Dfc");
                    this.ValidateProperty("Dfc", value);
                    this._dfc = value;
                    this.RaiseDataMemberChanged("Dfc");
                    this.OnDfcChanged();
                }
            }
        }
    }
}
namespace EWAV.Web.EpiDashboard
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV.BAL;
    using EWAV.Web.Services;
    
    
    [Flags()]
    public enum ColumnDataType
    {
        
        None = 0,
        
        Text = 1,
        
        Numeric = 2,
        
        Boolean = 4,
        
        DateTime = 8,
        
        UserDefined = 16,
        
        GroupVariable = 32,
    }
    
    public enum CombineModeTypes
    {
        
        Automatic = 0,
        
        Categorical = 1,
        
        Boolean = 2,
    }
    
    /// <summary>
    /// The 'DescriptiveStatistics' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.EpiDashboard")]
    public sealed partial class DescriptiveStatistics : ComplexObject
    {
        
        private Nullable<double> _anovaPValue;
        
        private Nullable<double> _bartlettPValue;
        
        private Nullable<double> _chiSquare;
        
        private string _crosstabValue;
        
        private Nullable<double> _dfBetween;
        
        private Nullable<double> _dfWithin;
        
        private string _errorMessage;
        
        private long _filteredObservations;
        
        private Nullable<double> _fStatistic;
        
        private Nullable<double> _grandMean;
        
        private Nullable<double> _kruskalPValue;
        
        private Nullable<double> _kruskalWallisH;
        
        private string _mainVariable;
        
        private Nullable<double> _max;
        
        private Nullable<double> _mean;
        
        private Nullable<double> _median;
        
        private Nullable<double> _min;
        
        private Nullable<double> _mode;
        
        private Nullable<double> _msBetween;
        
        private Nullable<double> _msWithin;
        
        private double _observations;
        
        private Nullable<double> _q1;
        
        private Nullable<double> _q3;
        
        private Nullable<double> _ssBetween;
        
        private Nullable<double> _ssWithin;
        
        private Nullable<double> _stdDev;
        
        private Nullable<double> _sum;
        
        private Nullable<double> _variance;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnovaPValueChanging(Nullable<double> value);
        partial void OnAnovaPValueChanged();
        partial void OnBartlettPValueChanging(Nullable<double> value);
        partial void OnBartlettPValueChanged();
        partial void OnChiSquareChanging(Nullable<double> value);
        partial void OnChiSquareChanged();
        partial void OnCrosstabValueChanging(string value);
        partial void OnCrosstabValueChanged();
        partial void OnDfBetweenChanging(Nullable<double> value);
        partial void OnDfBetweenChanged();
        partial void OnDfWithinChanging(Nullable<double> value);
        partial void OnDfWithinChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnFilteredObservationsChanging(long value);
        partial void OnFilteredObservationsChanged();
        partial void OnFStatisticChanging(Nullable<double> value);
        partial void OnFStatisticChanged();
        partial void OnGrandMeanChanging(Nullable<double> value);
        partial void OnGrandMeanChanged();
        partial void OnKruskalPValueChanging(Nullable<double> value);
        partial void OnKruskalPValueChanged();
        partial void OnKruskalWallisHChanging(Nullable<double> value);
        partial void OnKruskalWallisHChanged();
        partial void OnMainVariableChanging(string value);
        partial void OnMainVariableChanged();
        partial void OnMaxChanging(Nullable<double> value);
        partial void OnMaxChanged();
        partial void OnMeanChanging(Nullable<double> value);
        partial void OnMeanChanged();
        partial void OnMedianChanging(Nullable<double> value);
        partial void OnMedianChanged();
        partial void OnMinChanging(Nullable<double> value);
        partial void OnMinChanged();
        partial void OnModeChanging(Nullable<double> value);
        partial void OnModeChanged();
        partial void OnMsBetweenChanging(Nullable<double> value);
        partial void OnMsBetweenChanged();
        partial void OnMsWithinChanging(Nullable<double> value);
        partial void OnMsWithinChanged();
        partial void OnObservationsChanging(double value);
        partial void OnObservationsChanged();
        partial void OnQ1Changing(Nullable<double> value);
        partial void OnQ1Changed();
        partial void OnQ3Changing(Nullable<double> value);
        partial void OnQ3Changed();
        partial void OnSsBetweenChanging(Nullable<double> value);
        partial void OnSsBetweenChanged();
        partial void OnSsWithinChanging(Nullable<double> value);
        partial void OnSsWithinChanged();
        partial void OnStdDevChanging(Nullable<double> value);
        partial void OnStdDevChanged();
        partial void OnSumChanging(Nullable<double> value);
        partial void OnSumChanged();
        partial void OnVarianceChanging(Nullable<double> value);
        partial void OnVarianceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DescriptiveStatistics"/> class.
        /// </summary>
        public DescriptiveStatistics()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AnovaPValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> AnovaPValue
        {
            get
            {
                return this._anovaPValue;
            }
            set
            {
                if ((this._anovaPValue != value))
                {
                    this.OnAnovaPValueChanging(value);
                    this.RaiseDataMemberChanging("AnovaPValue");
                    this.ValidateProperty("AnovaPValue", value);
                    this._anovaPValue = value;
                    this.RaiseDataMemberChanged("AnovaPValue");
                    this.OnAnovaPValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BartlettPValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> BartlettPValue
        {
            get
            {
                return this._bartlettPValue;
            }
            set
            {
                if ((this._bartlettPValue != value))
                {
                    this.OnBartlettPValueChanging(value);
                    this.RaiseDataMemberChanging("BartlettPValue");
                    this.ValidateProperty("BartlettPValue", value);
                    this._bartlettPValue = value;
                    this.RaiseDataMemberChanged("BartlettPValue");
                    this.OnBartlettPValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquare' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquare
        {
            get
            {
                return this._chiSquare;
            }
            set
            {
                if ((this._chiSquare != value))
                {
                    this.OnChiSquareChanging(value);
                    this.RaiseDataMemberChanging("ChiSquare");
                    this.ValidateProperty("ChiSquare", value);
                    this._chiSquare = value;
                    this.RaiseDataMemberChanged("ChiSquare");
                    this.OnChiSquareChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CrosstabValue' value.
        /// </summary>
        [DataMember()]
        public string CrosstabValue
        {
            get
            {
                return this._crosstabValue;
            }
            set
            {
                if ((this._crosstabValue != value))
                {
                    this.OnCrosstabValueChanging(value);
                    this.RaiseDataMemberChanging("CrosstabValue");
                    this.ValidateProperty("CrosstabValue", value);
                    this._crosstabValue = value;
                    this.RaiseDataMemberChanged("CrosstabValue");
                    this.OnCrosstabValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DfBetween' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> DfBetween
        {
            get
            {
                return this._dfBetween;
            }
            set
            {
                if ((this._dfBetween != value))
                {
                    this.OnDfBetweenChanging(value);
                    this.RaiseDataMemberChanging("DfBetween");
                    this.ValidateProperty("DfBetween", value);
                    this._dfBetween = value;
                    this.RaiseDataMemberChanged("DfBetween");
                    this.OnDfBetweenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DfWithin' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> DfWithin
        {
            get
            {
                return this._dfWithin;
            }
            set
            {
                if ((this._dfWithin != value))
                {
                    this.OnDfWithinChanging(value);
                    this.RaiseDataMemberChanging("DfWithin");
                    this.ValidateProperty("DfWithin", value);
                    this._dfWithin = value;
                    this.RaiseDataMemberChanged("DfWithin");
                    this.OnDfWithinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilteredObservations' value.
        /// </summary>
        [DataMember()]
        public long FilteredObservations
        {
            get
            {
                return this._filteredObservations;
            }
            set
            {
                if ((this._filteredObservations != value))
                {
                    this.OnFilteredObservationsChanging(value);
                    this.RaiseDataMemberChanging("FilteredObservations");
                    this.ValidateProperty("FilteredObservations", value);
                    this._filteredObservations = value;
                    this.RaiseDataMemberChanged("FilteredObservations");
                    this.OnFilteredObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FStatistic' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> FStatistic
        {
            get
            {
                return this._fStatistic;
            }
            set
            {
                if ((this._fStatistic != value))
                {
                    this.OnFStatisticChanging(value);
                    this.RaiseDataMemberChanging("FStatistic");
                    this.ValidateProperty("FStatistic", value);
                    this._fStatistic = value;
                    this.RaiseDataMemberChanged("FStatistic");
                    this.OnFStatisticChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GrandMean' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> GrandMean
        {
            get
            {
                return this._grandMean;
            }
            set
            {
                if ((this._grandMean != value))
                {
                    this.OnGrandMeanChanging(value);
                    this.RaiseDataMemberChanging("GrandMean");
                    this.ValidateProperty("GrandMean", value);
                    this._grandMean = value;
                    this.RaiseDataMemberChanged("GrandMean");
                    this.OnGrandMeanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KruskalPValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> KruskalPValue
        {
            get
            {
                return this._kruskalPValue;
            }
            set
            {
                if ((this._kruskalPValue != value))
                {
                    this.OnKruskalPValueChanging(value);
                    this.RaiseDataMemberChanging("KruskalPValue");
                    this.ValidateProperty("KruskalPValue", value);
                    this._kruskalPValue = value;
                    this.RaiseDataMemberChanged("KruskalPValue");
                    this.OnKruskalPValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KruskalWallisH' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> KruskalWallisH
        {
            get
            {
                return this._kruskalWallisH;
            }
            set
            {
                if ((this._kruskalWallisH != value))
                {
                    this.OnKruskalWallisHChanging(value);
                    this.RaiseDataMemberChanging("KruskalWallisH");
                    this.ValidateProperty("KruskalWallisH", value);
                    this._kruskalWallisH = value;
                    this.RaiseDataMemberChanged("KruskalWallisH");
                    this.OnKruskalWallisHChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MainVariable' value.
        /// </summary>
        [DataMember()]
        public string MainVariable
        {
            get
            {
                return this._mainVariable;
            }
            set
            {
                if ((this._mainVariable != value))
                {
                    this.OnMainVariableChanging(value);
                    this.RaiseDataMemberChanging("MainVariable");
                    this.ValidateProperty("MainVariable", value);
                    this._mainVariable = value;
                    this.RaiseDataMemberChanged("MainVariable");
                    this.OnMainVariableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Max' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Max
        {
            get
            {
                return this._max;
            }
            set
            {
                if ((this._max != value))
                {
                    this.OnMaxChanging(value);
                    this.RaiseDataMemberChanging("Max");
                    this.ValidateProperty("Max", value);
                    this._max = value;
                    this.RaiseDataMemberChanged("Max");
                    this.OnMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mean' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Mean
        {
            get
            {
                return this._mean;
            }
            set
            {
                if ((this._mean != value))
                {
                    this.OnMeanChanging(value);
                    this.RaiseDataMemberChanging("Mean");
                    this.ValidateProperty("Mean", value);
                    this._mean = value;
                    this.RaiseDataMemberChanged("Mean");
                    this.OnMeanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Median' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Median
        {
            get
            {
                return this._median;
            }
            set
            {
                if ((this._median != value))
                {
                    this.OnMedianChanging(value);
                    this.RaiseDataMemberChanging("Median");
                    this.ValidateProperty("Median", value);
                    this._median = value;
                    this.RaiseDataMemberChanged("Median");
                    this.OnMedianChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Min' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Min
        {
            get
            {
                return this._min;
            }
            set
            {
                if ((this._min != value))
                {
                    this.OnMinChanging(value);
                    this.RaiseDataMemberChanging("Min");
                    this.ValidateProperty("Min", value);
                    this._min = value;
                    this.RaiseDataMemberChanged("Min");
                    this.OnMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mode' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                if ((this._mode != value))
                {
                    this.OnModeChanging(value);
                    this.RaiseDataMemberChanging("Mode");
                    this.ValidateProperty("Mode", value);
                    this._mode = value;
                    this.RaiseDataMemberChanged("Mode");
                    this.OnModeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MsBetween' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> MsBetween
        {
            get
            {
                return this._msBetween;
            }
            set
            {
                if ((this._msBetween != value))
                {
                    this.OnMsBetweenChanging(value);
                    this.RaiseDataMemberChanging("MsBetween");
                    this.ValidateProperty("MsBetween", value);
                    this._msBetween = value;
                    this.RaiseDataMemberChanged("MsBetween");
                    this.OnMsBetweenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MsWithin' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> MsWithin
        {
            get
            {
                return this._msWithin;
            }
            set
            {
                if ((this._msWithin != value))
                {
                    this.OnMsWithinChanging(value);
                    this.RaiseDataMemberChanging("MsWithin");
                    this.ValidateProperty("MsWithin", value);
                    this._msWithin = value;
                    this.RaiseDataMemberChanged("MsWithin");
                    this.OnMsWithinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        [DataMember()]
        public double Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Q1' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Q1
        {
            get
            {
                return this._q1;
            }
            set
            {
                if ((this._q1 != value))
                {
                    this.OnQ1Changing(value);
                    this.RaiseDataMemberChanging("Q1");
                    this.ValidateProperty("Q1", value);
                    this._q1 = value;
                    this.RaiseDataMemberChanged("Q1");
                    this.OnQ1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Q3' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Q3
        {
            get
            {
                return this._q3;
            }
            set
            {
                if ((this._q3 != value))
                {
                    this.OnQ3Changing(value);
                    this.RaiseDataMemberChanging("Q3");
                    this.ValidateProperty("Q3", value);
                    this._q3 = value;
                    this.RaiseDataMemberChanged("Q3");
                    this.OnQ3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SsBetween' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> SsBetween
        {
            get
            {
                return this._ssBetween;
            }
            set
            {
                if ((this._ssBetween != value))
                {
                    this.OnSsBetweenChanging(value);
                    this.RaiseDataMemberChanging("SsBetween");
                    this.ValidateProperty("SsBetween", value);
                    this._ssBetween = value;
                    this.RaiseDataMemberChanged("SsBetween");
                    this.OnSsBetweenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SsWithin' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> SsWithin
        {
            get
            {
                return this._ssWithin;
            }
            set
            {
                if ((this._ssWithin != value))
                {
                    this.OnSsWithinChanging(value);
                    this.RaiseDataMemberChanging("SsWithin");
                    this.ValidateProperty("SsWithin", value);
                    this._ssWithin = value;
                    this.RaiseDataMemberChanged("SsWithin");
                    this.OnSsWithinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StdDev' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> StdDev
        {
            get
            {
                return this._stdDev;
            }
            set
            {
                if ((this._stdDev != value))
                {
                    this.OnStdDevChanging(value);
                    this.RaiseDataMemberChanging("StdDev");
                    this.ValidateProperty("StdDev", value);
                    this._stdDev = value;
                    this.RaiseDataMemberChanged("StdDev");
                    this.OnStdDevChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sum' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Sum
        {
            get
            {
                return this._sum;
            }
            set
            {
                if ((this._sum != value))
                {
                    this.OnSumChanging(value);
                    this.RaiseDataMemberChanging("Sum");
                    this.ValidateProperty("Sum", value);
                    this._sum = value;
                    this.RaiseDataMemberChanged("Sum");
                    this.OnSumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Variance' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Variance
        {
            get
            {
                return this._variance;
            }
            set
            {
                if ((this._variance != value))
                {
                    this.OnVarianceChanging(value);
                    this.RaiseDataMemberChanging("Variance");
                    this.ValidateProperty("Variance", value);
                    this._variance = value;
                    this.RaiseDataMemberChanged("Variance");
                    this.OnVarianceChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVCombinedFrequencyGadgetParameters' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.EpiDashboard")]
    public sealed partial class EWAVCombinedFrequencyGadgetParameters : ComplexObject
    {
        
        private CombineModeTypes _combineMode;
        
        private bool _showDenominator;
        
        private bool _sortHighToLow;
        
        private string _trueValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCombineModeChanging(CombineModeTypes value);
        partial void OnCombineModeChanged();
        partial void OnShowDenominatorChanging(bool value);
        partial void OnShowDenominatorChanged();
        partial void OnSortHighToLowChanging(bool value);
        partial void OnSortHighToLowChanged();
        partial void OnTrueValueChanging(string value);
        partial void OnTrueValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVCombinedFrequencyGadgetParameters"/> class.
        /// </summary>
        public EWAVCombinedFrequencyGadgetParameters()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CombineMode' value.
        /// </summary>
        [DataMember()]
        public CombineModeTypes CombineMode
        {
            get
            {
                return this._combineMode;
            }
            set
            {
                if ((this._combineMode != value))
                {
                    this.OnCombineModeChanging(value);
                    this.RaiseDataMemberChanging("CombineMode");
                    this.ValidateProperty("CombineMode", value);
                    this._combineMode = value;
                    this.RaiseDataMemberChanged("CombineMode");
                    this.OnCombineModeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShowDenominator' value.
        /// </summary>
        [DataMember()]
        public bool ShowDenominator
        {
            get
            {
                return this._showDenominator;
            }
            set
            {
                if ((this._showDenominator != value))
                {
                    this.OnShowDenominatorChanging(value);
                    this.RaiseDataMemberChanging("ShowDenominator");
                    this.ValidateProperty("ShowDenominator", value);
                    this._showDenominator = value;
                    this.RaiseDataMemberChanged("ShowDenominator");
                    this.OnShowDenominatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortHighToLow' value.
        /// </summary>
        [DataMember()]
        public bool SortHighToLow
        {
            get
            {
                return this._sortHighToLow;
            }
            set
            {
                if ((this._sortHighToLow != value))
                {
                    this.OnSortHighToLowChanging(value);
                    this.RaiseDataMemberChanging("SortHighToLow");
                    this.ValidateProperty("SortHighToLow", value);
                    this._sortHighToLow = value;
                    this.RaiseDataMemberChanged("SortHighToLow");
                    this.OnSortHighToLowChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TrueValue' value.
        /// </summary>
        [DataMember()]
        public string TrueValue
        {
            get
            {
                return this._trueValue;
            }
            set
            {
                if ((this._trueValue != value))
                {
                    this.OnTrueValueChanging(value);
                    this.RaiseDataMemberChanging("TrueValue");
                    this.ValidateProperty("TrueValue", value);
                    this._trueValue = value;
                    this.RaiseDataMemberChanged("TrueValue");
                    this.OnTrueValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'GadgetParameters' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.EpiDashboard")]
    public sealed partial class GadgetParameters : ComplexObject
    {
        
        private string _advancedDataFilterText;
        
        private List<MyString> _columnNames;
        
        private string _crosstabVariableName;
        
        private string _customFilter;
        
        private string _customSortColumnName;
        
        private string _datasourceName;
        
        private string _errorMessage;
        
        private List<EWAVDataFilterCondition> _gadgetFilters;
        
        private Dictionary<string, string> _inputVariableList;
        
        private string _mainVariableName;
        
        private IEnumerable<string> _mainVariableNames;
        
        private List<EWAVColumn> _mapTipsColumnList;
        
        private bool _shouldIncludeFullSummaryStatistics;
        
        private bool _shouldIncludeMissing;
        
        private bool _shouldShowCommentLegalLabels;
        
        private bool _shouldSortHighToLow;
        
        private bool _shouldUseAllPossibleValues;
        
        private List<MyString> _strataVariableList;
        
        private IEnumerable<string> _strataVariableNames;
        
        private string _tableName;
        
        private bool _useAdvancedDataFilter;
        
        private string _weightVariableName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdvancedDataFilterTextChanging(string value);
        partial void OnAdvancedDataFilterTextChanged();
        partial void OnColumnNamesChanging(List<MyString> value);
        partial void OnColumnNamesChanged();
        partial void OnCrosstabVariableNameChanging(string value);
        partial void OnCrosstabVariableNameChanged();
        partial void OnCustomFilterChanging(string value);
        partial void OnCustomFilterChanged();
        partial void OnCustomSortColumnNameChanging(string value);
        partial void OnCustomSortColumnNameChanged();
        partial void OnDatasourceNameChanging(string value);
        partial void OnDatasourceNameChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnGadgetFiltersChanging(List<EWAVDataFilterCondition> value);
        partial void OnGadgetFiltersChanged();
        partial void OnInputVariableListChanging(Dictionary<string, string> value);
        partial void OnInputVariableListChanged();
        partial void OnMainVariableNameChanging(string value);
        partial void OnMainVariableNameChanged();
        partial void OnMainVariableNamesChanging(IEnumerable<string> value);
        partial void OnMainVariableNamesChanged();
        partial void OnMapTipsColumnListChanging(List<EWAVColumn> value);
        partial void OnMapTipsColumnListChanged();
        partial void OnShouldIncludeFullSummaryStatisticsChanging(bool value);
        partial void OnShouldIncludeFullSummaryStatisticsChanged();
        partial void OnShouldIncludeMissingChanging(bool value);
        partial void OnShouldIncludeMissingChanged();
        partial void OnShouldShowCommentLegalLabelsChanging(bool value);
        partial void OnShouldShowCommentLegalLabelsChanged();
        partial void OnShouldSortHighToLowChanging(bool value);
        partial void OnShouldSortHighToLowChanged();
        partial void OnShouldUseAllPossibleValuesChanging(bool value);
        partial void OnShouldUseAllPossibleValuesChanged();
        partial void OnStrataVariableListChanging(List<MyString> value);
        partial void OnStrataVariableListChanged();
        partial void OnStrataVariableNamesChanging(IEnumerable<string> value);
        partial void OnStrataVariableNamesChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnUseAdvancedDataFilterChanging(bool value);
        partial void OnUseAdvancedDataFilterChanged();
        partial void OnWeightVariableNameChanging(string value);
        partial void OnWeightVariableNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GadgetParameters"/> class.
        /// </summary>
        public GadgetParameters()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdvancedDataFilterText' value.
        /// </summary>
        [DataMember()]
        public string AdvancedDataFilterText
        {
            get
            {
                return this._advancedDataFilterText;
            }
            set
            {
                if ((this._advancedDataFilterText != value))
                {
                    this.OnAdvancedDataFilterTextChanging(value);
                    this.RaiseDataMemberChanging("AdvancedDataFilterText");
                    this.ValidateProperty("AdvancedDataFilterText", value);
                    this._advancedDataFilterText = value;
                    this.RaiseDataMemberChanged("AdvancedDataFilterText");
                    this.OnAdvancedDataFilterTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ColumnNames' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> ColumnNames
        {
            get
            {
                return this._columnNames;
            }
            set
            {
                if ((this._columnNames != value))
                {
                    this.OnColumnNamesChanging(value);
                    this.RaiseDataMemberChanging("ColumnNames");
                    this.ValidateProperty("ColumnNames", value);
                    this._columnNames = value;
                    this.RaiseDataMemberChanged("ColumnNames");
                    this.OnColumnNamesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CrosstabVariableName' value.
        /// </summary>
        [DataMember()]
        public string CrosstabVariableName
        {
            get
            {
                return this._crosstabVariableName;
            }
            set
            {
                if ((this._crosstabVariableName != value))
                {
                    this.OnCrosstabVariableNameChanging(value);
                    this.RaiseDataMemberChanging("CrosstabVariableName");
                    this.ValidateProperty("CrosstabVariableName", value);
                    this._crosstabVariableName = value;
                    this.RaiseDataMemberChanged("CrosstabVariableName");
                    this.OnCrosstabVariableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomFilter' value.
        /// </summary>
        [DataMember()]
        public string CustomFilter
        {
            get
            {
                return this._customFilter;
            }
            set
            {
                if ((this._customFilter != value))
                {
                    this.OnCustomFilterChanging(value);
                    this.RaiseDataMemberChanging("CustomFilter");
                    this.ValidateProperty("CustomFilter", value);
                    this._customFilter = value;
                    this.RaiseDataMemberChanged("CustomFilter");
                    this.OnCustomFilterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomSortColumnName' value.
        /// </summary>
        [DataMember()]
        public string CustomSortColumnName
        {
            get
            {
                return this._customSortColumnName;
            }
            set
            {
                if ((this._customSortColumnName != value))
                {
                    this.OnCustomSortColumnNameChanging(value);
                    this.RaiseDataMemberChanging("CustomSortColumnName");
                    this.ValidateProperty("CustomSortColumnName", value);
                    this._customSortColumnName = value;
                    this.RaiseDataMemberChanged("CustomSortColumnName");
                    this.OnCustomSortColumnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceName' value.
        /// </summary>
        [DataMember()]
        public string DatasourceName
        {
            get
            {
                return this._datasourceName;
            }
            set
            {
                if ((this._datasourceName != value))
                {
                    this.OnDatasourceNameChanging(value);
                    this.RaiseDataMemberChanging("DatasourceName");
                    this.ValidateProperty("DatasourceName", value);
                    this._datasourceName = value;
                    this.RaiseDataMemberChanged("DatasourceName");
                    this.OnDatasourceNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GadgetFilters' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVDataFilterCondition> GadgetFilters
        {
            get
            {
                return this._gadgetFilters;
            }
            set
            {
                if ((this._gadgetFilters != value))
                {
                    this.OnGadgetFiltersChanging(value);
                    this.RaiseDataMemberChanging("GadgetFilters");
                    this.ValidateProperty("GadgetFilters", value);
                    this._gadgetFilters = value;
                    this.RaiseDataMemberChanged("GadgetFilters");
                    this.OnGadgetFiltersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InputVariableList' value.
        /// </summary>
        [DataMember()]
        public Dictionary<string, string> InputVariableList
        {
            get
            {
                return this._inputVariableList;
            }
            set
            {
                if ((this._inputVariableList != value))
                {
                    this.OnInputVariableListChanging(value);
                    this.RaiseDataMemberChanging("InputVariableList");
                    this.ValidateProperty("InputVariableList", value);
                    this._inputVariableList = value;
                    this.RaiseDataMemberChanged("InputVariableList");
                    this.OnInputVariableListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MainVariableName' value.
        /// </summary>
        [DataMember()]
        public string MainVariableName
        {
            get
            {
                return this._mainVariableName;
            }
            set
            {
                if ((this._mainVariableName != value))
                {
                    this.OnMainVariableNameChanging(value);
                    this.RaiseDataMemberChanging("MainVariableName");
                    this.ValidateProperty("MainVariableName", value);
                    this._mainVariableName = value;
                    this.RaiseDataMemberChanged("MainVariableName");
                    this.OnMainVariableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MainVariableNames' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> MainVariableNames
        {
            get
            {
                return this._mainVariableNames;
            }
            set
            {
                if ((this._mainVariableNames != value))
                {
                    this.OnMainVariableNamesChanging(value);
                    this.RaiseDataMemberChanging("MainVariableNames");
                    this.ValidateProperty("MainVariableNames", value);
                    this._mainVariableNames = value;
                    this.RaiseDataMemberChanged("MainVariableNames");
                    this.OnMainVariableNamesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MapTipsColumnList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVColumn> MapTipsColumnList
        {
            get
            {
                return this._mapTipsColumnList;
            }
            set
            {
                if ((this._mapTipsColumnList != value))
                {
                    this.OnMapTipsColumnListChanging(value);
                    this.RaiseDataMemberChanging("MapTipsColumnList");
                    this.ValidateProperty("MapTipsColumnList", value);
                    this._mapTipsColumnList = value;
                    this.RaiseDataMemberChanged("MapTipsColumnList");
                    this.OnMapTipsColumnListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShouldIncludeFullSummaryStatistics' value.
        /// </summary>
        [DataMember()]
        public bool ShouldIncludeFullSummaryStatistics
        {
            get
            {
                return this._shouldIncludeFullSummaryStatistics;
            }
            set
            {
                if ((this._shouldIncludeFullSummaryStatistics != value))
                {
                    this.OnShouldIncludeFullSummaryStatisticsChanging(value);
                    this.RaiseDataMemberChanging("ShouldIncludeFullSummaryStatistics");
                    this.ValidateProperty("ShouldIncludeFullSummaryStatistics", value);
                    this._shouldIncludeFullSummaryStatistics = value;
                    this.RaiseDataMemberChanged("ShouldIncludeFullSummaryStatistics");
                    this.OnShouldIncludeFullSummaryStatisticsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShouldIncludeMissing' value.
        /// </summary>
        [DataMember()]
        public bool ShouldIncludeMissing
        {
            get
            {
                return this._shouldIncludeMissing;
            }
            set
            {
                if ((this._shouldIncludeMissing != value))
                {
                    this.OnShouldIncludeMissingChanging(value);
                    this.RaiseDataMemberChanging("ShouldIncludeMissing");
                    this.ValidateProperty("ShouldIncludeMissing", value);
                    this._shouldIncludeMissing = value;
                    this.RaiseDataMemberChanged("ShouldIncludeMissing");
                    this.OnShouldIncludeMissingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShouldShowCommentLegalLabels' value.
        /// </summary>
        [DataMember()]
        public bool ShouldShowCommentLegalLabels
        {
            get
            {
                return this._shouldShowCommentLegalLabels;
            }
            set
            {
                if ((this._shouldShowCommentLegalLabels != value))
                {
                    this.OnShouldShowCommentLegalLabelsChanging(value);
                    this.RaiseDataMemberChanging("ShouldShowCommentLegalLabels");
                    this.ValidateProperty("ShouldShowCommentLegalLabels", value);
                    this._shouldShowCommentLegalLabels = value;
                    this.RaiseDataMemberChanged("ShouldShowCommentLegalLabels");
                    this.OnShouldShowCommentLegalLabelsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShouldSortHighToLow' value.
        /// </summary>
        [DataMember()]
        public bool ShouldSortHighToLow
        {
            get
            {
                return this._shouldSortHighToLow;
            }
            set
            {
                if ((this._shouldSortHighToLow != value))
                {
                    this.OnShouldSortHighToLowChanging(value);
                    this.RaiseDataMemberChanging("ShouldSortHighToLow");
                    this.ValidateProperty("ShouldSortHighToLow", value);
                    this._shouldSortHighToLow = value;
                    this.RaiseDataMemberChanged("ShouldSortHighToLow");
                    this.OnShouldSortHighToLowChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShouldUseAllPossibleValues' value.
        /// </summary>
        [DataMember()]
        public bool ShouldUseAllPossibleValues
        {
            get
            {
                return this._shouldUseAllPossibleValues;
            }
            set
            {
                if ((this._shouldUseAllPossibleValues != value))
                {
                    this.OnShouldUseAllPossibleValuesChanging(value);
                    this.RaiseDataMemberChanging("ShouldUseAllPossibleValues");
                    this.ValidateProperty("ShouldUseAllPossibleValues", value);
                    this._shouldUseAllPossibleValues = value;
                    this.RaiseDataMemberChanged("ShouldUseAllPossibleValues");
                    this.OnShouldUseAllPossibleValuesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrataVariableList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> StrataVariableList
        {
            get
            {
                return this._strataVariableList;
            }
            set
            {
                if ((this._strataVariableList != value))
                {
                    this.OnStrataVariableListChanging(value);
                    this.RaiseDataMemberChanging("StrataVariableList");
                    this.ValidateProperty("StrataVariableList", value);
                    this._strataVariableList = value;
                    this.RaiseDataMemberChanged("StrataVariableList");
                    this.OnStrataVariableListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrataVariableNames' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> StrataVariableNames
        {
            get
            {
                return this._strataVariableNames;
            }
            set
            {
                if ((this._strataVariableNames != value))
                {
                    this.OnStrataVariableNamesChanging(value);
                    this.RaiseDataMemberChanging("StrataVariableNames");
                    this.ValidateProperty("StrataVariableNames", value);
                    this._strataVariableNames = value;
                    this.RaiseDataMemberChanged("StrataVariableNames");
                    this.OnStrataVariableNamesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UseAdvancedDataFilter' value.
        /// </summary>
        [DataMember()]
        public bool UseAdvancedDataFilter
        {
            get
            {
                return this._useAdvancedDataFilter;
            }
            set
            {
                if ((this._useAdvancedDataFilter != value))
                {
                    this.OnUseAdvancedDataFilterChanging(value);
                    this.RaiseDataMemberChanging("UseAdvancedDataFilter");
                    this.ValidateProperty("UseAdvancedDataFilter", value);
                    this._useAdvancedDataFilter = value;
                    this.RaiseDataMemberChanged("UseAdvancedDataFilter");
                    this.OnUseAdvancedDataFilterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeightVariableName' value.
        /// </summary>
        [DataMember()]
        public string WeightVariableName
        {
            get
            {
                return this._weightVariableName;
            }
            set
            {
                if ((this._weightVariableName != value))
                {
                    this.OnWeightVariableNameChanging(value);
                    this.RaiseDataMemberChanging("WeightVariableName");
                    this.ValidateProperty("WeightVariableName", value);
                    this._weightVariableName = value;
                    this.RaiseDataMemberChanged("WeightVariableName");
                    this.OnWeightVariableNameChanged();
                }
            }
        }
    }
}
namespace EWAV.Web.EpiDashboard.Rules
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    public enum DashboardVariableType
    {
        
        None = 0,
        
        YesNo = 1,
        
        Numeric = 2,
        
        Text = 3,
        
        Date = 4,
        
        Group = 5,
    }
    
    public enum FormatTypes
    {
        
        EpiWeek = 0,
        
        RegularDate = 1,
        
        Hours = 2,
        
        HoursMinutes = 3,
        
        HoursMinutesSeconds = 4,
        
        SortableDateTime = 5,
        
        MonthYear = 6,
        
        DayMonth = 7,
        
        RFC1123 = 8,
        
        Day = 9,
        
        ShortDayName = 10,
        
        FullDayName = 11,
        
        Month = 12,
        
        ShortMonthName = 13,
        
        FullMonthName = 14,
        
        TwoDigitYear = 15,
        
        FourDigitYear = 16,
        
        NumericInteger = 17,
        
        NumericDecimal1 = 18,
        
        NumericDecimal2 = 19,
        
        NumericDecimal3 = 20,
        
        NumericDecimal4 = 21,
        
        NumericDecimal5 = 22,
        
        MonthAndFourDigitYear = 23,
        
        LongDate = 24,
    }
    
    public enum SimpleAssignType
    {
        
        CheckboxesMarkedYes = 0,
        
        YesNoMarkedYes = 1,
        
        AllBooleanMarkedYes = 2,
        
        YearsElapsed = 3,
        
        MonthsElapsed = 4,
        
        DaysElapsed = 5,
        
        HoursElapsed = 6,
        
        MinutesElapsed = 7,
        
        TextToNumber = 8,
        
        TextToDate = 9,
        
        Substring = 10,
        
        StringLength = 11,
        
        FindText = 12,
        
        Round = 13,
        
        Uppercase = 14,
        
        Lowercase = 15,
        
        AddDays = 16,
        
        DetermineNonExistantListValues = 17,
        
        CountCheckedCheckboxesInGroup = 18,
        
        CountYesMarkedYesNoFieldsInGroup = 19,
        
        DetermineCheckboxesCheckedInGroup = 20,
        
        DetermineYesMarkedYesNoFieldsInGroup = 21,
        
        CountNumericFieldsBetweenValuesInGroup = 22,
        
        CountNumericFieldsOutsideValuesInGroup = 23,
        
        FindSumNumericFieldsInGroup = 24,
        
        FindMeanNumericFieldsInGroup = 25,
        
        FindMaxNumericFieldsInGroup = 26,
        
        FindMinNumericFieldsInGroup = 27,
        
        CountFieldsWithMissingInGroup = 28,
        
        CountFieldsWithoutMissingInGroup = 29,
        
        DetermineFieldsWithMissingInGroup = 30,
    }
}
namespace EWAV.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using EWAV;
    using EWAV.BAL;
    using EWAV.DTO;
    using EWAV.Web;
    using EWAV.Web.EpiDashboard;
    using EWAV.Web.EpiDashboard.Rules;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AberrationDomainService' DomainService.
    /// </summary>
    public sealed partial class AberrationDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AberrationDomainContext"/> class.
        /// </summary>
        public AberrationDomainContext() : 
                this(new WebDomainClient<IAberrationDomainServiceContract>(new Uri("EWAV-Web-Services-AberrationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AberrationDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AberrationDomainService service URI.</param>
        public AberrationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAberrationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AberrationDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AberrationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="AberrationDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<List<FrequencyResultData>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AberrationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AberrationDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAberrationDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateFrequencyTable' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/GenerateFrequencyTableDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/GenerateFrequencyTable", ReplyAction="http://tempuri.org/AberrationDomainService/GenerateFrequencyTableResponse")]
            IAsyncResult BeginGenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateFrequencyTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateFrequencyTable'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateFrequencyTable' operation.</returns>
            List<FrequencyResultData> EndGenerateFrequencyTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/GetColumns", ReplyAction="http://tempuri.org/AberrationDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/Getrule", ReplyAction="http://tempuri.org/AberrationDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient4' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/PortClassToClient4DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/PortClassToClient4", ReplyAction="http://tempuri.org/AberrationDomainService/PortClassToClient4Response")]
            IAsyncResult BeginPortClassToClient4(GadgetParameters gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient4'.</param>
            void EndPortClassToClient4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient7' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/PortClassToClient7DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/PortClassToClient7", ReplyAction="http://tempuri.org/AberrationDomainService/PortClassToClient7Response")]
            IAsyncResult BeginPortClassToClient7(EWAVFrequencyControlDto gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient7'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient7'.</param>
            void EndPortClassToClient7(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient77' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/PortClassToClient77DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/PortClassToClient77", ReplyAction="http://tempuri.org/AberrationDomainService/PortClassToClient77Response")]
            IAsyncResult BeginPortClassToClient77(EWAVColumn gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient77'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient77'.</param>
            void EndPortClassToClient77(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient777' operation.
            /// </summary>
            /// <param name="ds">The value for the 'ds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/PortClassToClient777DomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/PortClassToClient777", ReplyAction="http://tempuri.org/AberrationDomainService/PortClassToClient777Response")]
            IAsyncResult BeginPortClassToClient777(DescriptiveStatistics ds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient777'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient777'.</param>
            void EndPortClassToClient777(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient79' operation.
            /// </summary>
            /// <param name="aa">The value for the 'aa' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AberrationDomainService/PortClassToClient79DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AberrationDomainService/PortClassToClient79", ReplyAction="http://tempuri.org/AberrationDomainService/PortClassToClient79Response")]
            IAsyncResult BeginPortClassToClient79(EWAVConnectionString aa, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient79'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient79'.</param>
            void EndPortClassToClient79(IAsyncResult result);
        }
        
        internal sealed class AberrationDomainContextEntityContainer : EntityContainer
        {
            
            public AberrationDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'BinomialDomainService' DomainService.
    /// </summary>
    public sealed partial class BinomialDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BinomialDomainContext"/> class.
        /// </summary>
        public BinomialDomainContext() : 
                this(new WebDomainClient<IBinomialDomainServiceContract>(new Uri("EWAV-Web-Services-BinomialDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BinomialDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BinomialDomainService service URI.</param>
        public BinomialDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IBinomialDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BinomialDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BinomialDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateBinomial' method of the DomainService.
        /// </summary>
        /// <param name="txtNumerator">The value for the 'txtNumerator' parameter of this action.</param>
        /// <param name="txtObserved">The value for the 'txtObserved' parameter of this action.</param>
        /// <param name="txtExpected">The value for the 'txtExpected' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<BinomialStatCalcDTO> GenerateBinomial(string txtNumerator, string txtObserved, string txtExpected, Action<InvokeOperation<BinomialStatCalcDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("txtNumerator", txtNumerator);
            parameters.Add("txtObserved", txtObserved);
            parameters.Add("txtExpected", txtExpected);
            this.ValidateMethod("GenerateBinomial", parameters);
            return ((InvokeOperation<BinomialStatCalcDTO>)(this.InvokeOperation("GenerateBinomial", typeof(BinomialStatCalcDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateBinomial' method of the DomainService.
        /// </summary>
        /// <param name="txtNumerator">The value for the 'txtNumerator' parameter of this action.</param>
        /// <param name="txtObserved">The value for the 'txtObserved' parameter of this action.</param>
        /// <param name="txtExpected">The value for the 'txtExpected' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<BinomialStatCalcDTO> GenerateBinomial(string txtNumerator, string txtObserved, string txtExpected)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("txtNumerator", txtNumerator);
            parameters.Add("txtObserved", txtObserved);
            parameters.Add("txtExpected", txtExpected);
            this.ValidateMethod("GenerateBinomial", parameters);
            return ((InvokeOperation<BinomialStatCalcDTO>)(this.InvokeOperation("GenerateBinomial", typeof(BinomialStatCalcDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BinomialDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BinomialDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBinomialDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateBinomial' operation.
            /// </summary>
            /// <param name="txtNumerator">The value for the 'txtNumerator' parameter of this action.</param>
            /// <param name="txtObserved">The value for the 'txtObserved' parameter of this action.</param>
            /// <param name="txtExpected">The value for the 'txtExpected' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BinomialDomainService/GenerateBinomialDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BinomialDomainService/GenerateBinomial", ReplyAction="http://tempuri.org/BinomialDomainService/GenerateBinomialResponse")]
            IAsyncResult BeginGenerateBinomial(string txtNumerator, string txtObserved, string txtExpected, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateBinomial'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateBinomial'.</param>
            /// <returns>The 'BinomialStatCalcDTO' returned from the 'GenerateBinomial' operation.</returns>
            BinomialStatCalcDTO EndGenerateBinomial(IAsyncResult result);
        }
        
        internal sealed class BinomialDomainContextEntityContainer : EntityContainer
        {
            
            public BinomialDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'BinomialStatCalcDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class BinomialStatCalcDTO : ComplexObject
    {
        
        private string _equalTxt;
        
        private string _greaterThanEqualTxt;
        
        private string _greaterThanTxt;
        
        private string _lessThanEqualTxt;
        
        private string _lessThanTxt;
        
        private string _ninefiveCiTxt;
        
        private string _pValueTxt;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEqualTxtChanging(string value);
        partial void OnEqualTxtChanged();
        partial void OnGreaterThanEqualTxtChanging(string value);
        partial void OnGreaterThanEqualTxtChanged();
        partial void OnGreaterThanTxtChanging(string value);
        partial void OnGreaterThanTxtChanged();
        partial void OnLessThanEqualTxtChanging(string value);
        partial void OnLessThanEqualTxtChanged();
        partial void OnLessThanTxtChanging(string value);
        partial void OnLessThanTxtChanged();
        partial void OnNinefiveCiTxtChanging(string value);
        partial void OnNinefiveCiTxtChanged();
        partial void OnPValueTxtChanging(string value);
        partial void OnPValueTxtChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BinomialStatCalcDTO"/> class.
        /// </summary>
        public BinomialStatCalcDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EqualTxt' value.
        /// </summary>
        [DataMember()]
        public string EqualTxt
        {
            get
            {
                return this._equalTxt;
            }
            set
            {
                if ((this._equalTxt != value))
                {
                    this.OnEqualTxtChanging(value);
                    this.RaiseDataMemberChanging("EqualTxt");
                    this.ValidateProperty("EqualTxt", value);
                    this._equalTxt = value;
                    this.RaiseDataMemberChanged("EqualTxt");
                    this.OnEqualTxtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GreaterThanEqualTxt' value.
        /// </summary>
        [DataMember()]
        public string GreaterThanEqualTxt
        {
            get
            {
                return this._greaterThanEqualTxt;
            }
            set
            {
                if ((this._greaterThanEqualTxt != value))
                {
                    this.OnGreaterThanEqualTxtChanging(value);
                    this.RaiseDataMemberChanging("GreaterThanEqualTxt");
                    this.ValidateProperty("GreaterThanEqualTxt", value);
                    this._greaterThanEqualTxt = value;
                    this.RaiseDataMemberChanged("GreaterThanEqualTxt");
                    this.OnGreaterThanEqualTxtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GreaterThanTxt' value.
        /// </summary>
        [DataMember()]
        public string GreaterThanTxt
        {
            get
            {
                return this._greaterThanTxt;
            }
            set
            {
                if ((this._greaterThanTxt != value))
                {
                    this.OnGreaterThanTxtChanging(value);
                    this.RaiseDataMemberChanging("GreaterThanTxt");
                    this.ValidateProperty("GreaterThanTxt", value);
                    this._greaterThanTxt = value;
                    this.RaiseDataMemberChanged("GreaterThanTxt");
                    this.OnGreaterThanTxtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LessThanEqualTxt' value.
        /// </summary>
        [DataMember()]
        public string LessThanEqualTxt
        {
            get
            {
                return this._lessThanEqualTxt;
            }
            set
            {
                if ((this._lessThanEqualTxt != value))
                {
                    this.OnLessThanEqualTxtChanging(value);
                    this.RaiseDataMemberChanging("LessThanEqualTxt");
                    this.ValidateProperty("LessThanEqualTxt", value);
                    this._lessThanEqualTxt = value;
                    this.RaiseDataMemberChanged("LessThanEqualTxt");
                    this.OnLessThanEqualTxtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LessThanTxt' value.
        /// </summary>
        [DataMember()]
        public string LessThanTxt
        {
            get
            {
                return this._lessThanTxt;
            }
            set
            {
                if ((this._lessThanTxt != value))
                {
                    this.OnLessThanTxtChanging(value);
                    this.RaiseDataMemberChanging("LessThanTxt");
                    this.ValidateProperty("LessThanTxt", value);
                    this._lessThanTxt = value;
                    this.RaiseDataMemberChanged("LessThanTxt");
                    this.OnLessThanTxtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NinefiveCiTxt' value.
        /// </summary>
        [DataMember()]
        public string NinefiveCiTxt
        {
            get
            {
                return this._ninefiveCiTxt;
            }
            set
            {
                if ((this._ninefiveCiTxt != value))
                {
                    this.OnNinefiveCiTxtChanging(value);
                    this.RaiseDataMemberChanging("NinefiveCiTxt");
                    this.ValidateProperty("NinefiveCiTxt", value);
                    this._ninefiveCiTxt = value;
                    this.RaiseDataMemberChanged("NinefiveCiTxt");
                    this.OnNinefiveCiTxtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PValueTxt' value.
        /// </summary>
        [DataMember()]
        public string PValueTxt
        {
            get
            {
                return this._pValueTxt;
            }
            set
            {
                if ((this._pValueTxt != value))
                {
                    this.OnPValueTxtChanging(value);
                    this.RaiseDataMemberChanging("PValueTxt");
                    this.ValidateProperty("PValueTxt", value);
                    this._pValueTxt = value;
                    this.RaiseDataMemberChanged("PValueTxt");
                    this.OnPValueTxtChanged();
                }
            }
        }
    }
    
    public enum cbxFieldTypeEnum
    {
        
        YesNo = 0,
        
        Text = 1,
        
        Numeric = 2,
        
        None = 3,
    }
    
    /// <summary>
    /// The 'CrossTabResponseObjectDto' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class CrossTabResponseObjectDto : ComplexObject
    {
        
        private IEnumerable<string> _columnNames;
        
        private List<DescriptiveStatistics> _dsList;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnColumnNamesChanging(IEnumerable<string> value);
        partial void OnColumnNamesChanged();
        partial void OnDsListChanging(List<DescriptiveStatistics> value);
        partial void OnDsListChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossTabResponseObjectDto"/> class.
        /// </summary>
        public CrossTabResponseObjectDto()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ColumnNames' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> ColumnNames
        {
            get
            {
                return this._columnNames;
            }
            set
            {
                if ((this._columnNames != value))
                {
                    this.OnColumnNamesChanging(value);
                    this.RaiseDataMemberChanging("ColumnNames");
                    this.ValidateProperty("ColumnNames", value);
                    this._columnNames = value;
                    this.RaiseDataMemberChanged("ColumnNames");
                    this.OnColumnNamesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DsList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DescriptiveStatistics> DsList
        {
            get
            {
                return this._dsList;
            }
            set
            {
                if ((this._dsList != value))
                {
                    this.OnDsListChanging(value);
                    this.RaiseDataMemberChanging("DsList");
                    this.ValidateProperty("DsList", value);
                    this._dsList = value;
                    this.RaiseDataMemberChanged("DsList");
                    this.OnDsListChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'DatasourceDomainService' DomainService.
    /// </summary>
    public sealed partial class DatasourceDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourceDomainContext"/> class.
        /// </summary>
        public DatasourceDomainContext() : 
                this(new WebDomainClient<IDatasourceDomainServiceContract>(new Uri("EWAV-Web-Services-DatasourceDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourceDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DatasourceDomainService service URI.</param>
        public DatasourceDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IDatasourceDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourceDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DatasourceDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="DatasourceDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumnsForDatasource' method of the DomainService.
        /// </summary>
        /// <param name="datasourceName">The value for the 'datasourceName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumnsForDatasource(string datasourceName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("datasourceName", datasourceName);
            this.ValidateMethod("GetColumnsForDatasource", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumnsForDatasource", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumnsForDatasource' method of the DomainService.
        /// </summary>
        /// <param name="datasourceName">The value for the 'datasourceName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumnsForDatasource(string datasourceName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("datasourceName", datasourceName);
            this.ValidateMethod("GetColumnsForDatasource", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumnsForDatasource", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetDatasourcesAsIEnumerble2' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<EWAVDatasourceDto>> GetDatasourcesAsIEnumerble2(string userName, Action<InvokeOperation<IEnumerable<EWAVDatasourceDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetDatasourcesAsIEnumerble2", parameters);
            return ((InvokeOperation<IEnumerable<EWAVDatasourceDto>>)(this.InvokeOperation("GetDatasourcesAsIEnumerble2", typeof(IEnumerable<EWAVDatasourceDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetDatasourcesAsIEnumerble2' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<EWAVDatasourceDto>> GetDatasourcesAsIEnumerble2(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetDatasourcesAsIEnumerble2", parameters);
            return ((InvokeOperation<IEnumerable<EWAVDatasourceDto>>)(this.InvokeOperation("GetDatasourcesAsIEnumerble2", typeof(IEnumerable<EWAVDatasourceDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRecordCount' method of the DomainService.
        /// </summary>
        /// <param name="filterList">The value for the 'filterList' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
        /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetRecordCount(List<EWAVDataFilterCondition> filterList, List<EWAVRule_Base> rules, string tableName, string dsName, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filterList", filterList);
            parameters.Add("rules", rules);
            parameters.Add("tableName", tableName);
            parameters.Add("dsName", dsName);
            this.ValidateMethod("GetRecordCount", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetRecordCount", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRecordCount' method of the DomainService.
        /// </summary>
        /// <param name="filterList">The value for the 'filterList' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
        /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetRecordCount(List<EWAVDataFilterCondition> filterList, List<EWAVRule_Base> rules, string tableName, string dsName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filterList", filterList);
            parameters.Add("rules", rules);
            parameters.Add("tableName", tableName);
            parameters.Add("dsName", dsName);
            this.ValidateMethod("GetRecordCount", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetRecordCount", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRecordCountByString' method of the DomainService.
        /// </summary>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
        /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetRecordCountByString(List<EWAVRule_Base> rules, string s, string tableName, string dsName, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rules", rules);
            parameters.Add("s", s);
            parameters.Add("tableName", tableName);
            parameters.Add("dsName", dsName);
            this.ValidateMethod("GetRecordCountByString", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetRecordCountByString", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRecordCountByString' method of the DomainService.
        /// </summary>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="s">The value for the 's' parameter of this action.</param>
        /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
        /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetRecordCountByString(List<EWAVRule_Base> rules, string s, string tableName, string dsName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rules", rules);
            parameters.Add("s", s);
            parameters.Add("tableName", tableName);
            parameters.Add("dsName", dsName);
            this.ValidateMethod("GetRecordCountByString", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetRecordCountByString", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortToClient' method of the DomainService.
        /// </summary>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortToClient(EWAVRuleType d, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("d", d);
            this.ValidateMethod("PortToClient", parameters);
            return this.InvokeOperation("PortToClient", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortToClient' method of the DomainService.
        /// </summary>
        /// <param name="d">The value for the 'd' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortToClient(EWAVRuleType d)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("d", d);
            this.ValidateMethod("PortToClient", parameters);
            return this.InvokeOperation("PortToClient", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadFilterString' method of the DomainService.
        /// </summary>
        /// <param name="filterList">The value for the 'filterList' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
        /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReadFilterString(List<EWAVDataFilterCondition> filterList, List<EWAVRule_Base> rules, string tableName, string dsName, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filterList", filterList);
            parameters.Add("rules", rules);
            parameters.Add("tableName", tableName);
            parameters.Add("dsName", dsName);
            this.ValidateMethod("ReadFilterString", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ReadFilterString", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadFilterString' method of the DomainService.
        /// </summary>
        /// <param name="filterList">The value for the 'filterList' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
        /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReadFilterString(List<EWAVDataFilterCondition> filterList, List<EWAVRule_Base> rules, string tableName, string dsName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filterList", filterList);
            parameters.Add("rules", rules);
            parameters.Add("tableName", tableName);
            parameters.Add("dsName", dsName);
            this.ValidateMethod("ReadFilterString", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ReadFilterString", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DatasourceDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DatasourceDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDatasourceDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumnsForDatasource' operation.
            /// </summary>
            /// <param name="datasourceName">The value for the 'datasourceName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/GetColumnsForDatasourceDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/GetColumnsForDatasource", ReplyAction="http://tempuri.org/DatasourceDomainService/GetColumnsForDatasourceResponse")]
            IAsyncResult BeginGetColumnsForDatasource(string datasourceName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumnsForDatasource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumnsForDatasource'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumnsForDatasource' operation.</returns>
            List<EWAVColumn> EndGetColumnsForDatasource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDatasourcesAsIEnumerble2' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/GetDatasourcesAsIEnumerble2DomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/GetDatasourcesAsIEnumerble2", ReplyAction="http://tempuri.org/DatasourceDomainService/GetDatasourcesAsIEnumerble2Response")]
            IAsyncResult BeginGetDatasourcesAsIEnumerble2(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDatasourcesAsIEnumerble2'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDatasourcesAsIEnumerble2'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetDatasourcesAsIEnumerble2' operation.</returns>
            IEnumerable<EWAVDatasourceDto> EndGetDatasourcesAsIEnumerble2(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecordCount' operation.
            /// </summary>
            /// <param name="filterList">The value for the 'filterList' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
            /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/GetRecordCountDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/GetRecordCount", ReplyAction="http://tempuri.org/DatasourceDomainService/GetRecordCountResponse")]
            IAsyncResult BeginGetRecordCount(List<EWAVDataFilterCondition> filterList, List<EWAVRule_Base> rules, string tableName, string dsName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecordCount'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecordCount'.</param>
            /// <returns>The 'String' returned from the 'GetRecordCount' operation.</returns>
            string EndGetRecordCount(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecordCountByString' operation.
            /// </summary>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="s">The value for the 's' parameter of this action.</param>
            /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
            /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/GetRecordCountByStringDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/GetRecordCountByString", ReplyAction="http://tempuri.org/DatasourceDomainService/GetRecordCountByStringResponse")]
            IAsyncResult BeginGetRecordCountByString(List<EWAVRule_Base> rules, string s, string tableName, string dsName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecordCountByString'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecordCountByString'.</param>
            /// <returns>The 'String' returned from the 'GetRecordCountByString' operation.</returns>
            string EndGetRecordCountByString(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/Getrule", ReplyAction="http://tempuri.org/DatasourceDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortToClient' operation.
            /// </summary>
            /// <param name="d">The value for the 'd' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/PortToClientDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/PortToClient", ReplyAction="http://tempuri.org/DatasourceDomainService/PortToClientResponse")]
            IAsyncResult BeginPortToClient(EWAVRuleType d, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortToClient'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortToClient'.</param>
            void EndPortToClient(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadFilterString' operation.
            /// </summary>
            /// <param name="filterList">The value for the 'filterList' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="tableName">The value for the 'tableName' parameter of this action.</param>
            /// <param name="dsName">The value for the 'dsName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DatasourceDomainService/ReadFilterStringDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DatasourceDomainService/ReadFilterString", ReplyAction="http://tempuri.org/DatasourceDomainService/ReadFilterStringResponse")]
            IAsyncResult BeginReadFilterString(List<EWAVDataFilterCondition> filterList, List<EWAVRule_Base> rules, string tableName, string dsName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadFilterString'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadFilterString'.</param>
            /// <returns>The 'String' returned from the 'ReadFilterString' operation.</returns>
            string EndReadFilterString(IAsyncResult result);
        }
        
        internal sealed class DatasourceDomainContextEntityContainer : EntityContainer
        {
            
            public DatasourceDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'DatatableBag' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class DatatableBag : ComplexObject
    {
        
        private List<MyString> _columnNameList;
        
        private List<DescriptiveStatistics> _descriptiveStatisticsList;
        
        private string _exposure;
        
        private List<DictionaryDTO> _extraInfo;
        
        private FieldsList _fieldsList;
        
        private GridCells _gridCellData;
        
        private List<FieldsList> _recordList;
        
        private string _tableName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnColumnNameListChanging(List<MyString> value);
        partial void OnColumnNameListChanged();
        partial void OnDescriptiveStatisticsListChanging(List<DescriptiveStatistics> value);
        partial void OnDescriptiveStatisticsListChanged();
        partial void OnExposureChanging(string value);
        partial void OnExposureChanged();
        partial void OnExtraInfoChanging(List<DictionaryDTO> value);
        partial void OnExtraInfoChanged();
        partial void OnFieldsListChanging(FieldsList value);
        partial void OnFieldsListChanged();
        partial void OnGridCellDataChanging(GridCells value);
        partial void OnGridCellDataChanged();
        partial void OnRecordListChanging(List<FieldsList> value);
        partial void OnRecordListChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DatatableBag"/> class.
        /// </summary>
        public DatatableBag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ColumnNameList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
            set
            {
                if ((this._columnNameList != value))
                {
                    this.OnColumnNameListChanging(value);
                    this.RaiseDataMemberChanging("ColumnNameList");
                    this.ValidateProperty("ColumnNameList", value);
                    this._columnNameList = value;
                    this.RaiseDataMemberChanged("ColumnNameList");
                    this.OnColumnNameListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DescriptiveStatisticsList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DescriptiveStatistics> DescriptiveStatisticsList
        {
            get
            {
                return this._descriptiveStatisticsList;
            }
            set
            {
                if ((this._descriptiveStatisticsList != value))
                {
                    this.OnDescriptiveStatisticsListChanging(value);
                    this.RaiseDataMemberChanging("DescriptiveStatisticsList");
                    this.ValidateProperty("DescriptiveStatisticsList", value);
                    this._descriptiveStatisticsList = value;
                    this.RaiseDataMemberChanged("DescriptiveStatisticsList");
                    this.OnDescriptiveStatisticsListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Exposure' value.
        /// </summary>
        [DataMember()]
        public string Exposure
        {
            get
            {
                return this._exposure;
            }
            set
            {
                if ((this._exposure != value))
                {
                    this.OnExposureChanging(value);
                    this.RaiseDataMemberChanging("Exposure");
                    this.ValidateProperty("Exposure", value);
                    this._exposure = value;
                    this.RaiseDataMemberChanged("Exposure");
                    this.OnExposureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExtraInfo' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DictionaryDTO> ExtraInfo
        {
            get
            {
                return this._extraInfo;
            }
            set
            {
                if ((this._extraInfo != value))
                {
                    this.OnExtraInfoChanging(value);
                    this.RaiseDataMemberChanging("ExtraInfo");
                    this.ValidateProperty("ExtraInfo", value);
                    this._extraInfo = value;
                    this.RaiseDataMemberChanged("ExtraInfo");
                    this.OnExtraInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FieldsList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public FieldsList FieldsList
        {
            get
            {
                return this._fieldsList;
            }
            set
            {
                if ((this._fieldsList != value))
                {
                    this.OnFieldsListChanging(value);
                    this.RaiseDataMemberChanging("FieldsList");
                    this.ValidateProperty("FieldsList", value);
                    this._fieldsList = value;
                    this.RaiseDataMemberChanged("FieldsList");
                    this.OnFieldsListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GridCellData' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public GridCells GridCellData
        {
            get
            {
                return this._gridCellData;
            }
            set
            {
                if ((this._gridCellData != value))
                {
                    this.OnGridCellDataChanging(value);
                    this.RaiseDataMemberChanging("GridCellData");
                    this.ValidateProperty("GridCellData", value);
                    this._gridCellData = value;
                    this.RaiseDataMemberChanged("GridCellData");
                    this.OnGridCellDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<FieldsList> RecordList
        {
            get
            {
                return this._recordList;
            }
            set
            {
                if ((this._recordList != value))
                {
                    this.OnRecordListChanging(value);
                    this.RaiseDataMemberChanging("RecordList");
                    this.ValidateProperty("RecordList", value);
                    this._recordList = value;
                    this.RaiseDataMemberChanged("RecordList");
                    this.OnRecordListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'DiagnosticsDomainService' DomainService.
    /// </summary>
    public sealed partial class DiagnosticsDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticsDomainContext"/> class.
        /// </summary>
        public DiagnosticsDomainContext() : 
                this(new WebDomainClient<IDiagnosticsDomainServiceContract>(new Uri("EWAV-Web-Services-DiagnosticsDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticsDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DiagnosticsDomainService service URI.</param>
        public DiagnosticsDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IDiagnosticsDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticsDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DiagnosticsDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckAllDatasources' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> CheckAllDatasources(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("CheckAllDatasources", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("CheckAllDatasources", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckAllDatasources' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> CheckAllDatasources()
        {
            this.ValidateMethod("CheckAllDatasources", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("CheckAllDatasources", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckDatasource' method of the DomainService.
        /// </summary>
        /// <param name="datasourceName">The value for the 'datasourceName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Dictionary<string, bool>> CheckDatasource(string datasourceName, Action<InvokeOperation<Dictionary<string, bool>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("datasourceName", datasourceName);
            this.ValidateMethod("CheckDatasource", parameters);
            return ((InvokeOperation<Dictionary<string, bool>>)(this.InvokeOperation("CheckDatasource", typeof(Dictionary<string, bool>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckDatasource' method of the DomainService.
        /// </summary>
        /// <param name="datasourceName">The value for the 'datasourceName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Dictionary<string, bool>> CheckDatasource(string datasourceName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("datasourceName", datasourceName);
            this.ValidateMethod("CheckDatasource", parameters);
            return ((InvokeOperation<Dictionary<string, bool>>)(this.InvokeOperation("CheckDatasource", typeof(Dictionary<string, bool>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAllDatasourceNames' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetAllDatasourceNames(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("GetAllDatasourceNames", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetAllDatasourceNames", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAllDatasourceNames' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetAllDatasourceNames()
        {
            this.ValidateMethod("GetAllDatasourceNames", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetAllDatasourceNames", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ServiceEndpointCheck' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ServiceEndpointCheck(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("ServiceEndpointCheck", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ServiceEndpointCheck", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ServiceEndpointCheck' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ServiceEndpointCheck()
        {
            this.ValidateMethod("ServiceEndpointCheck", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ServiceEndpointCheck", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UserCheck' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UserCheck(string userName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("UserCheck", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UserCheck", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UserCheck' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UserCheck(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("UserCheck", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UserCheck", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DiagnosticsDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DiagnosticsDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDiagnosticsDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CheckAllDatasources' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DiagnosticsDomainService/CheckAllDatasourcesDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DiagnosticsDomainService/CheckAllDatasources", ReplyAction="http://tempuri.org/DiagnosticsDomainService/CheckAllDatasourcesResponse")]
            IAsyncResult BeginCheckAllDatasources(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckAllDatasources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckAllDatasources'.</param>
            /// <returns>The 'String' returned from the 'CheckAllDatasources' operation.</returns>
            string EndCheckAllDatasources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckDatasource' operation.
            /// </summary>
            /// <param name="datasourceName">The value for the 'datasourceName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DiagnosticsDomainService/CheckDatasourceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DiagnosticsDomainService/CheckDatasource", ReplyAction="http://tempuri.org/DiagnosticsDomainService/CheckDatasourceResponse")]
            IAsyncResult BeginCheckDatasource(string datasourceName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckDatasource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckDatasource'.</param>
            /// <returns>The 'Dictionary`2' returned from the 'CheckDatasource' operation.</returns>
            Dictionary<string, bool> EndCheckDatasource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllDatasourceNames' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DiagnosticsDomainService/GetAllDatasourceNamesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DiagnosticsDomainService/GetAllDatasourceNames", ReplyAction="http://tempuri.org/DiagnosticsDomainService/GetAllDatasourceNamesResponse")]
            IAsyncResult BeginGetAllDatasourceNames(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllDatasourceNames'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllDatasourceNames'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetAllDatasourceNames' operation.</returns>
            IEnumerable<string> EndGetAllDatasourceNames(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ServiceEndpointCheck' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DiagnosticsDomainService/ServiceEndpointCheckDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DiagnosticsDomainService/ServiceEndpointCheck", ReplyAction="http://tempuri.org/DiagnosticsDomainService/ServiceEndpointCheckResponse")]
            IAsyncResult BeginServiceEndpointCheck(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginServiceEndpointCheck'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginServiceEndpointCheck'.</param>
            /// <returns>The 'Boolean' returned from the 'ServiceEndpointCheck' operation.</returns>
            bool EndServiceEndpointCheck(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UserCheck' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DiagnosticsDomainService/UserCheckDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DiagnosticsDomainService/UserCheck", ReplyAction="http://tempuri.org/DiagnosticsDomainService/UserCheckResponse")]
            IAsyncResult BeginUserCheck(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUserCheck'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUserCheck'.</param>
            /// <returns>The 'Boolean' returned from the 'UserCheck' operation.</returns>
            bool EndUserCheck(IAsyncResult result);
        }
        
        internal sealed class DiagnosticsDomainContextEntityContainer : EntityContainer
        {
            
            public DiagnosticsDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'DictionaryDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class DictionaryDTO : ComplexObject
    {
        
        private MyString _key;
        
        private MyString _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnKeyChanging(MyString value);
        partial void OnKeyChanged();
        partial void OnValueChanging(MyString value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DictionaryDTO"/> class.
        /// </summary>
        public DictionaryDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.RaiseDataMemberChanging("Key");
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaiseDataMemberChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'EpiCurveDomainService' DomainService.
    /// </summary>
    public sealed partial class EpiCurveDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EpiCurveDomainContext"/> class.
        /// </summary>
        public EpiCurveDomainContext() : 
                this(new WebDomainClient<IEpiCurveDomainServiceContract>(new Uri("EWAV-Web-Services-EpiCurveDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EpiCurveDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The EpiCurveDomainService service URI.</param>
        public EpiCurveDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IEpiCurveDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EpiCurveDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public EpiCurveDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="EpiCurveDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetEpiCurveData' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="byEpiWeek">The value for the 'byEpiWeek' parameter of this action.</param>
        /// <param name="dateVar">The value for the 'dateVar' parameter of this action.</param>
        /// <param name="caseStatusVar">The value for the 'caseStatusVar' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> GetEpiCurveData(GadgetParameters gadgetParameters, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, bool byEpiWeek, string dateVar, string caseStatusVar, Action<InvokeOperation<DatatableBag>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            parameters.Add("byEpiWeek", byEpiWeek);
            parameters.Add("dateVar", dateVar);
            parameters.Add("caseStatusVar", caseStatusVar);
            this.ValidateMethod("GetEpiCurveData", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("GetEpiCurveData", typeof(DatatableBag), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetEpiCurveData' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="byEpiWeek">The value for the 'byEpiWeek' parameter of this action.</param>
        /// <param name="dateVar">The value for the 'dateVar' parameter of this action.</param>
        /// <param name="caseStatusVar">The value for the 'caseStatusVar' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> GetEpiCurveData(GadgetParameters gadgetParameters, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, bool byEpiWeek, string dateVar, string caseStatusVar)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            parameters.Add("byEpiWeek", byEpiWeek);
            parameters.Add("dateVar", dateVar);
            parameters.Add("caseStatusVar", caseStatusVar);
            this.ValidateMethod("GetEpiCurveData", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("GetEpiCurveData", typeof(DatatableBag), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new EpiCurveDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'EpiCurveDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IEpiCurveDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/GetColumns", ReplyAction="http://tempuri.org/EpiCurveDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEpiCurveData' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="byEpiWeek">The value for the 'byEpiWeek' parameter of this action.</param>
            /// <param name="dateVar">The value for the 'dateVar' parameter of this action.</param>
            /// <param name="caseStatusVar">The value for the 'caseStatusVar' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/GetEpiCurveDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/GetEpiCurveData", ReplyAction="http://tempuri.org/EpiCurveDomainService/GetEpiCurveDataResponse")]
            IAsyncResult BeginGetEpiCurveData(GadgetParameters gadgetParameters, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, bool byEpiWeek, string dateVar, string caseStatusVar, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEpiCurveData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEpiCurveData'.</param>
            /// <returns>The 'DatatableBag' returned from the 'GetEpiCurveData' operation.</returns>
            DatatableBag EndGetEpiCurveData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/Getrule", ReplyAction="http://tempuri.org/EpiCurveDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient4' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient4DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient4", ReplyAction="http://tempuri.org/EpiCurveDomainService/PortClassToClient4Response")]
            IAsyncResult BeginPortClassToClient4(GadgetParameters gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient4'.</param>
            void EndPortClassToClient4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient7' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient7DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient7", ReplyAction="http://tempuri.org/EpiCurveDomainService/PortClassToClient7Response")]
            IAsyncResult BeginPortClassToClient7(EWAVFrequencyControlDto gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient7'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient7'.</param>
            void EndPortClassToClient7(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient77' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient77DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient77", ReplyAction="http://tempuri.org/EpiCurveDomainService/PortClassToClient77Response")]
            IAsyncResult BeginPortClassToClient77(EWAVColumn gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient77'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient77'.</param>
            void EndPortClassToClient77(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient777' operation.
            /// </summary>
            /// <param name="ds">The value for the 'ds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient777DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient777", ReplyAction="http://tempuri.org/EpiCurveDomainService/PortClassToClient777Response")]
            IAsyncResult BeginPortClassToClient777(DescriptiveStatistics ds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient777'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient777'.</param>
            void EndPortClassToClient777(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient79' operation.
            /// </summary>
            /// <param name="aa">The value for the 'aa' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient79DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EpiCurveDomainService/PortClassToClient79", ReplyAction="http://tempuri.org/EpiCurveDomainService/PortClassToClient79Response")]
            IAsyncResult BeginPortClassToClient79(EWAVConnectionString aa, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient79'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient79'.</param>
            void EndPortClassToClient79(IAsyncResult result);
        }
        
        internal sealed class EpiCurveDomainContextEntityContainer : EntityContainer
        {
            
            public EpiCurveDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVConnectionString' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVConnectionString : ComplexObject
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVConnectionString"/> class.
        /// </summary>
        public EWAVConnectionString()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'EWAVDataFilterCondition' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVDataFilterCondition : ComplexObject
    {
        
        private MyString _fieldName;
        
        private MyString _friendHighValue;
        
        private MyString _friendLowValue;
        
        private MyString _friendlyOperand;
        
        private MyString _friendlyValue;
        
        private MyString _joinType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFieldNameChanging(MyString value);
        partial void OnFieldNameChanged();
        partial void OnFriendHighValueChanging(MyString value);
        partial void OnFriendHighValueChanged();
        partial void OnFriendLowValueChanging(MyString value);
        partial void OnFriendLowValueChanged();
        partial void OnFriendlyOperandChanging(MyString value);
        partial void OnFriendlyOperandChanged();
        partial void OnFriendlyValueChanging(MyString value);
        partial void OnFriendlyValueChanged();
        partial void OnJoinTypeChanging(MyString value);
        partial void OnJoinTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVDataFilterCondition"/> class.
        /// </summary>
        public EWAVDataFilterCondition()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FieldName' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString FieldName
        {
            get
            {
                return this._fieldName;
            }
            set
            {
                if ((this._fieldName != value))
                {
                    this.OnFieldNameChanging(value);
                    this.RaiseDataMemberChanging("FieldName");
                    this.ValidateProperty("FieldName", value);
                    this._fieldName = value;
                    this.RaiseDataMemberChanged("FieldName");
                    this.OnFieldNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendHighValue' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString FriendHighValue
        {
            get
            {
                return this._friendHighValue;
            }
            set
            {
                if ((this._friendHighValue != value))
                {
                    this.OnFriendHighValueChanging(value);
                    this.RaiseDataMemberChanging("FriendHighValue");
                    this.ValidateProperty("FriendHighValue", value);
                    this._friendHighValue = value;
                    this.RaiseDataMemberChanged("FriendHighValue");
                    this.OnFriendHighValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendLowValue' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString FriendLowValue
        {
            get
            {
                return this._friendLowValue;
            }
            set
            {
                if ((this._friendLowValue != value))
                {
                    this.OnFriendLowValueChanging(value);
                    this.RaiseDataMemberChanging("FriendLowValue");
                    this.ValidateProperty("FriendLowValue", value);
                    this._friendLowValue = value;
                    this.RaiseDataMemberChanged("FriendLowValue");
                    this.OnFriendLowValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyOperand' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString FriendlyOperand
        {
            get
            {
                return this._friendlyOperand;
            }
            set
            {
                if ((this._friendlyOperand != value))
                {
                    this.OnFriendlyOperandChanging(value);
                    this.RaiseDataMemberChanging("FriendlyOperand");
                    this.ValidateProperty("FriendlyOperand", value);
                    this._friendlyOperand = value;
                    this.RaiseDataMemberChanged("FriendlyOperand");
                    this.OnFriendlyOperandChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyValue' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString FriendlyValue
        {
            get
            {
                return this._friendlyValue;
            }
            set
            {
                if ((this._friendlyValue != value))
                {
                    this.OnFriendlyValueChanging(value);
                    this.RaiseDataMemberChanging("FriendlyValue");
                    this.ValidateProperty("FriendlyValue", value);
                    this._friendlyValue = value;
                    this.RaiseDataMemberChanged("FriendlyValue");
                    this.OnFriendlyValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JoinType' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString JoinType
        {
            get
            {
                return this._joinType;
            }
            set
            {
                if ((this._joinType != value))
                {
                    this.OnJoinTypeChanging(value);
                    this.RaiseDataMemberChanging("JoinType");
                    this.ValidateProperty("JoinType", value);
                    this._joinType = value;
                    this.RaiseDataMemberChanged("JoinType");
                    this.OnJoinTypeChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_Base' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    [KnownType(typeof(EWAVRule_ConditionalAssign))]
    [KnownType(typeof(EWAVRule_ExpressionAssign))]
    [KnownType(typeof(EWAVRule_Format))]
    [KnownType(typeof(EWAVRule_GroupVariable))]
    [KnownType(typeof(EWAVRule_Recode))]
    [KnownType(typeof(EWAVRule_SimpleAssignment))]
    public partial class EWAVRule_Base : Entity
    {
        
        private int _id;
        
        private string _varaiableDataType;
        
        private string _varaiableName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnVaraiableDataTypeChanging(string value);
        partial void OnVaraiableDataTypeChanged();
        partial void OnVaraiableNameChanging(string value);
        partial void OnVaraiableNameChanged();
        partial void OnPortClassToClient49491Invoking();
        partial void OnPortClassToClient49491Invoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_Base"/> class.
        /// </summary>
        public EWAVRule_Base()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'EWAV.Client'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VaraiableDataType' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'EWAV.Client'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public string VaraiableDataType
        {
            get
            {
                return this._varaiableDataType;
            }
            set
            {
                if ((this._varaiableDataType != value))
                {
                    this.OnVaraiableDataTypeChanging(value);
                    this.ValidateProperty("VaraiableDataType", value);
                    this._varaiableDataType = value;
                    this.RaisePropertyChanged("VaraiableDataType");
                    this.OnVaraiableDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VaraiableName' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'EWAV.Client'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public string VaraiableName
        {
            get
            {
                return this._varaiableName;
            }
            set
            {
                if ((this._varaiableName != value))
                {
                    this.OnVaraiableNameChanging(value);
                    this.ValidateProperty("VaraiableName", value);
                    this._varaiableName = value;
                    this.RaisePropertyChanged("VaraiableName");
                    this.OnVaraiableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient49491' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsPortClassToClient49491Invoked
        {
            get
            {
                return base.IsActionInvoked("PortClassToClient49491");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient49491' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanPortClassToClient49491
        {
            get
            {
                return base.CanInvokeAction("PortClassToClient49491");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._varaiableDataType == null) 
                        || (this._varaiableName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._id, this._varaiableDataType, this._varaiableName);
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient49491' action on this entity.
        /// </summary>
        public void PortClassToClient49491()
        {
            this.OnPortClassToClient49491Invoking();
            base.InvokeAction("PortClassToClient49491");
            this.OnPortClassToClient49491Invoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.UpdateActionState("PortClassToClient49491", "CanPortClassToClient49491", "IsPortClassToClient49491Invoked");
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_ConditionalAssign' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRule_ConditionalAssign : EWAVRule_Base
    {
        
        private string _assignValue;
        
        private cbxFieldTypeEnum _cbxFieldType;
        
        private List<EWAVDataFilterCondition> _conditionsList;
        
        private string _destinationColumnType;
        
        private string _elseValue;
        
        private MyString _friendlyRule;
        
        private string _txtDestination;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAssignValueChanging(string value);
        partial void OnAssignValueChanged();
        partial void OnCbxFieldTypeChanging(cbxFieldTypeEnum value);
        partial void OnCbxFieldTypeChanged();
        partial void OnConditionsListChanging(List<EWAVDataFilterCondition> value);
        partial void OnConditionsListChanged();
        partial void OnDestinationColumnTypeChanging(string value);
        partial void OnDestinationColumnTypeChanged();
        partial void OnElseValueChanging(string value);
        partial void OnElseValueChanged();
        partial void OnFriendlyRuleChanging(MyString value);
        partial void OnFriendlyRuleChanged();
        partial void OnTxtDestinationChanging(string value);
        partial void OnTxtDestinationChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_ConditionalAssign"/> class.
        /// </summary>
        public EWAVRule_ConditionalAssign()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AssignValue' value.
        /// </summary>
        [DataMember()]
        public string AssignValue
        {
            get
            {
                return this._assignValue;
            }
            set
            {
                if ((this._assignValue != value))
                {
                    this.OnAssignValueChanging(value);
                    this.RaiseDataMemberChanging("AssignValue");
                    this.ValidateProperty("AssignValue", value);
                    this._assignValue = value;
                    this.RaiseDataMemberChanged("AssignValue");
                    this.OnAssignValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CbxFieldType' value.
        /// </summary>
        [DataMember()]
        public cbxFieldTypeEnum CbxFieldType
        {
            get
            {
                return this._cbxFieldType;
            }
            set
            {
                if ((this._cbxFieldType != value))
                {
                    this.OnCbxFieldTypeChanging(value);
                    this.RaiseDataMemberChanging("CbxFieldType");
                    this.ValidateProperty("CbxFieldType", value);
                    this._cbxFieldType = value;
                    this.RaiseDataMemberChanged("CbxFieldType");
                    this.OnCbxFieldTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConditionsList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVDataFilterCondition> ConditionsList
        {
            get
            {
                return this._conditionsList;
            }
            set
            {
                if ((this._conditionsList != value))
                {
                    this.OnConditionsListChanging(value);
                    this.RaiseDataMemberChanging("ConditionsList");
                    this.ValidateProperty("ConditionsList", value);
                    this._conditionsList = value;
                    this.RaiseDataMemberChanged("ConditionsList");
                    this.OnConditionsListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DestinationColumnType' value.
        /// </summary>
        [DataMember()]
        public string DestinationColumnType
        {
            get
            {
                return this._destinationColumnType;
            }
            set
            {
                if ((this._destinationColumnType != value))
                {
                    this.OnDestinationColumnTypeChanging(value);
                    this.RaiseDataMemberChanging("DestinationColumnType");
                    this.ValidateProperty("DestinationColumnType", value);
                    this._destinationColumnType = value;
                    this.RaiseDataMemberChanged("DestinationColumnType");
                    this.OnDestinationColumnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ElseValue' value.
        /// </summary>
        [DataMember()]
        public string ElseValue
        {
            get
            {
                return this._elseValue;
            }
            set
            {
                if ((this._elseValue != value))
                {
                    this.OnElseValueChanging(value);
                    this.RaiseDataMemberChanging("ElseValue");
                    this.ValidateProperty("ElseValue", value);
                    this._elseValue = value;
                    this.RaiseDataMemberChanged("ElseValue");
                    this.OnElseValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyRule' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MyString FriendlyRule
        {
            get
            {
                return this._friendlyRule;
            }
            set
            {
                if ((this._friendlyRule != value))
                {
                    this.OnFriendlyRuleChanging(value);
                    this.RaiseDataMemberChanging("FriendlyRule");
                    this.ValidateProperty("FriendlyRule", value);
                    this._friendlyRule = value;
                    this.RaiseDataMemberChanged("FriendlyRule");
                    this.OnFriendlyRuleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TxtDestination' value.
        /// </summary>
        [DataMember()]
        public string TxtDestination
        {
            get
            {
                return this._txtDestination;
            }
            set
            {
                if ((this._txtDestination != value))
                {
                    this.OnTxtDestinationChanging(value);
                    this.RaiseDataMemberChanging("TxtDestination");
                    this.ValidateProperty("TxtDestination", value);
                    this._txtDestination = value;
                    this.RaiseDataMemberChanged("TxtDestination");
                    this.OnTxtDestinationChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_ExpressionAssign' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRule_ExpressionAssign : EWAVRule_Base
    {
        
        private string _dataType;
        
        private string _destinationColumnName;
        
        private string _expression;
        
        private string _friendlyRule;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataTypeChanging(string value);
        partial void OnDataTypeChanged();
        partial void OnDestinationColumnNameChanging(string value);
        partial void OnDestinationColumnNameChanged();
        partial void OnExpressionChanging(string value);
        partial void OnExpressionChanged();
        partial void OnFriendlyRuleChanging(string value);
        partial void OnFriendlyRuleChanged();
        partial void OnPortClassToClient494914Invoking();
        partial void OnPortClassToClient494914Invoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_ExpressionAssign"/> class.
        /// </summary>
        public EWAVRule_ExpressionAssign()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DataType' value.
        /// </summary>
        [DataMember()]
        public string DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                if ((this._dataType != value))
                {
                    this.OnDataTypeChanging(value);
                    this.RaiseDataMemberChanging("DataType");
                    this.ValidateProperty("DataType", value);
                    this._dataType = value;
                    this.RaiseDataMemberChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DestinationColumnName' value.
        /// </summary>
        [DataMember()]
        public string DestinationColumnName
        {
            get
            {
                return this._destinationColumnName;
            }
            set
            {
                if ((this._destinationColumnName != value))
                {
                    this.OnDestinationColumnNameChanging(value);
                    this.RaiseDataMemberChanging("DestinationColumnName");
                    this.ValidateProperty("DestinationColumnName", value);
                    this._destinationColumnName = value;
                    this.RaiseDataMemberChanged("DestinationColumnName");
                    this.OnDestinationColumnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Expression' value.
        /// </summary>
        [DataMember()]
        public string Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                if ((this._expression != value))
                {
                    this.OnExpressionChanging(value);
                    this.RaiseDataMemberChanging("Expression");
                    this.ValidateProperty("Expression", value);
                    this._expression = value;
                    this.RaiseDataMemberChanged("Expression");
                    this.OnExpressionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyRule' value.
        /// </summary>
        [DataMember()]
        public string FriendlyRule
        {
            get
            {
                return this._friendlyRule;
            }
            set
            {
                if ((this._friendlyRule != value))
                {
                    this.OnFriendlyRuleChanging(value);
                    this.RaiseDataMemberChanging("FriendlyRule");
                    this.ValidateProperty("FriendlyRule", value);
                    this._friendlyRule = value;
                    this.RaiseDataMemberChanged("FriendlyRule");
                    this.OnFriendlyRuleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient494914' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsPortClassToClient494914Invoked
        {
            get
            {
                return base.IsActionInvoked("PortClassToClient494914");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient494914' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanPortClassToClient494914
        {
            get
            {
                return base.CanInvokeAction("PortClassToClient494914");
            }
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient494914' action on this entity.
        /// </summary>
        public void PortClassToClient494914()
        {
            this.OnPortClassToClient494914Invoking();
            base.InvokeAction("PortClassToClient494914");
            this.OnPortClassToClient494914Invoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.OnActionStateChanged();
            base.UpdateActionState("PortClassToClient494914", "CanPortClassToClient494914", "IsPortClassToClient494914Invoked");
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_Format' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRule_Format : EWAVRule_Base
    {
        
        private string _cbxFieldName;
        
        private string _cbxFormatOptions;
        
        private FormatTypes _formatTypes;
        
        private string _friendlyLabel;
        
        private string _txtDestinationField;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCbxFieldNameChanging(string value);
        partial void OnCbxFieldNameChanged();
        partial void OnCbxFormatOptionsChanging(string value);
        partial void OnCbxFormatOptionsChanged();
        partial void OnFormatTypesChanging(FormatTypes value);
        partial void OnFormatTypesChanged();
        partial void OnFriendlyLabelChanging(string value);
        partial void OnFriendlyLabelChanged();
        partial void OnTxtDestinationFieldChanging(string value);
        partial void OnTxtDestinationFieldChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_Format"/> class.
        /// </summary>
        public EWAVRule_Format()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CbxFieldName' value.
        /// </summary>
        [DataMember()]
        public string CbxFieldName
        {
            get
            {
                return this._cbxFieldName;
            }
            set
            {
                if ((this._cbxFieldName != value))
                {
                    this.OnCbxFieldNameChanging(value);
                    this.RaiseDataMemberChanging("CbxFieldName");
                    this.ValidateProperty("CbxFieldName", value);
                    this._cbxFieldName = value;
                    this.RaiseDataMemberChanged("CbxFieldName");
                    this.OnCbxFieldNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CbxFormatOptions' value.
        /// </summary>
        [DataMember()]
        public string CbxFormatOptions
        {
            get
            {
                return this._cbxFormatOptions;
            }
            set
            {
                if ((this._cbxFormatOptions != value))
                {
                    this.OnCbxFormatOptionsChanging(value);
                    this.RaiseDataMemberChanging("CbxFormatOptions");
                    this.ValidateProperty("CbxFormatOptions", value);
                    this._cbxFormatOptions = value;
                    this.RaiseDataMemberChanged("CbxFormatOptions");
                    this.OnCbxFormatOptionsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FormatTypes' value.
        /// </summary>
        [DataMember()]
        public FormatTypes FormatTypes
        {
            get
            {
                return this._formatTypes;
            }
            set
            {
                if ((this._formatTypes != value))
                {
                    this.OnFormatTypesChanging(value);
                    this.RaiseDataMemberChanging("FormatTypes");
                    this.ValidateProperty("FormatTypes", value);
                    this._formatTypes = value;
                    this.RaiseDataMemberChanged("FormatTypes");
                    this.OnFormatTypesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyLabel' value.
        /// </summary>
        [DataMember()]
        public string FriendlyLabel
        {
            get
            {
                return this._friendlyLabel;
            }
            set
            {
                if ((this._friendlyLabel != value))
                {
                    this.OnFriendlyLabelChanging(value);
                    this.RaiseDataMemberChanging("FriendlyLabel");
                    this.ValidateProperty("FriendlyLabel", value);
                    this._friendlyLabel = value;
                    this.RaiseDataMemberChanged("FriendlyLabel");
                    this.OnFriendlyLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TxtDestinationField' value.
        /// </summary>
        [DataMember()]
        public string TxtDestinationField
        {
            get
            {
                return this._txtDestinationField;
            }
            set
            {
                if ((this._txtDestinationField != value))
                {
                    this.OnTxtDestinationFieldChanging(value);
                    this.RaiseDataMemberChanging("TxtDestinationField");
                    this.ValidateProperty("TxtDestinationField", value);
                    this._txtDestinationField = value;
                    this.RaiseDataMemberChanged("TxtDestinationField");
                    this.OnTxtDestinationFieldChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_GroupVariable' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRule_GroupVariable : EWAVRule_Base
    {
        
        private string _friendlyLabel;
        
        private string _groupName;
        
        private List<MyString> _items;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyLabelChanging(string value);
        partial void OnFriendlyLabelChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        partial void OnItemsChanging(List<MyString> value);
        partial void OnItemsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_GroupVariable"/> class.
        /// </summary>
        public EWAVRule_GroupVariable()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyLabel' value.
        /// </summary>
        [DataMember()]
        public string FriendlyLabel
        {
            get
            {
                return this._friendlyLabel;
            }
            set
            {
                if ((this._friendlyLabel != value))
                {
                    this.OnFriendlyLabelChanging(value);
                    this.RaiseDataMemberChanging("FriendlyLabel");
                    this.ValidateProperty("FriendlyLabel", value);
                    this._friendlyLabel = value;
                    this.RaiseDataMemberChanged("FriendlyLabel");
                    this.OnFriendlyLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupName' value.
        /// </summary>
        [DataMember()]
        public string GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                if ((this._groupName != value))
                {
                    this.OnGroupNameChanging(value);
                    this.RaiseDataMemberChanging("GroupName");
                    this.ValidateProperty("GroupName", value);
                    this._groupName = value;
                    this.RaiseDataMemberChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Items' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                if ((this._items != value))
                {
                    this.OnItemsChanging(value);
                    this.RaiseDataMemberChanging("Items");
                    this.ValidateProperty("Items", value);
                    this._items = value;
                    this.RaiseDataMemberChanged("Items");
                    this.OnItemsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_Recode' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRule_Recode : EWAVRule_Base
    {
        
        private bool _checkboxMaintainSortOrderIndicator;
        
        private bool _checkboxUseWildcardsIndicator;
        
        private DashboardVariableType _destinationFieldType;
        
        private string _friendlyrule;
        
        private List<EWAVRuleRecodeDataRow> _recodeTable;
        
        private string _sourceColumnName;
        
        private string _sourceColumnType;
        
        private string _txtDestinationField;
        
        private string _txtElseValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCheckboxMaintainSortOrderIndicatorChanging(bool value);
        partial void OnCheckboxMaintainSortOrderIndicatorChanged();
        partial void OnCheckboxUseWildcardsIndicatorChanging(bool value);
        partial void OnCheckboxUseWildcardsIndicatorChanged();
        partial void OnDestinationFieldTypeChanging(DashboardVariableType value);
        partial void OnDestinationFieldTypeChanged();
        partial void OnFriendlyruleChanging(string value);
        partial void OnFriendlyruleChanged();
        partial void OnRecodeTableChanging(List<EWAVRuleRecodeDataRow> value);
        partial void OnRecodeTableChanged();
        partial void OnSourceColumnNameChanging(string value);
        partial void OnSourceColumnNameChanged();
        partial void OnSourceColumnTypeChanging(string value);
        partial void OnSourceColumnTypeChanged();
        partial void OnTxtDestinationFieldChanging(string value);
        partial void OnTxtDestinationFieldChanged();
        partial void OnTxtElseValueChanging(string value);
        partial void OnTxtElseValueChanged();
        partial void OnPortClassToClient494911Invoking();
        partial void OnPortClassToClient494911Invoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_Recode"/> class.
        /// </summary>
        public EWAVRule_Recode()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CheckboxMaintainSortOrderIndicator' value.
        /// </summary>
        [DataMember()]
        public bool CheckboxMaintainSortOrderIndicator
        {
            get
            {
                return this._checkboxMaintainSortOrderIndicator;
            }
            set
            {
                if ((this._checkboxMaintainSortOrderIndicator != value))
                {
                    this.OnCheckboxMaintainSortOrderIndicatorChanging(value);
                    this.RaiseDataMemberChanging("CheckboxMaintainSortOrderIndicator");
                    this.ValidateProperty("CheckboxMaintainSortOrderIndicator", value);
                    this._checkboxMaintainSortOrderIndicator = value;
                    this.RaiseDataMemberChanged("CheckboxMaintainSortOrderIndicator");
                    this.OnCheckboxMaintainSortOrderIndicatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckboxUseWildcardsIndicator' value.
        /// </summary>
        [DataMember()]
        public bool CheckboxUseWildcardsIndicator
        {
            get
            {
                return this._checkboxUseWildcardsIndicator;
            }
            set
            {
                if ((this._checkboxUseWildcardsIndicator != value))
                {
                    this.OnCheckboxUseWildcardsIndicatorChanging(value);
                    this.RaiseDataMemberChanging("CheckboxUseWildcardsIndicator");
                    this.ValidateProperty("CheckboxUseWildcardsIndicator", value);
                    this._checkboxUseWildcardsIndicator = value;
                    this.RaiseDataMemberChanged("CheckboxUseWildcardsIndicator");
                    this.OnCheckboxUseWildcardsIndicatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DestinationFieldType' value.
        /// </summary>
        [DataMember()]
        public DashboardVariableType DestinationFieldType
        {
            get
            {
                return this._destinationFieldType;
            }
            set
            {
                if ((this._destinationFieldType != value))
                {
                    this.OnDestinationFieldTypeChanging(value);
                    this.RaiseDataMemberChanging("DestinationFieldType");
                    this.ValidateProperty("DestinationFieldType", value);
                    this._destinationFieldType = value;
                    this.RaiseDataMemberChanged("DestinationFieldType");
                    this.OnDestinationFieldTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Friendlyrule' value.
        /// </summary>
        [DataMember()]
        public string Friendlyrule
        {
            get
            {
                return this._friendlyrule;
            }
            set
            {
                if ((this._friendlyrule != value))
                {
                    this.OnFriendlyruleChanging(value);
                    this.RaiseDataMemberChanging("Friendlyrule");
                    this.ValidateProperty("Friendlyrule", value);
                    this._friendlyrule = value;
                    this.RaiseDataMemberChanged("Friendlyrule");
                    this.OnFriendlyruleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecodeTable' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVRuleRecodeDataRow> RecodeTable
        {
            get
            {
                return this._recodeTable;
            }
            set
            {
                if ((this._recodeTable != value))
                {
                    this.OnRecodeTableChanging(value);
                    this.RaiseDataMemberChanging("RecodeTable");
                    this.ValidateProperty("RecodeTable", value);
                    this._recodeTable = value;
                    this.RaiseDataMemberChanged("RecodeTable");
                    this.OnRecodeTableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SourceColumnName' value.
        /// </summary>
        [DataMember()]
        public string SourceColumnName
        {
            get
            {
                return this._sourceColumnName;
            }
            set
            {
                if ((this._sourceColumnName != value))
                {
                    this.OnSourceColumnNameChanging(value);
                    this.RaiseDataMemberChanging("SourceColumnName");
                    this.ValidateProperty("SourceColumnName", value);
                    this._sourceColumnName = value;
                    this.RaiseDataMemberChanged("SourceColumnName");
                    this.OnSourceColumnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SourceColumnType' value.
        /// </summary>
        [DataMember()]
        public string SourceColumnType
        {
            get
            {
                return this._sourceColumnType;
            }
            set
            {
                if ((this._sourceColumnType != value))
                {
                    this.OnSourceColumnTypeChanging(value);
                    this.RaiseDataMemberChanging("SourceColumnType");
                    this.ValidateProperty("SourceColumnType", value);
                    this._sourceColumnType = value;
                    this.RaiseDataMemberChanged("SourceColumnType");
                    this.OnSourceColumnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TxtDestinationField' value.
        /// </summary>
        [DataMember()]
        public string TxtDestinationField
        {
            get
            {
                return this._txtDestinationField;
            }
            set
            {
                if ((this._txtDestinationField != value))
                {
                    this.OnTxtDestinationFieldChanging(value);
                    this.RaiseDataMemberChanging("TxtDestinationField");
                    this.ValidateProperty("TxtDestinationField", value);
                    this._txtDestinationField = value;
                    this.RaiseDataMemberChanged("TxtDestinationField");
                    this.OnTxtDestinationFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TxtElseValue' value.
        /// </summary>
        [DataMember()]
        public string TxtElseValue
        {
            get
            {
                return this._txtElseValue;
            }
            set
            {
                if ((this._txtElseValue != value))
                {
                    this.OnTxtElseValueChanging(value);
                    this.RaiseDataMemberChanging("TxtElseValue");
                    this.ValidateProperty("TxtElseValue", value);
                    this._txtElseValue = value;
                    this.RaiseDataMemberChanged("TxtElseValue");
                    this.OnTxtElseValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient494911' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsPortClassToClient494911Invoked
        {
            get
            {
                return base.IsActionInvoked("PortClassToClient494911");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient494911' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanPortClassToClient494911
        {
            get
            {
                return base.CanInvokeAction("PortClassToClient494911");
            }
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient494911' action on this entity.
        /// </summary>
        public void PortClassToClient494911()
        {
            this.OnPortClassToClient494911Invoking();
            base.InvokeAction("PortClassToClient494911");
            this.OnPortClassToClient494911Invoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.OnActionStateChanged();
            base.UpdateActionState("PortClassToClient494911", "CanPortClassToClient494911", "IsPortClassToClient494911Invoked");
        }
    }
    
    /// <summary>
    /// The 'EWAVRule_SimpleAssignment' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AberrationDomainContext"/> context.
    /// The <see cref="LineListDomainContext"/> context.
    /// The <see cref="DatasourceDomainContext"/> context.
    /// The <see cref="EpiCurveDomainContext"/> context.
    /// The <see cref="FrequencyDomainContext"/> context.
    /// The <see cref="LinearRegressionDomainContext"/> context.
    /// The <see cref="LogisticRegressionDomainContext"/> context.
    /// The <see cref="MxNDomainContext"/> context.
    /// The <see cref="MeansDomainContext"/> context.
    /// The <see cref="ScatterDomainContext"/> context.
    /// The <see cref="TwoByTwoDomainContext"/> context.
    /// The <see cref="XYChartDomainContext"/> context.
    /// The <see cref="MapClusterDomainContext"/> context.
    /// The <see cref="CombinedFrequencyDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRule_SimpleAssignment : EWAVRule_Base
    {
        
        private SimpleAssignType _assignmentType;
        
        private string _friendlyLabel;
        
        private List<MyString> _parameters;
        
        private string _txtDestinationField;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAssignmentTypeChanging(SimpleAssignType value);
        partial void OnAssignmentTypeChanged();
        partial void OnFriendlyLabelChanging(string value);
        partial void OnFriendlyLabelChanged();
        partial void OnParametersChanging(List<MyString> value);
        partial void OnParametersChanged();
        partial void OnTxtDestinationFieldChanging(string value);
        partial void OnTxtDestinationFieldChanged();
        partial void OnPortClassToClient49491111Invoking();
        partial void OnPortClassToClient49491111Invoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRule_SimpleAssignment"/> class.
        /// </summary>
        public EWAVRule_SimpleAssignment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AssignmentType' value.
        /// </summary>
        [DataMember()]
        public SimpleAssignType AssignmentType
        {
            get
            {
                return this._assignmentType;
            }
            set
            {
                if ((this._assignmentType != value))
                {
                    this.OnAssignmentTypeChanging(value);
                    this.RaiseDataMemberChanging("AssignmentType");
                    this.ValidateProperty("AssignmentType", value);
                    this._assignmentType = value;
                    this.RaiseDataMemberChanged("AssignmentType");
                    this.OnAssignmentTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyLabel' value.
        /// </summary>
        [DataMember()]
        public string FriendlyLabel
        {
            get
            {
                return this._friendlyLabel;
            }
            set
            {
                if ((this._friendlyLabel != value))
                {
                    this.OnFriendlyLabelChanging(value);
                    this.RaiseDataMemberChanging("FriendlyLabel");
                    this.ValidateProperty("FriendlyLabel", value);
                    this._friendlyLabel = value;
                    this.RaiseDataMemberChanged("FriendlyLabel");
                    this.OnFriendlyLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Parameters' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                if ((this._parameters != value))
                {
                    this.OnParametersChanging(value);
                    this.RaiseDataMemberChanging("Parameters");
                    this.ValidateProperty("Parameters", value);
                    this._parameters = value;
                    this.RaiseDataMemberChanged("Parameters");
                    this.OnParametersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TxtDestinationField' value.
        /// </summary>
        [DataMember()]
        public string TxtDestinationField
        {
            get
            {
                return this._txtDestinationField;
            }
            set
            {
                if ((this._txtDestinationField != value))
                {
                    this.OnTxtDestinationFieldChanging(value);
                    this.RaiseDataMemberChanging("TxtDestinationField");
                    this.ValidateProperty("TxtDestinationField", value);
                    this._txtDestinationField = value;
                    this.RaiseDataMemberChanged("TxtDestinationField");
                    this.OnTxtDestinationFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient49491111' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsPortClassToClient49491111Invoked
        {
            get
            {
                return base.IsActionInvoked("PortClassToClient49491111");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'PortClassToClient49491111' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanPortClassToClient49491111
        {
            get
            {
                return base.CanInvokeAction("PortClassToClient49491111");
            }
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient49491111' action on this entity.
        /// </summary>
        public void PortClassToClient49491111()
        {
            this.OnPortClassToClient49491111Invoking();
            base.InvokeAction("PortClassToClient49491111");
            this.OnPortClassToClient49491111Invoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.OnActionStateChanged();
            base.UpdateActionState("PortClassToClient49491111", "CanPortClassToClient49491111", "IsPortClassToClient49491111Invoked");
        }
    }
    
    /// <summary>
    /// The 'EWAVRuleRecodeDataRow' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class EWAVRuleRecodeDataRow : ComplexObject
    {
        
        private string _col1;
        
        private string _col2;
        
        private string _col3;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncol1Changing(string value);
        partial void Oncol1Changed();
        partial void Oncol2Changing(string value);
        partial void Oncol2Changed();
        partial void Oncol3Changing(string value);
        partial void Oncol3Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EWAVRuleRecodeDataRow"/> class.
        /// </summary>
        public EWAVRuleRecodeDataRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'col1' value.
        /// </summary>
        [DataMember()]
        public string col1
        {
            get
            {
                return this._col1;
            }
            set
            {
                if ((this._col1 != value))
                {
                    this.Oncol1Changing(value);
                    this.RaiseDataMemberChanging("col1");
                    this.ValidateProperty("col1", value);
                    this._col1 = value;
                    this.RaiseDataMemberChanged("col1");
                    this.Oncol1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'col2' value.
        /// </summary>
        [DataMember()]
        public string col2
        {
            get
            {
                return this._col2;
            }
            set
            {
                if ((this._col2 != value))
                {
                    this.Oncol2Changing(value);
                    this.RaiseDataMemberChanging("col2");
                    this.ValidateProperty("col2", value);
                    this._col2 = value;
                    this.RaiseDataMemberChanged("col2");
                    this.Oncol2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'col3' value.
        /// </summary>
        [DataMember()]
        public string col3
        {
            get
            {
                return this._col3;
            }
            set
            {
                if ((this._col3 != value))
                {
                    this.Oncol3Changing(value);
                    this.RaiseDataMemberChanging("col3");
                    this.ValidateProperty("col3", value);
                    this._col3 = value;
                    this.RaiseDataMemberChanged("col3");
                    this.Oncol3Changed();
                }
            }
        }
    }
    
    public enum EWAVRuleType
    {
        
        Recode = 0,
        
        Assign = 1,
        
        Formatted = 2,
        
        Simple = 3,
        
        conditional = 4,
        
        GroupVariable = 5,
    }
    
    /// <summary>
    /// The 'FieldsList' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class FieldsList : ComplexObject
    {
        
        private List<MyString> _fields;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFieldsChanging(List<MyString> value);
        partial void OnFieldsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldsList"/> class.
        /// </summary>
        public FieldsList()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Fields' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> Fields
        {
            get
            {
                return this._fields;
            }
            set
            {
                if ((this._fields != value))
                {
                    this.OnFieldsChanging(value);
                    this.RaiseDataMemberChanging("Fields");
                    this.ValidateProperty("Fields", value);
                    this._fields = value;
                    this.RaiseDataMemberChanged("Fields");
                    this.OnFieldsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'FrequencyAndCrossTable' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class FrequencyAndCrossTable : ComplexObject
    {
        
        private List<CrossTabResponseObjectDto> _crossTable;
        
        private List<FrequencyResultData> _frequencyTable;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCrossTableChanging(List<CrossTabResponseObjectDto> value);
        partial void OnCrossTableChanged();
        partial void OnFrequencyTableChanging(List<FrequencyResultData> value);
        partial void OnFrequencyTableChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyAndCrossTable"/> class.
        /// </summary>
        public FrequencyAndCrossTable()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CrossTable' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<CrossTabResponseObjectDto> CrossTable
        {
            get
            {
                return this._crossTable;
            }
            set
            {
                if ((this._crossTable != value))
                {
                    this.OnCrossTableChanging(value);
                    this.RaiseDataMemberChanging("CrossTable");
                    this.ValidateProperty("CrossTable", value);
                    this._crossTable = value;
                    this.RaiseDataMemberChanged("CrossTable");
                    this.OnCrossTableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrequencyTable' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<FrequencyResultData> FrequencyTable
        {
            get
            {
                return this._frequencyTable;
            }
            set
            {
                if ((this._frequencyTable != value))
                {
                    this.OnFrequencyTableChanging(value);
                    this.RaiseDataMemberChanging("FrequencyTable");
                    this.ValidateProperty("FrequencyTable", value);
                    this._frequencyTable = value;
                    this.RaiseDataMemberChanged("FrequencyTable");
                    this.OnFrequencyTableChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FrequencyDomainService' DomainService.
    /// </summary>
    public sealed partial class FrequencyDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyDomainContext"/> class.
        /// </summary>
        public FrequencyDomainContext() : 
                this(new WebDomainClient<IFrequencyDomainServiceContract>(new Uri("EWAV-Web-Services-FrequencyDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FrequencyDomainService service URI.</param>
        public FrequencyDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IFrequencyDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FrequencyDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="FrequencyDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient49491' method of the specified <see cref="EWAVRule_Base"/> entity.
        /// </summary>
        /// <param name="gs">The <see cref="EWAVRule_Base"/> entity instance.</param>
        public void PortClassToClient49491(EWAVRule_Base gs)
        {
            gs.PortClassToClient49491();
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient494914' method of the specified <see cref="EWAVRule_ExpressionAssign"/> entity.
        /// </summary>
        /// <param name="xx">The <see cref="EWAVRule_ExpressionAssign"/> entity instance.</param>
        public void PortClassToClient494914(EWAVRule_ExpressionAssign xx)
        {
            xx.PortClassToClient494914();
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient494911' method of the specified <see cref="EWAVRule_Recode"/> entity.
        /// </summary>
        /// <param name="gs">The <see cref="EWAVRule_Recode"/> entity instance.</param>
        public void PortClassToClient494911(EWAVRule_Recode gs)
        {
            gs.PortClassToClient494911();
        }
        
        /// <summary>
        /// Invokes the 'PortClassToClient49491111' method of the specified <see cref="EWAVRule_SimpleAssignment"/> entity.
        /// </summary>
        /// <param name="gs">The <see cref="EWAVRule_SimpleAssignment"/> entity instance.</param>
        public void PortClassToClient49491111(EWAVRule_SimpleAssignment gs)
        {
            gs.PortClassToClient49491111();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<List<FrequencyResultData>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTestResults' method of the DomainService.
        /// </summary>
        /// <param name="intValue">The value for the 'intValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<int>> GenerateTestResults(int intValue, Action<InvokeOperation<IEnumerable<int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("intValue", intValue);
            this.ValidateMethod("GenerateTestResults", parameters);
            return ((InvokeOperation<IEnumerable<int>>)(this.InvokeOperation("GenerateTestResults", typeof(IEnumerable<int>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTestResults' method of the DomainService.
        /// </summary>
        /// <param name="intValue">The value for the 'intValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<int>> GenerateTestResults(int intValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("intValue", intValue);
            this.ValidateMethod("GenerateTestResults", parameters);
            return ((InvokeOperation<IEnumerable<int>>)(this.InvokeOperation("GenerateTestResults", typeof(IEnumerable<int>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient494941' method of the DomainService.
        /// </summary>
        /// <param name="xx">The value for the 'xx' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient494941(Class1 xx, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("xx", xx);
            this.ValidateMethod("PortClassToClient494941", parameters);
            return this.InvokeOperation("PortClassToClient494941", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient494941' method of the DomainService.
        /// </summary>
        /// <param name="xx">The value for the 'xx' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient494941(Class1 xx)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("xx", xx);
            this.ValidateMethod("PortClassToClient494941", parameters);
            return this.InvokeOperation("PortClassToClient494941", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FrequencyDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FrequencyDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFrequencyDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateFrequencyTable' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/GenerateFrequencyTableDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/GenerateFrequencyTable", ReplyAction="http://tempuri.org/FrequencyDomainService/GenerateFrequencyTableResponse")]
            IAsyncResult BeginGenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateFrequencyTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateFrequencyTable'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateFrequencyTable' operation.</returns>
            List<FrequencyResultData> EndGenerateFrequencyTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateTestResults' operation.
            /// </summary>
            /// <param name="intValue">The value for the 'intValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/GenerateTestResultsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/GenerateTestResults", ReplyAction="http://tempuri.org/FrequencyDomainService/GenerateTestResultsResponse")]
            IAsyncResult BeginGenerateTestResults(int intValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateTestResults'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateTestResults'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GenerateTestResults' operation.</returns>
            IEnumerable<int> EndGenerateTestResults(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/GetColumns", ReplyAction="http://tempuri.org/FrequencyDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/Getrule", ReplyAction="http://tempuri.org/FrequencyDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient4' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/PortClassToClient4DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/PortClassToClient4", ReplyAction="http://tempuri.org/FrequencyDomainService/PortClassToClient4Response")]
            IAsyncResult BeginPortClassToClient4(GadgetParameters gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient4'.</param>
            void EndPortClassToClient4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient494941' operation.
            /// </summary>
            /// <param name="xx">The value for the 'xx' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/PortClassToClient494941DomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/PortClassToClient494941", ReplyAction="http://tempuri.org/FrequencyDomainService/PortClassToClient494941Response")]
            IAsyncResult BeginPortClassToClient494941(Class1 xx, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient494941'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient494941'.</param>
            void EndPortClassToClient494941(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient7' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/PortClassToClient7DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/PortClassToClient7", ReplyAction="http://tempuri.org/FrequencyDomainService/PortClassToClient7Response")]
            IAsyncResult BeginPortClassToClient7(EWAVFrequencyControlDto gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient7'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient7'.</param>
            void EndPortClassToClient7(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient77' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/PortClassToClient77DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/PortClassToClient77", ReplyAction="http://tempuri.org/FrequencyDomainService/PortClassToClient77Response")]
            IAsyncResult BeginPortClassToClient77(EWAVColumn gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient77'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient77'.</param>
            void EndPortClassToClient77(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient777' operation.
            /// </summary>
            /// <param name="ds">The value for the 'ds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/PortClassToClient777DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/PortClassToClient777", ReplyAction="http://tempuri.org/FrequencyDomainService/PortClassToClient777Response")]
            IAsyncResult BeginPortClassToClient777(DescriptiveStatistics ds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient777'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient777'.</param>
            void EndPortClassToClient777(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient79' operation.
            /// </summary>
            /// <param name="aa">The value for the 'aa' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/PortClassToClient79DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/PortClassToClient79", ReplyAction="http://tempuri.org/FrequencyDomainService/PortClassToClient79Response")]
            IAsyncResult BeginPortClassToClient79(EWAVConnectionString aa, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient79'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient79'.</param>
            void EndPortClassToClient79(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FrequencyDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FrequencyDomainService/SubmitChanges", ReplyAction="http://tempuri.org/FrequencyDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class FrequencyDomainContextEntityContainer : EntityContainer
        {
            
            public FrequencyDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'FrequencyResultData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class FrequencyResultData : ComplexObject
    {
        
        private List<DescriptiveStatistics> _descriptiveStatisticsList;
        
        private List<EWAVFrequencyControlDto> _frequencyControlDtoList;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptiveStatisticsListChanging(List<DescriptiveStatistics> value);
        partial void OnDescriptiveStatisticsListChanged();
        partial void OnFrequencyControlDtoListChanging(List<EWAVFrequencyControlDto> value);
        partial void OnFrequencyControlDtoListChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyResultData"/> class.
        /// </summary>
        public FrequencyResultData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DescriptiveStatisticsList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DescriptiveStatistics> DescriptiveStatisticsList
        {
            get
            {
                return this._descriptiveStatisticsList;
            }
            set
            {
                if ((this._descriptiveStatisticsList != value))
                {
                    this.OnDescriptiveStatisticsListChanging(value);
                    this.RaiseDataMemberChanging("DescriptiveStatisticsList");
                    this.ValidateProperty("DescriptiveStatisticsList", value);
                    this._descriptiveStatisticsList = value;
                    this.RaiseDataMemberChanged("DescriptiveStatisticsList");
                    this.OnDescriptiveStatisticsListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrequencyControlDtoList' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<EWAVFrequencyControlDto> FrequencyControlDtoList
        {
            get
            {
                return this._frequencyControlDtoList;
            }
            set
            {
                if ((this._frequencyControlDtoList != value))
                {
                    this.OnFrequencyControlDtoListChanging(value);
                    this.RaiseDataMemberChanging("FrequencyControlDtoList");
                    this.ValidateProperty("FrequencyControlDtoList", value);
                    this._frequencyControlDtoList = value;
                    this.RaiseDataMemberChanged("FrequencyControlDtoList");
                    this.OnFrequencyControlDtoListChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'GridCells' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class GridCells : ComplexObject
    {
        
        private double _nnColPct;
        
        private double _nnRowPct;
        
        private double _nnSideLength;
        
        private int _nnVal;
        
        private double _ntColPct;
        
        private int _ntVal;
        
        private double _nyColPct;
        
        private double _nyRowPct;
        
        private double _nySideLength;
        
        private int _nyVal;
        
        private MySingleTableResults _singleTableResults;
        
        private double _tnRowPct;
        
        private int _tnVal;
        
        private int _ttVal;
        
        private double _tyRowPct;
        
        private int _tyVal;
        
        private double _ynColPct;
        
        private double _ynRowPct;
        
        private double _ynSideLength;
        
        private int _ynVal;
        
        private double _ytColPct;
        
        private int _ytVal;
        
        private double _yyColPct;
        
        private double _yyRowPct;
        
        private double _yySideLength;
        
        private int _yyVal;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNnColPctChanging(double value);
        partial void OnNnColPctChanged();
        partial void OnNnRowPctChanging(double value);
        partial void OnNnRowPctChanged();
        partial void OnNnSideLengthChanging(double value);
        partial void OnNnSideLengthChanged();
        partial void OnNnValChanging(int value);
        partial void OnNnValChanged();
        partial void OnNtColPctChanging(double value);
        partial void OnNtColPctChanged();
        partial void OnNtValChanging(int value);
        partial void OnNtValChanged();
        partial void OnNyColPctChanging(double value);
        partial void OnNyColPctChanged();
        partial void OnNyRowPctChanging(double value);
        partial void OnNyRowPctChanged();
        partial void OnNySideLengthChanging(double value);
        partial void OnNySideLengthChanged();
        partial void OnNyValChanging(int value);
        partial void OnNyValChanged();
        partial void OnSingleTableResultsChanging(MySingleTableResults value);
        partial void OnSingleTableResultsChanged();
        partial void OnTnRowPctChanging(double value);
        partial void OnTnRowPctChanged();
        partial void OnTnValChanging(int value);
        partial void OnTnValChanged();
        partial void OnTtValChanging(int value);
        partial void OnTtValChanged();
        partial void OnTyRowPctChanging(double value);
        partial void OnTyRowPctChanged();
        partial void OnTyValChanging(int value);
        partial void OnTyValChanged();
        partial void OnYnColPctChanging(double value);
        partial void OnYnColPctChanged();
        partial void OnYnRowPctChanging(double value);
        partial void OnYnRowPctChanged();
        partial void OnYnSideLengthChanging(double value);
        partial void OnYnSideLengthChanged();
        partial void OnYnValChanging(int value);
        partial void OnYnValChanged();
        partial void OnYtColPctChanging(double value);
        partial void OnYtColPctChanged();
        partial void OnYtValChanging(int value);
        partial void OnYtValChanged();
        partial void OnYyColPctChanging(double value);
        partial void OnYyColPctChanged();
        partial void OnYyRowPctChanging(double value);
        partial void OnYyRowPctChanged();
        partial void OnYySideLengthChanging(double value);
        partial void OnYySideLengthChanged();
        partial void OnYyValChanging(int value);
        partial void OnYyValChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GridCells"/> class.
        /// </summary>
        public GridCells()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'NnColPct' value.
        /// </summary>
        [DataMember()]
        public double NnColPct
        {
            get
            {
                return this._nnColPct;
            }
            set
            {
                if ((this._nnColPct != value))
                {
                    this.OnNnColPctChanging(value);
                    this.RaiseDataMemberChanging("NnColPct");
                    this.ValidateProperty("NnColPct", value);
                    this._nnColPct = value;
                    this.RaiseDataMemberChanged("NnColPct");
                    this.OnNnColPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NnRowPct' value.
        /// </summary>
        [DataMember()]
        public double NnRowPct
        {
            get
            {
                return this._nnRowPct;
            }
            set
            {
                if ((this._nnRowPct != value))
                {
                    this.OnNnRowPctChanging(value);
                    this.RaiseDataMemberChanging("NnRowPct");
                    this.ValidateProperty("NnRowPct", value);
                    this._nnRowPct = value;
                    this.RaiseDataMemberChanged("NnRowPct");
                    this.OnNnRowPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NnSideLength' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double NnSideLength
        {
            get
            {
                return this._nnSideLength;
            }
            set
            {
                if ((this._nnSideLength != value))
                {
                    this.OnNnSideLengthChanging(value);
                    this.ValidateProperty("NnSideLength", value);
                    this._nnSideLength = value;
                    this.RaisePropertyChanged("NnSideLength");
                    this.OnNnSideLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NnVal' value.
        /// </summary>
        [DataMember()]
        public int NnVal
        {
            get
            {
                return this._nnVal;
            }
            set
            {
                if ((this._nnVal != value))
                {
                    this.OnNnValChanging(value);
                    this.RaiseDataMemberChanging("NnVal");
                    this.ValidateProperty("NnVal", value);
                    this._nnVal = value;
                    this.RaiseDataMemberChanged("NnVal");
                    this.OnNnValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NtColPct' value.
        /// </summary>
        [DataMember()]
        public double NtColPct
        {
            get
            {
                return this._ntColPct;
            }
            set
            {
                if ((this._ntColPct != value))
                {
                    this.OnNtColPctChanging(value);
                    this.RaiseDataMemberChanging("NtColPct");
                    this.ValidateProperty("NtColPct", value);
                    this._ntColPct = value;
                    this.RaiseDataMemberChanged("NtColPct");
                    this.OnNtColPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NtVal' value.
        /// </summary>
        [DataMember()]
        public int NtVal
        {
            get
            {
                return this._ntVal;
            }
            set
            {
                if ((this._ntVal != value))
                {
                    this.OnNtValChanging(value);
                    this.RaiseDataMemberChanging("NtVal");
                    this.ValidateProperty("NtVal", value);
                    this._ntVal = value;
                    this.RaiseDataMemberChanged("NtVal");
                    this.OnNtValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NyColPct' value.
        /// </summary>
        [DataMember()]
        public double NyColPct
        {
            get
            {
                return this._nyColPct;
            }
            set
            {
                if ((this._nyColPct != value))
                {
                    this.OnNyColPctChanging(value);
                    this.RaiseDataMemberChanging("NyColPct");
                    this.ValidateProperty("NyColPct", value);
                    this._nyColPct = value;
                    this.RaiseDataMemberChanged("NyColPct");
                    this.OnNyColPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NyRowPct' value.
        /// </summary>
        [DataMember()]
        public double NyRowPct
        {
            get
            {
                return this._nyRowPct;
            }
            set
            {
                if ((this._nyRowPct != value))
                {
                    this.OnNyRowPctChanging(value);
                    this.RaiseDataMemberChanging("NyRowPct");
                    this.ValidateProperty("NyRowPct", value);
                    this._nyRowPct = value;
                    this.RaiseDataMemberChanged("NyRowPct");
                    this.OnNyRowPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NySideLength' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double NySideLength
        {
            get
            {
                return this._nySideLength;
            }
            set
            {
                if ((this._nySideLength != value))
                {
                    this.OnNySideLengthChanging(value);
                    this.ValidateProperty("NySideLength", value);
                    this._nySideLength = value;
                    this.RaisePropertyChanged("NySideLength");
                    this.OnNySideLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NyVal' value.
        /// </summary>
        [DataMember()]
        public int NyVal
        {
            get
            {
                return this._nyVal;
            }
            set
            {
                if ((this._nyVal != value))
                {
                    this.OnNyValChanging(value);
                    this.RaiseDataMemberChanging("NyVal");
                    this.ValidateProperty("NyVal", value);
                    this._nyVal = value;
                    this.RaiseDataMemberChanged("NyVal");
                    this.OnNyValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SingleTableResults' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MySingleTableResults SingleTableResults
        {
            get
            {
                return this._singleTableResults;
            }
            set
            {
                if ((this._singleTableResults != value))
                {
                    this.OnSingleTableResultsChanging(value);
                    this.RaiseDataMemberChanging("SingleTableResults");
                    this.ValidateProperty("SingleTableResults", value);
                    this._singleTableResults = value;
                    this.RaiseDataMemberChanged("SingleTableResults");
                    this.OnSingleTableResultsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TnRowPct' value.
        /// </summary>
        [DataMember()]
        public double TnRowPct
        {
            get
            {
                return this._tnRowPct;
            }
            set
            {
                if ((this._tnRowPct != value))
                {
                    this.OnTnRowPctChanging(value);
                    this.RaiseDataMemberChanging("TnRowPct");
                    this.ValidateProperty("TnRowPct", value);
                    this._tnRowPct = value;
                    this.RaiseDataMemberChanged("TnRowPct");
                    this.OnTnRowPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TnVal' value.
        /// </summary>
        [DataMember()]
        public int TnVal
        {
            get
            {
                return this._tnVal;
            }
            set
            {
                if ((this._tnVal != value))
                {
                    this.OnTnValChanging(value);
                    this.RaiseDataMemberChanging("TnVal");
                    this.ValidateProperty("TnVal", value);
                    this._tnVal = value;
                    this.RaiseDataMemberChanged("TnVal");
                    this.OnTnValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TtVal' value.
        /// </summary>
        [DataMember()]
        public int TtVal
        {
            get
            {
                return this._ttVal;
            }
            set
            {
                if ((this._ttVal != value))
                {
                    this.OnTtValChanging(value);
                    this.RaiseDataMemberChanging("TtVal");
                    this.ValidateProperty("TtVal", value);
                    this._ttVal = value;
                    this.RaiseDataMemberChanged("TtVal");
                    this.OnTtValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TyRowPct' value.
        /// </summary>
        [DataMember()]
        public double TyRowPct
        {
            get
            {
                return this._tyRowPct;
            }
            set
            {
                if ((this._tyRowPct != value))
                {
                    this.OnTyRowPctChanging(value);
                    this.RaiseDataMemberChanging("TyRowPct");
                    this.ValidateProperty("TyRowPct", value);
                    this._tyRowPct = value;
                    this.RaiseDataMemberChanged("TyRowPct");
                    this.OnTyRowPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TyVal' value.
        /// </summary>
        [DataMember()]
        public int TyVal
        {
            get
            {
                return this._tyVal;
            }
            set
            {
                if ((this._tyVal != value))
                {
                    this.OnTyValChanging(value);
                    this.RaiseDataMemberChanging("TyVal");
                    this.ValidateProperty("TyVal", value);
                    this._tyVal = value;
                    this.RaiseDataMemberChanged("TyVal");
                    this.OnTyValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YnColPct' value.
        /// </summary>
        [DataMember()]
        public double YnColPct
        {
            get
            {
                return this._ynColPct;
            }
            set
            {
                if ((this._ynColPct != value))
                {
                    this.OnYnColPctChanging(value);
                    this.RaiseDataMemberChanging("YnColPct");
                    this.ValidateProperty("YnColPct", value);
                    this._ynColPct = value;
                    this.RaiseDataMemberChanged("YnColPct");
                    this.OnYnColPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YnRowPct' value.
        /// </summary>
        [DataMember()]
        public double YnRowPct
        {
            get
            {
                return this._ynRowPct;
            }
            set
            {
                if ((this._ynRowPct != value))
                {
                    this.OnYnRowPctChanging(value);
                    this.RaiseDataMemberChanging("YnRowPct");
                    this.ValidateProperty("YnRowPct", value);
                    this._ynRowPct = value;
                    this.RaiseDataMemberChanged("YnRowPct");
                    this.OnYnRowPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YnSideLength' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double YnSideLength
        {
            get
            {
                return this._ynSideLength;
            }
            set
            {
                if ((this._ynSideLength != value))
                {
                    this.OnYnSideLengthChanging(value);
                    this.ValidateProperty("YnSideLength", value);
                    this._ynSideLength = value;
                    this.RaisePropertyChanged("YnSideLength");
                    this.OnYnSideLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YnVal' value.
        /// </summary>
        [DataMember()]
        public int YnVal
        {
            get
            {
                return this._ynVal;
            }
            set
            {
                if ((this._ynVal != value))
                {
                    this.OnYnValChanging(value);
                    this.RaiseDataMemberChanging("YnVal");
                    this.ValidateProperty("YnVal", value);
                    this._ynVal = value;
                    this.RaiseDataMemberChanged("YnVal");
                    this.OnYnValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YtColPct' value.
        /// </summary>
        [DataMember()]
        public double YtColPct
        {
            get
            {
                return this._ytColPct;
            }
            set
            {
                if ((this._ytColPct != value))
                {
                    this.OnYtColPctChanging(value);
                    this.RaiseDataMemberChanging("YtColPct");
                    this.ValidateProperty("YtColPct", value);
                    this._ytColPct = value;
                    this.RaiseDataMemberChanged("YtColPct");
                    this.OnYtColPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YtVal' value.
        /// </summary>
        [DataMember()]
        public int YtVal
        {
            get
            {
                return this._ytVal;
            }
            set
            {
                if ((this._ytVal != value))
                {
                    this.OnYtValChanging(value);
                    this.RaiseDataMemberChanging("YtVal");
                    this.ValidateProperty("YtVal", value);
                    this._ytVal = value;
                    this.RaiseDataMemberChanged("YtVal");
                    this.OnYtValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YyColPct' value.
        /// </summary>
        [DataMember()]
        public double YyColPct
        {
            get
            {
                return this._yyColPct;
            }
            set
            {
                if ((this._yyColPct != value))
                {
                    this.OnYyColPctChanging(value);
                    this.RaiseDataMemberChanging("YyColPct");
                    this.ValidateProperty("YyColPct", value);
                    this._yyColPct = value;
                    this.RaiseDataMemberChanged("YyColPct");
                    this.OnYyColPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YyRowPct' value.
        /// </summary>
        [DataMember()]
        public double YyRowPct
        {
            get
            {
                return this._yyRowPct;
            }
            set
            {
                if ((this._yyRowPct != value))
                {
                    this.OnYyRowPctChanging(value);
                    this.RaiseDataMemberChanging("YyRowPct");
                    this.ValidateProperty("YyRowPct", value);
                    this._yyRowPct = value;
                    this.RaiseDataMemberChanged("YyRowPct");
                    this.OnYyRowPctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YySideLength' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double YySideLength
        {
            get
            {
                return this._yySideLength;
            }
            set
            {
                if ((this._yySideLength != value))
                {
                    this.OnYySideLengthChanging(value);
                    this.ValidateProperty("YySideLength", value);
                    this._yySideLength = value;
                    this.RaisePropertyChanged("YySideLength");
                    this.OnYySideLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YyVal' value.
        /// </summary>
        [DataMember()]
        public int YyVal
        {
            get
            {
                return this._yyVal;
            }
            set
            {
                if ((this._yyVal != value))
                {
                    this.OnYyValChanging(value);
                    this.RaiseDataMemberChanging("YyVal");
                    this.ValidateProperty("YyVal", value);
                    this._yyVal = value;
                    this.RaiseDataMemberChanged("YyVal");
                    this.OnYyValChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'LinearRegressionDomainService' DomainService.
    /// </summary>
    public sealed partial class LinearRegressionDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearRegressionDomainContext"/> class.
        /// </summary>
        public LinearRegressionDomainContext() : 
                this(new WebDomainClient<ILinearRegressionDomainServiceContract>(new Uri("EWAV-Web-Services-LinearRegressionDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearRegressionDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LinearRegressionDomainService service URI.</param>
        public LinearRegressionDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ILinearRegressionDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearRegressionDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public LinearRegressionDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="LinearRegressionDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTable' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ListOfStringClass>> GenerateTable(string DataSourceName, string TableName, IEnumerable<string> columnNames, Action<InvokeOperation<List<ListOfStringClass>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            parameters.Add("columnNames", columnNames);
            this.ValidateMethod("GenerateTable", parameters);
            return ((InvokeOperation<List<ListOfStringClass>>)(this.InvokeOperation("GenerateTable", typeof(List<ListOfStringClass>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTable' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ListOfStringClass>> GenerateTable(string DataSourceName, string TableName, IEnumerable<string> columnNames)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            parameters.Add("columnNames", columnNames);
            this.ValidateMethod("GenerateTable", parameters);
            return ((InvokeOperation<List<ListOfStringClass>>)(this.InvokeOperation("GenerateTable", typeof(List<ListOfStringClass>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRegressionResult' method of the DomainService.
        /// </summary>
        /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="inputDtoList">The value for the 'inputDtoList' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<LinRegressionResults> GetRegressionResult(GadgetParameters gadgetOptions, IEnumerable<string> columnNames, List<DictionaryDTO> inputDtoList, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<LinRegressionResults>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetOptions", gadgetOptions);
            parameters.Add("columnNames", columnNames);
            parameters.Add("inputDtoList", inputDtoList);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GetRegressionResult", parameters);
            return ((InvokeOperation<LinRegressionResults>)(this.InvokeOperation("GetRegressionResult", typeof(LinRegressionResults), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRegressionResult' method of the DomainService.
        /// </summary>
        /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="inputDtoList">The value for the 'inputDtoList' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<LinRegressionResults> GetRegressionResult(GadgetParameters gadgetOptions, IEnumerable<string> columnNames, List<DictionaryDTO> inputDtoList, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetOptions", gadgetOptions);
            parameters.Add("columnNames", columnNames);
            parameters.Add("inputDtoList", inputDtoList);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GetRegressionResult", parameters);
            return ((InvokeOperation<LinRegressionResults>)(this.InvokeOperation("GetRegressionResult", typeof(LinRegressionResults), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortThisToClient' method of the DomainService.
        /// </summary>
        /// <param name="rr">The value for the 'rr' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortThisToClient(LinearRegressionResults rr, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rr", rr);
            this.ValidateMethod("PortThisToClient", parameters);
            return this.InvokeOperation("PortThisToClient", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortThisToClient' method of the DomainService.
        /// </summary>
        /// <param name="rr">The value for the 'rr' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortThisToClient(LinearRegressionResults rr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rr", rr);
            this.ValidateMethod("PortThisToClient", parameters);
            return this.InvokeOperation("PortThisToClient", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LinearRegressionDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LinearRegressionDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILinearRegressionDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateTable' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LinearRegressionDomainService/GenerateTableDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LinearRegressionDomainService/GenerateTable", ReplyAction="http://tempuri.org/LinearRegressionDomainService/GenerateTableResponse")]
            IAsyncResult BeginGenerateTable(string DataSourceName, string TableName, IEnumerable<string> columnNames, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateTable'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateTable' operation.</returns>
            List<ListOfStringClass> EndGenerateTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LinearRegressionDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LinearRegressionDomainService/GetColumns", ReplyAction="http://tempuri.org/LinearRegressionDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegressionResult' operation.
            /// </summary>
            /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
            /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
            /// <param name="inputDtoList">The value for the 'inputDtoList' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LinearRegressionDomainService/GetRegressionResultDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LinearRegressionDomainService/GetRegressionResult", ReplyAction="http://tempuri.org/LinearRegressionDomainService/GetRegressionResultResponse")]
            IAsyncResult BeginGetRegressionResult(GadgetParameters gadgetOptions, IEnumerable<string> columnNames, List<DictionaryDTO> inputDtoList, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegressionResult'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegressionResult'.</param>
            /// <returns>The 'LinRegressionResults' returned from the 'GetRegressionResult' operation.</returns>
            LinRegressionResults EndGetRegressionResult(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LinearRegressionDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LinearRegressionDomainService/Getrule", ReplyAction="http://tempuri.org/LinearRegressionDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortThisToClient' operation.
            /// </summary>
            /// <param name="rr">The value for the 'rr' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LinearRegressionDomainService/PortThisToClientDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LinearRegressionDomainService/PortThisToClient", ReplyAction="http://tempuri.org/LinearRegressionDomainService/PortThisToClientResponse")]
            IAsyncResult BeginPortThisToClient(LinearRegressionResults rr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortThisToClient'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortThisToClient'.</param>
            void EndPortThisToClient(IAsyncResult result);
        }
        
        internal sealed class LinearRegressionDomainContextEntityContainer : EntityContainer
        {
            
            public LinearRegressionDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'LinearRegressionResults' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class LinearRegressionResults : ComplexObject
    {
        
        private double _correlationCoefficient;
        
        private string _errorMessage;
        
        private int _regressionDf;
        
        private double _regressionF;
        
        private double _regressionMeanSquare;
        
        private LinRegressionResults _regressionResults;
        
        private double _regressionSumOfSquares;
        
        private int _residualsDf;
        
        private double _residualsMeanSquare;
        
        private double _residualsSumOfSquares;
        
        private int _totalDf;
        
        private double _totalSumOfSquares;
        
        private List<VariableRow> _variables;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCorrelationCoefficientChanging(double value);
        partial void OnCorrelationCoefficientChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnRegressionDfChanging(int value);
        partial void OnRegressionDfChanged();
        partial void OnRegressionFChanging(double value);
        partial void OnRegressionFChanged();
        partial void OnRegressionMeanSquareChanging(double value);
        partial void OnRegressionMeanSquareChanged();
        partial void OnRegressionResultsChanging(LinRegressionResults value);
        partial void OnRegressionResultsChanged();
        partial void OnRegressionSumOfSquaresChanging(double value);
        partial void OnRegressionSumOfSquaresChanged();
        partial void OnResidualsDfChanging(int value);
        partial void OnResidualsDfChanged();
        partial void OnResidualsMeanSquareChanging(double value);
        partial void OnResidualsMeanSquareChanged();
        partial void OnResidualsSumOfSquaresChanging(double value);
        partial void OnResidualsSumOfSquaresChanged();
        partial void OnTotalDfChanging(int value);
        partial void OnTotalDfChanged();
        partial void OnTotalSumOfSquaresChanging(double value);
        partial void OnTotalSumOfSquaresChanged();
        partial void OnVariablesChanging(List<VariableRow> value);
        partial void OnVariablesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearRegressionResults"/> class.
        /// </summary>
        public LinearRegressionResults()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CorrelationCoefficient' value.
        /// </summary>
        [DataMember()]
        public double CorrelationCoefficient
        {
            get
            {
                return this._correlationCoefficient;
            }
            set
            {
                if ((this._correlationCoefficient != value))
                {
                    this.OnCorrelationCoefficientChanging(value);
                    this.RaiseDataMemberChanging("CorrelationCoefficient");
                    this.ValidateProperty("CorrelationCoefficient", value);
                    this._correlationCoefficient = value;
                    this.RaiseDataMemberChanged("CorrelationCoefficient");
                    this.OnCorrelationCoefficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionDf' value.
        /// </summary>
        [DataMember()]
        public int RegressionDf
        {
            get
            {
                return this._regressionDf;
            }
            set
            {
                if ((this._regressionDf != value))
                {
                    this.OnRegressionDfChanging(value);
                    this.RaiseDataMemberChanging("RegressionDf");
                    this.ValidateProperty("RegressionDf", value);
                    this._regressionDf = value;
                    this.RaiseDataMemberChanged("RegressionDf");
                    this.OnRegressionDfChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionF' value.
        /// </summary>
        [DataMember()]
        public double RegressionF
        {
            get
            {
                return this._regressionF;
            }
            set
            {
                if ((this._regressionF != value))
                {
                    this.OnRegressionFChanging(value);
                    this.RaiseDataMemberChanging("RegressionF");
                    this.ValidateProperty("RegressionF", value);
                    this._regressionF = value;
                    this.RaiseDataMemberChanged("RegressionF");
                    this.OnRegressionFChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionMeanSquare' value.
        /// </summary>
        [DataMember()]
        public double RegressionMeanSquare
        {
            get
            {
                return this._regressionMeanSquare;
            }
            set
            {
                if ((this._regressionMeanSquare != value))
                {
                    this.OnRegressionMeanSquareChanging(value);
                    this.RaiseDataMemberChanging("RegressionMeanSquare");
                    this.ValidateProperty("RegressionMeanSquare", value);
                    this._regressionMeanSquare = value;
                    this.RaiseDataMemberChanged("RegressionMeanSquare");
                    this.OnRegressionMeanSquareChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionResults' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public LinRegressionResults RegressionResults
        {
            get
            {
                return this._regressionResults;
            }
            set
            {
                if ((this._regressionResults != value))
                {
                    this.OnRegressionResultsChanging(value);
                    this.RaiseDataMemberChanging("RegressionResults");
                    this.ValidateProperty("RegressionResults", value);
                    this._regressionResults = value;
                    this.RaiseDataMemberChanged("RegressionResults");
                    this.OnRegressionResultsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionSumOfSquares' value.
        /// </summary>
        [DataMember()]
        public double RegressionSumOfSquares
        {
            get
            {
                return this._regressionSumOfSquares;
            }
            set
            {
                if ((this._regressionSumOfSquares != value))
                {
                    this.OnRegressionSumOfSquaresChanging(value);
                    this.RaiseDataMemberChanging("RegressionSumOfSquares");
                    this.ValidateProperty("RegressionSumOfSquares", value);
                    this._regressionSumOfSquares = value;
                    this.RaiseDataMemberChanged("RegressionSumOfSquares");
                    this.OnRegressionSumOfSquaresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResidualsDf' value.
        /// </summary>
        [DataMember()]
        public int ResidualsDf
        {
            get
            {
                return this._residualsDf;
            }
            set
            {
                if ((this._residualsDf != value))
                {
                    this.OnResidualsDfChanging(value);
                    this.RaiseDataMemberChanging("ResidualsDf");
                    this.ValidateProperty("ResidualsDf", value);
                    this._residualsDf = value;
                    this.RaiseDataMemberChanged("ResidualsDf");
                    this.OnResidualsDfChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResidualsMeanSquare' value.
        /// </summary>
        [DataMember()]
        public double ResidualsMeanSquare
        {
            get
            {
                return this._residualsMeanSquare;
            }
            set
            {
                if ((this._residualsMeanSquare != value))
                {
                    this.OnResidualsMeanSquareChanging(value);
                    this.RaiseDataMemberChanging("ResidualsMeanSquare");
                    this.ValidateProperty("ResidualsMeanSquare", value);
                    this._residualsMeanSquare = value;
                    this.RaiseDataMemberChanged("ResidualsMeanSquare");
                    this.OnResidualsMeanSquareChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResidualsSumOfSquares' value.
        /// </summary>
        [DataMember()]
        public double ResidualsSumOfSquares
        {
            get
            {
                return this._residualsSumOfSquares;
            }
            set
            {
                if ((this._residualsSumOfSquares != value))
                {
                    this.OnResidualsSumOfSquaresChanging(value);
                    this.RaiseDataMemberChanging("ResidualsSumOfSquares");
                    this.ValidateProperty("ResidualsSumOfSquares", value);
                    this._residualsSumOfSquares = value;
                    this.RaiseDataMemberChanged("ResidualsSumOfSquares");
                    this.OnResidualsSumOfSquaresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalDf' value.
        /// </summary>
        [DataMember()]
        public int TotalDf
        {
            get
            {
                return this._totalDf;
            }
            set
            {
                if ((this._totalDf != value))
                {
                    this.OnTotalDfChanging(value);
                    this.RaiseDataMemberChanging("TotalDf");
                    this.ValidateProperty("TotalDf", value);
                    this._totalDf = value;
                    this.RaiseDataMemberChanged("TotalDf");
                    this.OnTotalDfChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalSumOfSquares' value.
        /// </summary>
        [DataMember()]
        public double TotalSumOfSquares
        {
            get
            {
                return this._totalSumOfSquares;
            }
            set
            {
                if ((this._totalSumOfSquares != value))
                {
                    this.OnTotalSumOfSquaresChanging(value);
                    this.RaiseDataMemberChanging("TotalSumOfSquares");
                    this.ValidateProperty("TotalSumOfSquares", value);
                    this._totalSumOfSquares = value;
                    this.RaiseDataMemberChanged("TotalSumOfSquares");
                    this.OnTotalSumOfSquaresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Variables' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<VariableRow> Variables
        {
            get
            {
                return this._variables;
            }
            set
            {
                if ((this._variables != value))
                {
                    this.OnVariablesChanging(value);
                    this.RaiseDataMemberChanging("Variables");
                    this.ValidateProperty("Variables", value);
                    this._variables = value;
                    this.RaiseDataMemberChanged("Variables");
                    this.OnVariablesChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'LinearRegVariableRow' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class LinearRegVariableRow : ComplexObject
    {
        
        private double _coefficient;
        
        private double _ftest;
        
        private double _p;
        
        private double _stdError;
        
        private string _variableName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoefficientChanging(double value);
        partial void OnCoefficientChanged();
        partial void OnFtestChanging(double value);
        partial void OnFtestChanged();
        partial void OnPChanging(double value);
        partial void OnPChanged();
        partial void OnStdErrorChanging(double value);
        partial void OnStdErrorChanged();
        partial void OnVariableNameChanging(string value);
        partial void OnVariableNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearRegVariableRow"/> class.
        /// </summary>
        public LinearRegVariableRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Coefficient' value.
        /// </summary>
        [DataMember()]
        public double Coefficient
        {
            get
            {
                return this._coefficient;
            }
            set
            {
                if ((this._coefficient != value))
                {
                    this.OnCoefficientChanging(value);
                    this.RaiseDataMemberChanging("Coefficient");
                    this.ValidateProperty("Coefficient", value);
                    this._coefficient = value;
                    this.RaiseDataMemberChanged("Coefficient");
                    this.OnCoefficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ftest' value.
        /// </summary>
        [DataMember()]
        public double Ftest
        {
            get
            {
                return this._ftest;
            }
            set
            {
                if ((this._ftest != value))
                {
                    this.OnFtestChanging(value);
                    this.RaiseDataMemberChanging("Ftest");
                    this.ValidateProperty("Ftest", value);
                    this._ftest = value;
                    this.RaiseDataMemberChanged("Ftest");
                    this.OnFtestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'P' value.
        /// </summary>
        [DataMember()]
        public double P
        {
            get
            {
                return this._p;
            }
            set
            {
                if ((this._p != value))
                {
                    this.OnPChanging(value);
                    this.RaiseDataMemberChanging("P");
                    this.ValidateProperty("P", value);
                    this._p = value;
                    this.RaiseDataMemberChanged("P");
                    this.OnPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StdError' value.
        /// </summary>
        [DataMember()]
        public double StdError
        {
            get
            {
                return this._stdError;
            }
            set
            {
                if ((this._stdError != value))
                {
                    this.OnStdErrorChanging(value);
                    this.RaiseDataMemberChanging("StdError");
                    this.ValidateProperty("StdError", value);
                    this._stdError = value;
                    this.RaiseDataMemberChanged("StdError");
                    this.OnStdErrorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VariableName' value.
        /// </summary>
        [DataMember()]
        public string VariableName
        {
            get
            {
                return this._variableName;
            }
            set
            {
                if ((this._variableName != value))
                {
                    this.OnVariableNameChanging(value);
                    this.RaiseDataMemberChanging("VariableName");
                    this.ValidateProperty("VariableName", value);
                    this._variableName = value;
                    this.RaiseDataMemberChanged("VariableName");
                    this.OnVariableNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'LineListDomainService' DomainService.
    /// </summary>
    public sealed partial class LineListDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LineListDomainContext"/> class.
        /// </summary>
        public LineListDomainContext() : 
                this(new WebDomainClient<ILineListDomainServiceContract>(new Uri("EWAV-Web-Services-LineListDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LineListDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LineListDomainService service URI.</param>
        public LineListDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ILineListDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LineListDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public LineListDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="LineListDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetLineList' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<DatatableBag>> GetLineList(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<List<DatatableBag>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GetLineList", parameters);
            return ((InvokeOperation<List<DatatableBag>>)(this.InvokeOperation("GetLineList", typeof(List<DatatableBag>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetLineList' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<DatatableBag>> GetLineList(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GetLineList", parameters);
            return ((InvokeOperation<List<DatatableBag>>)(this.InvokeOperation("GetLineList", typeof(List<DatatableBag>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LineListDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LineListDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILineListDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetLineList' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LineListDomainService/GetLineListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LineListDomainService/GetLineList", ReplyAction="http://tempuri.org/LineListDomainService/GetLineListResponse")]
            IAsyncResult BeginGetLineList(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLineList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLineList'.</param>
            /// <returns>The 'List`1' returned from the 'GetLineList' operation.</returns>
            List<DatatableBag> EndGetLineList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LineListDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LineListDomainService/Getrule", ReplyAction="http://tempuri.org/LineListDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
        }
        
        internal sealed class LineListDomainContextEntityContainer : EntityContainer
        {
            
            public LineListDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'LinRegressionResults' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class LinRegressionResults : ComplexObject
    {
        
        private double _correlationCoefficient;
        
        private string _errorMessage;
        
        private int _regressionDf;
        
        private double _regressionF;
        
        private double _regressionMeanSquare;
        
        private double _regressionSumOfSquares;
        
        private int _residualsDf;
        
        private double _residualsMeanSquare;
        
        private double _residualsSumOfSquares;
        
        private int _totalDf;
        
        private double _totalSumOfSquares;
        
        private List<LinearRegVariableRow> _variables;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCorrelationCoefficientChanging(double value);
        partial void OnCorrelationCoefficientChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnRegressionDfChanging(int value);
        partial void OnRegressionDfChanged();
        partial void OnRegressionFChanging(double value);
        partial void OnRegressionFChanged();
        partial void OnRegressionMeanSquareChanging(double value);
        partial void OnRegressionMeanSquareChanged();
        partial void OnRegressionSumOfSquaresChanging(double value);
        partial void OnRegressionSumOfSquaresChanged();
        partial void OnResidualsDfChanging(int value);
        partial void OnResidualsDfChanged();
        partial void OnResidualsMeanSquareChanging(double value);
        partial void OnResidualsMeanSquareChanged();
        partial void OnResidualsSumOfSquaresChanging(double value);
        partial void OnResidualsSumOfSquaresChanged();
        partial void OnTotalDfChanging(int value);
        partial void OnTotalDfChanged();
        partial void OnTotalSumOfSquaresChanging(double value);
        partial void OnTotalSumOfSquaresChanged();
        partial void OnVariablesChanging(List<LinearRegVariableRow> value);
        partial void OnVariablesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LinRegressionResults"/> class.
        /// </summary>
        public LinRegressionResults()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CorrelationCoefficient' value.
        /// </summary>
        [DataMember()]
        public double CorrelationCoefficient
        {
            get
            {
                return this._correlationCoefficient;
            }
            set
            {
                if ((this._correlationCoefficient != value))
                {
                    this.OnCorrelationCoefficientChanging(value);
                    this.RaiseDataMemberChanging("CorrelationCoefficient");
                    this.ValidateProperty("CorrelationCoefficient", value);
                    this._correlationCoefficient = value;
                    this.RaiseDataMemberChanged("CorrelationCoefficient");
                    this.OnCorrelationCoefficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionDf' value.
        /// </summary>
        [DataMember()]
        public int RegressionDf
        {
            get
            {
                return this._regressionDf;
            }
            set
            {
                if ((this._regressionDf != value))
                {
                    this.OnRegressionDfChanging(value);
                    this.RaiseDataMemberChanging("RegressionDf");
                    this.ValidateProperty("RegressionDf", value);
                    this._regressionDf = value;
                    this.RaiseDataMemberChanged("RegressionDf");
                    this.OnRegressionDfChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionF' value.
        /// </summary>
        [DataMember()]
        public double RegressionF
        {
            get
            {
                return this._regressionF;
            }
            set
            {
                if ((this._regressionF != value))
                {
                    this.OnRegressionFChanging(value);
                    this.RaiseDataMemberChanging("RegressionF");
                    this.ValidateProperty("RegressionF", value);
                    this._regressionF = value;
                    this.RaiseDataMemberChanged("RegressionF");
                    this.OnRegressionFChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionMeanSquare' value.
        /// </summary>
        [DataMember()]
        public double RegressionMeanSquare
        {
            get
            {
                return this._regressionMeanSquare;
            }
            set
            {
                if ((this._regressionMeanSquare != value))
                {
                    this.OnRegressionMeanSquareChanging(value);
                    this.RaiseDataMemberChanging("RegressionMeanSquare");
                    this.ValidateProperty("RegressionMeanSquare", value);
                    this._regressionMeanSquare = value;
                    this.RaiseDataMemberChanged("RegressionMeanSquare");
                    this.OnRegressionMeanSquareChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegressionSumOfSquares' value.
        /// </summary>
        [DataMember()]
        public double RegressionSumOfSquares
        {
            get
            {
                return this._regressionSumOfSquares;
            }
            set
            {
                if ((this._regressionSumOfSquares != value))
                {
                    this.OnRegressionSumOfSquaresChanging(value);
                    this.RaiseDataMemberChanging("RegressionSumOfSquares");
                    this.ValidateProperty("RegressionSumOfSquares", value);
                    this._regressionSumOfSquares = value;
                    this.RaiseDataMemberChanged("RegressionSumOfSquares");
                    this.OnRegressionSumOfSquaresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResidualsDf' value.
        /// </summary>
        [DataMember()]
        public int ResidualsDf
        {
            get
            {
                return this._residualsDf;
            }
            set
            {
                if ((this._residualsDf != value))
                {
                    this.OnResidualsDfChanging(value);
                    this.RaiseDataMemberChanging("ResidualsDf");
                    this.ValidateProperty("ResidualsDf", value);
                    this._residualsDf = value;
                    this.RaiseDataMemberChanged("ResidualsDf");
                    this.OnResidualsDfChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResidualsMeanSquare' value.
        /// </summary>
        [DataMember()]
        public double ResidualsMeanSquare
        {
            get
            {
                return this._residualsMeanSquare;
            }
            set
            {
                if ((this._residualsMeanSquare != value))
                {
                    this.OnResidualsMeanSquareChanging(value);
                    this.RaiseDataMemberChanging("ResidualsMeanSquare");
                    this.ValidateProperty("ResidualsMeanSquare", value);
                    this._residualsMeanSquare = value;
                    this.RaiseDataMemberChanged("ResidualsMeanSquare");
                    this.OnResidualsMeanSquareChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResidualsSumOfSquares' value.
        /// </summary>
        [DataMember()]
        public double ResidualsSumOfSquares
        {
            get
            {
                return this._residualsSumOfSquares;
            }
            set
            {
                if ((this._residualsSumOfSquares != value))
                {
                    this.OnResidualsSumOfSquaresChanging(value);
                    this.RaiseDataMemberChanging("ResidualsSumOfSquares");
                    this.ValidateProperty("ResidualsSumOfSquares", value);
                    this._residualsSumOfSquares = value;
                    this.RaiseDataMemberChanged("ResidualsSumOfSquares");
                    this.OnResidualsSumOfSquaresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalDf' value.
        /// </summary>
        [DataMember()]
        public int TotalDf
        {
            get
            {
                return this._totalDf;
            }
            set
            {
                if ((this._totalDf != value))
                {
                    this.OnTotalDfChanging(value);
                    this.RaiseDataMemberChanging("TotalDf");
                    this.ValidateProperty("TotalDf", value);
                    this._totalDf = value;
                    this.RaiseDataMemberChanged("TotalDf");
                    this.OnTotalDfChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalSumOfSquares' value.
        /// </summary>
        [DataMember()]
        public double TotalSumOfSquares
        {
            get
            {
                return this._totalSumOfSquares;
            }
            set
            {
                if ((this._totalSumOfSquares != value))
                {
                    this.OnTotalSumOfSquaresChanging(value);
                    this.RaiseDataMemberChanging("TotalSumOfSquares");
                    this.ValidateProperty("TotalSumOfSquares", value);
                    this._totalSumOfSquares = value;
                    this.RaiseDataMemberChanged("TotalSumOfSquares");
                    this.OnTotalSumOfSquaresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Variables' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<LinearRegVariableRow> Variables
        {
            get
            {
                return this._variables;
            }
            set
            {
                if ((this._variables != value))
                {
                    this.OnVariablesChanging(value);
                    this.RaiseDataMemberChanging("Variables");
                    this.ValidateProperty("Variables", value);
                    this._variables = value;
                    this.RaiseDataMemberChanged("Variables");
                    this.OnVariablesChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ListOfStringClass' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class ListOfStringClass : ComplexObject
    {
        
        private IEnumerable<string> _ls;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLsChanging(IEnumerable<string> value);
        partial void OnLsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ListOfStringClass"/> class.
        /// </summary>
        public ListOfStringClass()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Ls' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> Ls
        {
            get
            {
                return this._ls;
            }
            set
            {
                if ((this._ls != value))
                {
                    this.OnLsChanging(value);
                    this.RaiseDataMemberChanging("Ls");
                    this.ValidateProperty("Ls", value);
                    this._ls = value;
                    this.RaiseDataMemberChanged("Ls");
                    this.OnLsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'LogisticRegressionDomainService' DomainService.
    /// </summary>
    public sealed partial class LogisticRegressionDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogisticRegressionDomainContext"/> class.
        /// </summary>
        public LogisticRegressionDomainContext() : 
                this(new WebDomainClient<ILogisticRegressionDomainServiceContract>(new Uri("EWAV-Web-Services-LogisticRegressionDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogisticRegressionDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LogisticRegressionDomainService service URI.</param>
        public LogisticRegressionDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ILogisticRegressionDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogisticRegressionDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public LogisticRegressionDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="LogisticRegressionDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTable' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="customFilter">The value for the 'customFilter' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ListOfStringClass>> GenerateTable(string DataSourceName, string TableName, IEnumerable<string> columnNames, string customFilter, Action<InvokeOperation<List<ListOfStringClass>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            parameters.Add("columnNames", columnNames);
            parameters.Add("customFilter", customFilter);
            this.ValidateMethod("GenerateTable", parameters);
            return ((InvokeOperation<List<ListOfStringClass>>)(this.InvokeOperation("GenerateTable", typeof(List<ListOfStringClass>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTable' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="customFilter">The value for the 'customFilter' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ListOfStringClass>> GenerateTable(string DataSourceName, string TableName, IEnumerable<string> columnNames, string customFilter)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            parameters.Add("columnNames", columnNames);
            parameters.Add("customFilter", customFilter);
            this.ValidateMethod("GenerateTable", parameters);
            return ((InvokeOperation<List<ListOfStringClass>>)(this.InvokeOperation("GenerateTable", typeof(List<ListOfStringClass>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRegressionResult' method of the DomainService.
        /// </summary>
        /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="inputDtoList">The value for the 'inputDtoList' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="customFilter">The value for the 'customFilter' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<LogRegressionResults> GetRegressionResult(GadgetParameters gadgetOptions, IEnumerable<string> columnNames, List<DictionaryDTO> inputDtoList, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, string customFilter, Action<InvokeOperation<LogRegressionResults>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetOptions", gadgetOptions);
            parameters.Add("columnNames", columnNames);
            parameters.Add("inputDtoList", inputDtoList);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            parameters.Add("customFilter", customFilter);
            this.ValidateMethod("GetRegressionResult", parameters);
            return ((InvokeOperation<LogRegressionResults>)(this.InvokeOperation("GetRegressionResult", typeof(LogRegressionResults), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRegressionResult' method of the DomainService.
        /// </summary>
        /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
        /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
        /// <param name="inputDtoList">The value for the 'inputDtoList' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="customFilter">The value for the 'customFilter' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<LogRegressionResults> GetRegressionResult(GadgetParameters gadgetOptions, IEnumerable<string> columnNames, List<DictionaryDTO> inputDtoList, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, string customFilter)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetOptions", gadgetOptions);
            parameters.Add("columnNames", columnNames);
            parameters.Add("inputDtoList", inputDtoList);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            parameters.Add("customFilter", customFilter);
            this.ValidateMethod("GetRegressionResult", parameters);
            return ((InvokeOperation<LogRegressionResults>)(this.InvokeOperation("GetRegressionResult", typeof(LogRegressionResults), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LogisticRegressionDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LogisticRegressionDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILogisticRegressionDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateTable' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
            /// <param name="customFilter">The value for the 'customFilter' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogisticRegressionDomainService/GenerateTableDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogisticRegressionDomainService/GenerateTable", ReplyAction="http://tempuri.org/LogisticRegressionDomainService/GenerateTableResponse")]
            IAsyncResult BeginGenerateTable(string DataSourceName, string TableName, IEnumerable<string> columnNames, string customFilter, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateTable'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateTable' operation.</returns>
            List<ListOfStringClass> EndGenerateTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegressionResult' operation.
            /// </summary>
            /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
            /// <param name="columnNames">The value for the 'columnNames' parameter of this action.</param>
            /// <param name="inputDtoList">The value for the 'inputDtoList' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="customFilter">The value for the 'customFilter' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogisticRegressionDomainService/GetRegressionResultDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogisticRegressionDomainService/GetRegressionResult", ReplyAction="http://tempuri.org/LogisticRegressionDomainService/GetRegressionResultResponse")]
            IAsyncResult BeginGetRegressionResult(GadgetParameters gadgetOptions, IEnumerable<string> columnNames, List<DictionaryDTO> inputDtoList, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, string customFilter, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegressionResult'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegressionResult'.</param>
            /// <returns>The 'LogRegressionResults' returned from the 'GetRegressionResult' operation.</returns>
            LogRegressionResults EndGetRegressionResult(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LogisticRegressionDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LogisticRegressionDomainService/Getrule", ReplyAction="http://tempuri.org/LogisticRegressionDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
        }
        
        internal sealed class LogisticRegressionDomainContextEntityContainer : EntityContainer
        {
            
            public LogisticRegressionDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'LogRegressionResults' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class LogRegressionResults : ComplexObject
    {
        
        private int _casesIncluded;
        
        private string _convergence;
        
        private string _errorMessage;
        
        private double _finalLikelihood;
        
        private int _iterations;
        
        private double _lrdf;
        
        private double _lrp;
        
        private double _lrStatistic;
        
        private double _scoreDF;
        
        private double _scoreP;
        
        private double _scoreStatistic;
        
        private List<VariableRow> _variables;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCasesIncludedChanging(int value);
        partial void OnCasesIncludedChanged();
        partial void OnConvergenceChanging(string value);
        partial void OnConvergenceChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnFinalLikelihoodChanging(double value);
        partial void OnFinalLikelihoodChanged();
        partial void OnIterationsChanging(int value);
        partial void OnIterationsChanged();
        partial void OnLRDFChanging(double value);
        partial void OnLRDFChanged();
        partial void OnLRPChanging(double value);
        partial void OnLRPChanged();
        partial void OnLRStatisticChanging(double value);
        partial void OnLRStatisticChanged();
        partial void OnScoreDFChanging(double value);
        partial void OnScoreDFChanged();
        partial void OnScorePChanging(double value);
        partial void OnScorePChanged();
        partial void OnScoreStatisticChanging(double value);
        partial void OnScoreStatisticChanged();
        partial void OnVariablesChanging(List<VariableRow> value);
        partial void OnVariablesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LogRegressionResults"/> class.
        /// </summary>
        public LogRegressionResults()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CasesIncluded' value.
        /// </summary>
        [DataMember()]
        public int CasesIncluded
        {
            get
            {
                return this._casesIncluded;
            }
            set
            {
                if ((this._casesIncluded != value))
                {
                    this.OnCasesIncludedChanging(value);
                    this.RaiseDataMemberChanging("CasesIncluded");
                    this.ValidateProperty("CasesIncluded", value);
                    this._casesIncluded = value;
                    this.RaiseDataMemberChanged("CasesIncluded");
                    this.OnCasesIncludedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Convergence' value.
        /// </summary>
        [DataMember()]
        public string Convergence
        {
            get
            {
                return this._convergence;
            }
            set
            {
                if ((this._convergence != value))
                {
                    this.OnConvergenceChanging(value);
                    this.RaiseDataMemberChanging("Convergence");
                    this.ValidateProperty("Convergence", value);
                    this._convergence = value;
                    this.RaiseDataMemberChanged("Convergence");
                    this.OnConvergenceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinalLikelihood' value.
        /// </summary>
        [DataMember()]
        public double FinalLikelihood
        {
            get
            {
                return this._finalLikelihood;
            }
            set
            {
                if ((this._finalLikelihood != value))
                {
                    this.OnFinalLikelihoodChanging(value);
                    this.RaiseDataMemberChanging("FinalLikelihood");
                    this.ValidateProperty("FinalLikelihood", value);
                    this._finalLikelihood = value;
                    this.RaiseDataMemberChanged("FinalLikelihood");
                    this.OnFinalLikelihoodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Iterations' value.
        /// </summary>
        [DataMember()]
        public int Iterations
        {
            get
            {
                return this._iterations;
            }
            set
            {
                if ((this._iterations != value))
                {
                    this.OnIterationsChanging(value);
                    this.RaiseDataMemberChanging("Iterations");
                    this.ValidateProperty("Iterations", value);
                    this._iterations = value;
                    this.RaiseDataMemberChanged("Iterations");
                    this.OnIterationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LRDF' value.
        /// </summary>
        [DataMember()]
        public double LRDF
        {
            get
            {
                return this._lrdf;
            }
            set
            {
                if ((this._lrdf != value))
                {
                    this.OnLRDFChanging(value);
                    this.RaiseDataMemberChanging("LRDF");
                    this.ValidateProperty("LRDF", value);
                    this._lrdf = value;
                    this.RaiseDataMemberChanged("LRDF");
                    this.OnLRDFChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LRP' value.
        /// </summary>
        [DataMember()]
        public double LRP
        {
            get
            {
                return this._lrp;
            }
            set
            {
                if ((this._lrp != value))
                {
                    this.OnLRPChanging(value);
                    this.RaiseDataMemberChanging("LRP");
                    this.ValidateProperty("LRP", value);
                    this._lrp = value;
                    this.RaiseDataMemberChanged("LRP");
                    this.OnLRPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LRStatistic' value.
        /// </summary>
        [DataMember()]
        public double LRStatistic
        {
            get
            {
                return this._lrStatistic;
            }
            set
            {
                if ((this._lrStatistic != value))
                {
                    this.OnLRStatisticChanging(value);
                    this.RaiseDataMemberChanging("LRStatistic");
                    this.ValidateProperty("LRStatistic", value);
                    this._lrStatistic = value;
                    this.RaiseDataMemberChanged("LRStatistic");
                    this.OnLRStatisticChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ScoreDF' value.
        /// </summary>
        [DataMember()]
        public double ScoreDF
        {
            get
            {
                return this._scoreDF;
            }
            set
            {
                if ((this._scoreDF != value))
                {
                    this.OnScoreDFChanging(value);
                    this.RaiseDataMemberChanging("ScoreDF");
                    this.ValidateProperty("ScoreDF", value);
                    this._scoreDF = value;
                    this.RaiseDataMemberChanged("ScoreDF");
                    this.OnScoreDFChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ScoreP' value.
        /// </summary>
        [DataMember()]
        public double ScoreP
        {
            get
            {
                return this._scoreP;
            }
            set
            {
                if ((this._scoreP != value))
                {
                    this.OnScorePChanging(value);
                    this.RaiseDataMemberChanging("ScoreP");
                    this.ValidateProperty("ScoreP", value);
                    this._scoreP = value;
                    this.RaiseDataMemberChanged("ScoreP");
                    this.OnScorePChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ScoreStatistic' value.
        /// </summary>
        [DataMember()]
        public double ScoreStatistic
        {
            get
            {
                return this._scoreStatistic;
            }
            set
            {
                if ((this._scoreStatistic != value))
                {
                    this.OnScoreStatisticChanging(value);
                    this.RaiseDataMemberChanging("ScoreStatistic");
                    this.ValidateProperty("ScoreStatistic", value);
                    this._scoreStatistic = value;
                    this.RaiseDataMemberChanged("ScoreStatistic");
                    this.OnScoreStatisticChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Variables' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<VariableRow> Variables
        {
            get
            {
                return this._variables;
            }
            set
            {
                if ((this._variables != value))
                {
                    this.OnVariablesChanging(value);
                    this.RaiseDataMemberChanging("Variables");
                    this.ValidateProperty("Variables", value);
                    this._variables = value;
                    this.RaiseDataMemberChanged("Variables");
                    this.OnVariablesChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MeansDomainService' DomainService.
    /// </summary>
    public sealed partial class MeansDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MeansDomainContext"/> class.
        /// </summary>
        public MeansDomainContext() : 
                this(new WebDomainClient<IMeansDomainServiceContract>(new Uri("EWAV-Web-Services-MeansDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MeansDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MeansDomainService service URI.</param>
        public MeansDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMeansDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MeansDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MeansDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="MeansDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateCrossTabFrequency' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<CrossTabResponseObjectDto>> GenerateCrossTabFrequency(GadgetParameters gadgetParameters, Action<InvokeOperation<List<CrossTabResponseObjectDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            this.ValidateMethod("GenerateCrossTabFrequency", parameters);
            return ((InvokeOperation<List<CrossTabResponseObjectDto>>)(this.InvokeOperation("GenerateCrossTabFrequency", typeof(List<CrossTabResponseObjectDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateCrossTabFrequency' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<CrossTabResponseObjectDto>> GenerateCrossTabFrequency(GadgetParameters gadgetParameters)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            this.ValidateMethod("GenerateCrossTabFrequency", parameters);
            return ((InvokeOperation<List<CrossTabResponseObjectDto>>)(this.InvokeOperation("GenerateCrossTabFrequency", typeof(List<CrossTabResponseObjectDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateCrossTableWithFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<FrequencyAndCrossTable> GenerateCrossTableWithFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<FrequencyAndCrossTable>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateCrossTableWithFrequencyTable", parameters);
            return ((InvokeOperation<FrequencyAndCrossTable>)(this.InvokeOperation("GenerateCrossTableWithFrequencyTable", typeof(FrequencyAndCrossTable), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateCrossTableWithFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<FrequencyAndCrossTable> GenerateCrossTableWithFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateCrossTableWithFrequencyTable", parameters);
            return ((InvokeOperation<FrequencyAndCrossTable>)(this.InvokeOperation("GenerateCrossTableWithFrequencyTable", typeof(FrequencyAndCrossTable), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<List<FrequencyResultData>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MeansDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MeansDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMeansDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateCrossTabFrequency' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/GenerateCrossTabFrequencyDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/GenerateCrossTabFrequency", ReplyAction="http://tempuri.org/MeansDomainService/GenerateCrossTabFrequencyResponse")]
            IAsyncResult BeginGenerateCrossTabFrequency(GadgetParameters gadgetParameters, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateCrossTabFrequency'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateCrossTabFrequency'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateCrossTabFrequency' operation.</returns>
            List<CrossTabResponseObjectDto> EndGenerateCrossTabFrequency(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateCrossTableWithFrequencyTable' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/GenerateCrossTableWithFrequencyTableDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/GenerateCrossTableWithFrequencyTable", ReplyAction="http://tempuri.org/MeansDomainService/GenerateCrossTableWithFrequencyTableRespons" +
                "e")]
            IAsyncResult BeginGenerateCrossTableWithFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateCrossTableWithFrequencyTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateCrossTableWithFrequencyTable'.</param>
            /// <returns>The 'FrequencyAndCrossTable' returned from the 'GenerateCrossTableWithFrequencyTable' operation.</returns>
            FrequencyAndCrossTable EndGenerateCrossTableWithFrequencyTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateFrequencyTable' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/GenerateFrequencyTableDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/GenerateFrequencyTable", ReplyAction="http://tempuri.org/MeansDomainService/GenerateFrequencyTableResponse")]
            IAsyncResult BeginGenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateFrequencyTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateFrequencyTable'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateFrequencyTable' operation.</returns>
            List<FrequencyResultData> EndGenerateFrequencyTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/GetColumns", ReplyAction="http://tempuri.org/MeansDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/Getrule", ReplyAction="http://tempuri.org/MeansDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient4' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/PortClassToClient4DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/PortClassToClient4", ReplyAction="http://tempuri.org/MeansDomainService/PortClassToClient4Response")]
            IAsyncResult BeginPortClassToClient4(GadgetParameters gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient4'.</param>
            void EndPortClassToClient4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient7' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/PortClassToClient7DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/PortClassToClient7", ReplyAction="http://tempuri.org/MeansDomainService/PortClassToClient7Response")]
            IAsyncResult BeginPortClassToClient7(EWAVFrequencyControlDto gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient7'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient7'.</param>
            void EndPortClassToClient7(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient77' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/PortClassToClient77DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/PortClassToClient77", ReplyAction="http://tempuri.org/MeansDomainService/PortClassToClient77Response")]
            IAsyncResult BeginPortClassToClient77(EWAVColumn gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient77'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient77'.</param>
            void EndPortClassToClient77(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient777' operation.
            /// </summary>
            /// <param name="ds">The value for the 'ds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MeansDomainService/PortClassToClient777DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MeansDomainService/PortClassToClient777", ReplyAction="http://tempuri.org/MeansDomainService/PortClassToClient777Response")]
            IAsyncResult BeginPortClassToClient777(DescriptiveStatistics ds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient777'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient777'.</param>
            void EndPortClassToClient777(IAsyncResult result);
        }
        
        internal sealed class MeansDomainContextEntityContainer : EntityContainer
        {
            
            public MeansDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MxNDomainService' DomainService.
    /// </summary>
    public sealed partial class MxNDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MxNDomainContext"/> class.
        /// </summary>
        public MxNDomainContext() : 
                this(new WebDomainClient<IMxNDomainServiceContract>(new Uri("EWAV-Web-Services-MxNDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MxNDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MxNDomainService service URI.</param>
        public MxNDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMxNDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MxNDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MxNDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="MxNDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetupGadget' method of the DomainService.
        /// </summary>
        /// <param name="clientGadgetOptions">The value for the 'clientGadgetOptions' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TwoxTwoAndMxNResultsSet> SetupGadget(GadgetParameters clientGadgetOptions, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, Action<InvokeOperation<TwoxTwoAndMxNResultsSet>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("clientGadgetOptions", clientGadgetOptions);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            this.ValidateMethod("SetupGadget", parameters);
            return ((InvokeOperation<TwoxTwoAndMxNResultsSet>)(this.InvokeOperation("SetupGadget", typeof(TwoxTwoAndMxNResultsSet), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetupGadget' method of the DomainService.
        /// </summary>
        /// <param name="clientGadgetOptions">The value for the 'clientGadgetOptions' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TwoxTwoAndMxNResultsSet> SetupGadget(GadgetParameters clientGadgetOptions, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("clientGadgetOptions", clientGadgetOptions);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            this.ValidateMethod("SetupGadget", parameters);
            return ((InvokeOperation<TwoxTwoAndMxNResultsSet>)(this.InvokeOperation("SetupGadget", typeof(TwoxTwoAndMxNResultsSet), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MxNDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MxNDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMxNDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MxNDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MxNDomainService/GetColumns", ReplyAction="http://tempuri.org/MxNDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MxNDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MxNDomainService/Getrule", ReplyAction="http://tempuri.org/MxNDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetupGadget' operation.
            /// </summary>
            /// <param name="clientGadgetOptions">The value for the 'clientGadgetOptions' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MxNDomainService/SetupGadgetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MxNDomainService/SetupGadget", ReplyAction="http://tempuri.org/MxNDomainService/SetupGadgetResponse")]
            IAsyncResult BeginSetupGadget(GadgetParameters clientGadgetOptions, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetupGadget'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetupGadget'.</param>
            /// <returns>The 'TwoxTwoAndMxNResultsSet' returned from the 'SetupGadget' operation.</returns>
            TwoxTwoAndMxNResultsSet EndSetupGadget(IAsyncResult result);
        }
        
        internal sealed class MxNDomainContextEntityContainer : EntityContainer
        {
            
            public MxNDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'MxNGridRow' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class MxNGridRow : ComplexObject
    {
        
        private string _strataValue;
        
        private int _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnstrataValueChanging(string value);
        partial void OnstrataValueChanged();
        partial void OnwidthChanging(int value);
        partial void OnwidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MxNGridRow"/> class.
        /// </summary>
        public MxNGridRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'strataValue' value.
        /// </summary>
        [DataMember()]
        public string strataValue
        {
            get
            {
                return this._strataValue;
            }
            set
            {
                if ((this._strataValue != value))
                {
                    this.OnstrataValueChanging(value);
                    this.RaiseDataMemberChanging("strataValue");
                    this.ValidateProperty("strataValue", value);
                    this._strataValue = value;
                    this.RaiseDataMemberChanged("strataValue");
                    this.OnstrataValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'width' value.
        /// </summary>
        [DataMember()]
        public int width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnwidthChanging(value);
                    this.RaiseDataMemberChanging("width");
                    this.ValidateProperty("width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("width");
                    this.OnwidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MxNGridSetupParameter' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class MxNGridSetupParameter : ComplexObject
    {
        
        private int _count;
        
        private string _strataVar;
        
        private string _tableName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OncountChanging(int value);
        partial void OncountChanged();
        partial void OnstrataVarChanging(string value);
        partial void OnstrataVarChanged();
        partial void OntableNameChanging(string value);
        partial void OntableNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MxNGridSetupParameter"/> class.
        /// </summary>
        public MxNGridSetupParameter()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'count' value.
        /// </summary>
        [DataMember()]
        public int count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((this._count != value))
                {
                    this.OncountChanging(value);
                    this.RaiseDataMemberChanging("count");
                    this.ValidateProperty("count", value);
                    this._count = value;
                    this.RaiseDataMemberChanged("count");
                    this.OncountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'strataVar' value.
        /// </summary>
        [DataMember()]
        public string strataVar
        {
            get
            {
                return this._strataVar;
            }
            set
            {
                if ((this._strataVar != value))
                {
                    this.OnstrataVarChanging(value);
                    this.RaiseDataMemberChanging("strataVar");
                    this.ValidateProperty("strataVar", value);
                    this._strataVar = value;
                    this.RaiseDataMemberChanged("strataVar");
                    this.OnstrataVarChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tableName' value.
        /// </summary>
        [DataMember()]
        public string tableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OntableNameChanging(value);
                    this.RaiseDataMemberChanging("tableName");
                    this.ValidateProperty("tableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("tableName");
                    this.OntableNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MxNSetTextParameter' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class MxNSetTextParameter : ComplexObject
    {
        
        private string _fontWeight;
        
        private string _strataValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnfontWeightChanging(string value);
        partial void OnfontWeightChanged();
        partial void OnstrataValueChanging(string value);
        partial void OnstrataValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MxNSetTextParameter"/> class.
        /// </summary>
        public MxNSetTextParameter()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'fontWeight' value.
        /// </summary>
        [DataMember()]
        public string fontWeight
        {
            get
            {
                return this._fontWeight;
            }
            set
            {
                if ((this._fontWeight != value))
                {
                    this.OnfontWeightChanging(value);
                    this.RaiseDataMemberChanging("fontWeight");
                    this.ValidateProperty("fontWeight", value);
                    this._fontWeight = value;
                    this.RaiseDataMemberChanged("fontWeight");
                    this.OnfontWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'strataValue' value.
        /// </summary>
        [DataMember()]
        public string strataValue
        {
            get
            {
                return this._strataValue;
            }
            set
            {
                if ((this._strataValue != value))
                {
                    this.OnstrataValueChanging(value);
                    this.RaiseDataMemberChanging("strataValue");
                    this.ValidateProperty("strataValue", value);
                    this._strataValue = value;
                    this.RaiseDataMemberChanged("strataValue");
                    this.OnstrataValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MySingleTableResults' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class MySingleTableResults : ComplexObject
    {
        
        private Nullable<double> _chiSquareMantel2P;
        
        private Nullable<double> _chiSquareMantelVal;
        
        private Nullable<double> _chiSquareUncorrected2P;
        
        private Nullable<double> _chiSquareUncorrectedVal;
        
        private Nullable<double> _chiSquareYates2P;
        
        private Nullable<double> _chiSquareYatesVal;
        
        private string _errorMessage;
        
        private Nullable<double> _fisherExact2P;
        
        private Nullable<double> _fisherExactP;
        
        private Nullable<double> _midP;
        
        private Nullable<double> _oddsRatioEstimate;
        
        private Nullable<double> _oddsRatioLower;
        
        private Nullable<double> _oddsRatioMLEEstimate;
        
        private Nullable<double> _oddsRatioMLEFisherLower;
        
        private Nullable<double> _oddsRatioMLEFisherUpper;
        
        private Nullable<double> _oddsRatioMLEMidPLower;
        
        private Nullable<double> _oddsRatioMLEMidPUpper;
        
        private Nullable<double> _oddsRatioUpper;
        
        private Nullable<double> _riskDifferenceEstimate;
        
        private Nullable<double> _riskDifferenceLower;
        
        private Nullable<double> _riskDifferenceUpper;
        
        private Nullable<double> _riskRatioEstimate;
        
        private Nullable<double> _riskRatioLower;
        
        private Nullable<double> _riskRatioUpper;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChiSquareMantel2PChanging(Nullable<double> value);
        partial void OnChiSquareMantel2PChanged();
        partial void OnChiSquareMantelValChanging(Nullable<double> value);
        partial void OnChiSquareMantelValChanged();
        partial void OnChiSquareUncorrected2PChanging(Nullable<double> value);
        partial void OnChiSquareUncorrected2PChanged();
        partial void OnChiSquareUncorrectedValChanging(Nullable<double> value);
        partial void OnChiSquareUncorrectedValChanged();
        partial void OnChiSquareYates2PChanging(Nullable<double> value);
        partial void OnChiSquareYates2PChanged();
        partial void OnChiSquareYatesValChanging(Nullable<double> value);
        partial void OnChiSquareYatesValChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnFisherExact2PChanging(Nullable<double> value);
        partial void OnFisherExact2PChanged();
        partial void OnFisherExactPChanging(Nullable<double> value);
        partial void OnFisherExactPChanged();
        partial void OnMidPChanging(Nullable<double> value);
        partial void OnMidPChanged();
        partial void OnOddsRatioEstimateChanging(Nullable<double> value);
        partial void OnOddsRatioEstimateChanged();
        partial void OnOddsRatioLowerChanging(Nullable<double> value);
        partial void OnOddsRatioLowerChanged();
        partial void OnOddsRatioMLEEstimateChanging(Nullable<double> value);
        partial void OnOddsRatioMLEEstimateChanged();
        partial void OnOddsRatioMLEFisherLowerChanging(Nullable<double> value);
        partial void OnOddsRatioMLEFisherLowerChanged();
        partial void OnOddsRatioMLEFisherUpperChanging(Nullable<double> value);
        partial void OnOddsRatioMLEFisherUpperChanged();
        partial void OnOddsRatioMLEMidPLowerChanging(Nullable<double> value);
        partial void OnOddsRatioMLEMidPLowerChanged();
        partial void OnOddsRatioMLEMidPUpperChanging(Nullable<double> value);
        partial void OnOddsRatioMLEMidPUpperChanged();
        partial void OnOddsRatioUpperChanging(Nullable<double> value);
        partial void OnOddsRatioUpperChanged();
        partial void OnRiskDifferenceEstimateChanging(Nullable<double> value);
        partial void OnRiskDifferenceEstimateChanged();
        partial void OnRiskDifferenceLowerChanging(Nullable<double> value);
        partial void OnRiskDifferenceLowerChanged();
        partial void OnRiskDifferenceUpperChanging(Nullable<double> value);
        partial void OnRiskDifferenceUpperChanged();
        partial void OnRiskRatioEstimateChanging(Nullable<double> value);
        partial void OnRiskRatioEstimateChanged();
        partial void OnRiskRatioLowerChanging(Nullable<double> value);
        partial void OnRiskRatioLowerChanged();
        partial void OnRiskRatioUpperChanging(Nullable<double> value);
        partial void OnRiskRatioUpperChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MySingleTableResults"/> class.
        /// </summary>
        public MySingleTableResults()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquareMantel2P' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquareMantel2P
        {
            get
            {
                return this._chiSquareMantel2P;
            }
            set
            {
                if ((this._chiSquareMantel2P != value))
                {
                    this.OnChiSquareMantel2PChanging(value);
                    this.RaiseDataMemberChanging("ChiSquareMantel2P");
                    this.ValidateProperty("ChiSquareMantel2P", value);
                    this._chiSquareMantel2P = value;
                    this.RaiseDataMemberChanged("ChiSquareMantel2P");
                    this.OnChiSquareMantel2PChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquareMantelVal' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquareMantelVal
        {
            get
            {
                return this._chiSquareMantelVal;
            }
            set
            {
                if ((this._chiSquareMantelVal != value))
                {
                    this.OnChiSquareMantelValChanging(value);
                    this.RaiseDataMemberChanging("ChiSquareMantelVal");
                    this.ValidateProperty("ChiSquareMantelVal", value);
                    this._chiSquareMantelVal = value;
                    this.RaiseDataMemberChanged("ChiSquareMantelVal");
                    this.OnChiSquareMantelValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquareUncorrected2P' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquareUncorrected2P
        {
            get
            {
                return this._chiSquareUncorrected2P;
            }
            set
            {
                if ((this._chiSquareUncorrected2P != value))
                {
                    this.OnChiSquareUncorrected2PChanging(value);
                    this.RaiseDataMemberChanging("ChiSquareUncorrected2P");
                    this.ValidateProperty("ChiSquareUncorrected2P", value);
                    this._chiSquareUncorrected2P = value;
                    this.RaiseDataMemberChanged("ChiSquareUncorrected2P");
                    this.OnChiSquareUncorrected2PChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquareUncorrectedVal' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquareUncorrectedVal
        {
            get
            {
                return this._chiSquareUncorrectedVal;
            }
            set
            {
                if ((this._chiSquareUncorrectedVal != value))
                {
                    this.OnChiSquareUncorrectedValChanging(value);
                    this.RaiseDataMemberChanging("ChiSquareUncorrectedVal");
                    this.ValidateProperty("ChiSquareUncorrectedVal", value);
                    this._chiSquareUncorrectedVal = value;
                    this.RaiseDataMemberChanged("ChiSquareUncorrectedVal");
                    this.OnChiSquareUncorrectedValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquareYates2P' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquareYates2P
        {
            get
            {
                return this._chiSquareYates2P;
            }
            set
            {
                if ((this._chiSquareYates2P != value))
                {
                    this.OnChiSquareYates2PChanging(value);
                    this.RaiseDataMemberChanging("ChiSquareYates2P");
                    this.ValidateProperty("ChiSquareYates2P", value);
                    this._chiSquareYates2P = value;
                    this.RaiseDataMemberChanged("ChiSquareYates2P");
                    this.OnChiSquareYates2PChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChiSquareYatesVal' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ChiSquareYatesVal
        {
            get
            {
                return this._chiSquareYatesVal;
            }
            set
            {
                if ((this._chiSquareYatesVal != value))
                {
                    this.OnChiSquareYatesValChanging(value);
                    this.RaiseDataMemberChanging("ChiSquareYatesVal");
                    this.ValidateProperty("ChiSquareYatesVal", value);
                    this._chiSquareYatesVal = value;
                    this.RaiseDataMemberChanged("ChiSquareYatesVal");
                    this.OnChiSquareYatesValChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FisherExact2P' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> FisherExact2P
        {
            get
            {
                return this._fisherExact2P;
            }
            set
            {
                if ((this._fisherExact2P != value))
                {
                    this.OnFisherExact2PChanging(value);
                    this.RaiseDataMemberChanging("FisherExact2P");
                    this.ValidateProperty("FisherExact2P", value);
                    this._fisherExact2P = value;
                    this.RaiseDataMemberChanged("FisherExact2P");
                    this.OnFisherExact2PChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FisherExactP' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> FisherExactP
        {
            get
            {
                return this._fisherExactP;
            }
            set
            {
                if ((this._fisherExactP != value))
                {
                    this.OnFisherExactPChanging(value);
                    this.RaiseDataMemberChanging("FisherExactP");
                    this.ValidateProperty("FisherExactP", value);
                    this._fisherExactP = value;
                    this.RaiseDataMemberChanged("FisherExactP");
                    this.OnFisherExactPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidP' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> MidP
        {
            get
            {
                return this._midP;
            }
            set
            {
                if ((this._midP != value))
                {
                    this.OnMidPChanging(value);
                    this.RaiseDataMemberChanging("MidP");
                    this.ValidateProperty("MidP", value);
                    this._midP = value;
                    this.RaiseDataMemberChanged("MidP");
                    this.OnMidPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioEstimate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioEstimate
        {
            get
            {
                return this._oddsRatioEstimate;
            }
            set
            {
                if ((this._oddsRatioEstimate != value))
                {
                    this.OnOddsRatioEstimateChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioEstimate");
                    this.ValidateProperty("OddsRatioEstimate", value);
                    this._oddsRatioEstimate = value;
                    this.RaiseDataMemberChanged("OddsRatioEstimate");
                    this.OnOddsRatioEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioLower' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioLower
        {
            get
            {
                return this._oddsRatioLower;
            }
            set
            {
                if ((this._oddsRatioLower != value))
                {
                    this.OnOddsRatioLowerChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioLower");
                    this.ValidateProperty("OddsRatioLower", value);
                    this._oddsRatioLower = value;
                    this.RaiseDataMemberChanged("OddsRatioLower");
                    this.OnOddsRatioLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioMLEEstimate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioMLEEstimate
        {
            get
            {
                return this._oddsRatioMLEEstimate;
            }
            set
            {
                if ((this._oddsRatioMLEEstimate != value))
                {
                    this.OnOddsRatioMLEEstimateChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioMLEEstimate");
                    this.ValidateProperty("OddsRatioMLEEstimate", value);
                    this._oddsRatioMLEEstimate = value;
                    this.RaiseDataMemberChanged("OddsRatioMLEEstimate");
                    this.OnOddsRatioMLEEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioMLEFisherLower' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioMLEFisherLower
        {
            get
            {
                return this._oddsRatioMLEFisherLower;
            }
            set
            {
                if ((this._oddsRatioMLEFisherLower != value))
                {
                    this.OnOddsRatioMLEFisherLowerChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioMLEFisherLower");
                    this.ValidateProperty("OddsRatioMLEFisherLower", value);
                    this._oddsRatioMLEFisherLower = value;
                    this.RaiseDataMemberChanged("OddsRatioMLEFisherLower");
                    this.OnOddsRatioMLEFisherLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioMLEFisherUpper' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioMLEFisherUpper
        {
            get
            {
                return this._oddsRatioMLEFisherUpper;
            }
            set
            {
                if ((this._oddsRatioMLEFisherUpper != value))
                {
                    this.OnOddsRatioMLEFisherUpperChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioMLEFisherUpper");
                    this.ValidateProperty("OddsRatioMLEFisherUpper", value);
                    this._oddsRatioMLEFisherUpper = value;
                    this.RaiseDataMemberChanged("OddsRatioMLEFisherUpper");
                    this.OnOddsRatioMLEFisherUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioMLEMidPLower' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioMLEMidPLower
        {
            get
            {
                return this._oddsRatioMLEMidPLower;
            }
            set
            {
                if ((this._oddsRatioMLEMidPLower != value))
                {
                    this.OnOddsRatioMLEMidPLowerChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioMLEMidPLower");
                    this.ValidateProperty("OddsRatioMLEMidPLower", value);
                    this._oddsRatioMLEMidPLower = value;
                    this.RaiseDataMemberChanged("OddsRatioMLEMidPLower");
                    this.OnOddsRatioMLEMidPLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioMLEMidPUpper' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioMLEMidPUpper
        {
            get
            {
                return this._oddsRatioMLEMidPUpper;
            }
            set
            {
                if ((this._oddsRatioMLEMidPUpper != value))
                {
                    this.OnOddsRatioMLEMidPUpperChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioMLEMidPUpper");
                    this.ValidateProperty("OddsRatioMLEMidPUpper", value);
                    this._oddsRatioMLEMidPUpper = value;
                    this.RaiseDataMemberChanged("OddsRatioMLEMidPUpper");
                    this.OnOddsRatioMLEMidPUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatioUpper' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> OddsRatioUpper
        {
            get
            {
                return this._oddsRatioUpper;
            }
            set
            {
                if ((this._oddsRatioUpper != value))
                {
                    this.OnOddsRatioUpperChanging(value);
                    this.RaiseDataMemberChanging("OddsRatioUpper");
                    this.ValidateProperty("OddsRatioUpper", value);
                    this._oddsRatioUpper = value;
                    this.RaiseDataMemberChanged("OddsRatioUpper");
                    this.OnOddsRatioUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskDifferenceEstimate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> RiskDifferenceEstimate
        {
            get
            {
                return this._riskDifferenceEstimate;
            }
            set
            {
                if ((this._riskDifferenceEstimate != value))
                {
                    this.OnRiskDifferenceEstimateChanging(value);
                    this.RaiseDataMemberChanging("RiskDifferenceEstimate");
                    this.ValidateProperty("RiskDifferenceEstimate", value);
                    this._riskDifferenceEstimate = value;
                    this.RaiseDataMemberChanged("RiskDifferenceEstimate");
                    this.OnRiskDifferenceEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskDifferenceLower' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> RiskDifferenceLower
        {
            get
            {
                return this._riskDifferenceLower;
            }
            set
            {
                if ((this._riskDifferenceLower != value))
                {
                    this.OnRiskDifferenceLowerChanging(value);
                    this.RaiseDataMemberChanging("RiskDifferenceLower");
                    this.ValidateProperty("RiskDifferenceLower", value);
                    this._riskDifferenceLower = value;
                    this.RaiseDataMemberChanged("RiskDifferenceLower");
                    this.OnRiskDifferenceLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskDifferenceUpper' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> RiskDifferenceUpper
        {
            get
            {
                return this._riskDifferenceUpper;
            }
            set
            {
                if ((this._riskDifferenceUpper != value))
                {
                    this.OnRiskDifferenceUpperChanging(value);
                    this.RaiseDataMemberChanging("RiskDifferenceUpper");
                    this.ValidateProperty("RiskDifferenceUpper", value);
                    this._riskDifferenceUpper = value;
                    this.RaiseDataMemberChanged("RiskDifferenceUpper");
                    this.OnRiskDifferenceUpperChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskRatioEstimate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> RiskRatioEstimate
        {
            get
            {
                return this._riskRatioEstimate;
            }
            set
            {
                if ((this._riskRatioEstimate != value))
                {
                    this.OnRiskRatioEstimateChanging(value);
                    this.RaiseDataMemberChanging("RiskRatioEstimate");
                    this.ValidateProperty("RiskRatioEstimate", value);
                    this._riskRatioEstimate = value;
                    this.RaiseDataMemberChanged("RiskRatioEstimate");
                    this.OnRiskRatioEstimateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskRatioLower' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> RiskRatioLower
        {
            get
            {
                return this._riskRatioLower;
            }
            set
            {
                if ((this._riskRatioLower != value))
                {
                    this.OnRiskRatioLowerChanging(value);
                    this.RaiseDataMemberChanging("RiskRatioLower");
                    this.ValidateProperty("RiskRatioLower", value);
                    this._riskRatioLower = value;
                    this.RaiseDataMemberChanged("RiskRatioLower");
                    this.OnRiskRatioLowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RiskRatioUpper' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> RiskRatioUpper
        {
            get
            {
                return this._riskRatioUpper;
            }
            set
            {
                if ((this._riskRatioUpper != value))
                {
                    this.OnRiskRatioUpperChanging(value);
                    this.RaiseDataMemberChanging("RiskRatioUpper");
                    this.ValidateProperty("RiskRatioUpper", value);
                    this._riskRatioUpper = value;
                    this.RaiseDataMemberChanged("RiskRatioUpper");
                    this.OnRiskRatioUpperChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'MyString' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class MyString : ComplexObject
    {
        
        private string _varName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnVarNameChanging(string value);
        partial void OnVarNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyString"/> class.
        /// </summary>
        public MyString()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'VarName' value.
        /// </summary>
        [DataMember()]
        public string VarName
        {
            get
            {
                return this._varName;
            }
            set
            {
                if ((this._varName != value))
                {
                    this.OnVarNameChanging(value);
                    this.RaiseDataMemberChanging("VarName");
                    this.ValidateProperty("VarName", value);
                    this._varName = value;
                    this.RaiseDataMemberChanged("VarName");
                    this.OnVarNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'NumericDataValue' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class NumericDataValue : ComplexObject
    {
        
        private decimal _dependentValue;
        
        private decimal _independentValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDependentValueChanging(decimal value);
        partial void OnDependentValueChanged();
        partial void OnIndependentValueChanging(decimal value);
        partial void OnIndependentValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NumericDataValue"/> class.
        /// </summary>
        public NumericDataValue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DependentValue' value.
        /// </summary>
        [DataMember()]
        public decimal DependentValue
        {
            get
            {
                return this._dependentValue;
            }
            set
            {
                if ((this._dependentValue != value))
                {
                    this.OnDependentValueChanging(value);
                    this.RaiseDataMemberChanging("DependentValue");
                    this.ValidateProperty("DependentValue", value);
                    this._dependentValue = value;
                    this.RaiseDataMemberChanged("DependentValue");
                    this.OnDependentValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndependentValue' value.
        /// </summary>
        [DataMember()]
        public decimal IndependentValue
        {
            get
            {
                return this._independentValue;
            }
            set
            {
                if ((this._independentValue != value))
                {
                    this.OnIndependentValueChanging(value);
                    this.RaiseDataMemberChanging("IndependentValue");
                    this.ValidateProperty("IndependentValue", value);
                    this._independentValue = value;
                    this.RaiseDataMemberChanged("IndependentValue");
                    this.OnIndependentValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'OrganizationDomainService' DomainService.
    /// </summary>
    public sealed partial class OrganizationDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationDomainContext"/> class.
        /// </summary>
        public OrganizationDomainContext() : 
                this(new WebDomainClient<IOrganizationDomainServiceContract>(new Uri("EWAV-Web-Services-OrganizationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The OrganizationDomainService service URI.</param>
        public OrganizationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IOrganizationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public OrganizationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddOrganization' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> AddOrganization(UserOrganizationDto dto, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("AddOrganization", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("AddOrganization", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddOrganization' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> AddOrganization(UserOrganizationDto dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("AddOrganization", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("AddOrganization", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAllOrganizations' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<OrganizationDto>> ReadAllOrganizations(Action<InvokeOperation<List<OrganizationDto>>> callback, object userState)
        {
            this.ValidateMethod("ReadAllOrganizations", null);
            return ((InvokeOperation<List<OrganizationDto>>)(this.InvokeOperation("ReadAllOrganizations", typeof(List<OrganizationDto>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAllOrganizations' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<OrganizationDto>> ReadAllOrganizations()
        {
            this.ValidateMethod("ReadAllOrganizations", null);
            return ((InvokeOperation<List<OrganizationDto>>)(this.InvokeOperation("ReadAllOrganizations", typeof(List<OrganizationDto>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrganization' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrganizationDto> ReadOrganization(Action<InvokeOperation<OrganizationDto>> callback, object userState)
        {
            this.ValidateMethod("ReadOrganization", null);
            return ((InvokeOperation<OrganizationDto>)(this.InvokeOperation("ReadOrganization", typeof(OrganizationDto), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrganization' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrganizationDto> ReadOrganization()
        {
            this.ValidateMethod("ReadOrganization", null);
            return ((InvokeOperation<OrganizationDto>)(this.InvokeOperation("ReadOrganization", typeof(OrganizationDto), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveOrganization' method of the DomainService.
        /// </summary>
        /// <param name="organzationId">The value for the 'organzationId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveOrganization(int organzationId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("organzationId", organzationId);
            this.ValidateMethod("RemoveOrganization", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveOrganization", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveOrganization' method of the DomainService.
        /// </summary>
        /// <param name="organzationId">The value for the 'organzationId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveOrganization(int organzationId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("organzationId", organzationId);
            this.ValidateMethod("RemoveOrganization", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveOrganization", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateOrganization' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateOrganization(OrganizationDto dto, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("UpdateOrganization", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateOrganization", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateOrganization' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateOrganization(OrganizationDto dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("UpdateOrganization", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateOrganization", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OrganizationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'OrganizationDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IOrganizationDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'AddOrganization' operation.
            /// </summary>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/AddOrganizationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/AddOrganization", ReplyAction="http://tempuri.org/OrganizationDomainService/AddOrganizationResponse")]
            IAsyncResult BeginAddOrganization(UserOrganizationDto dto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddOrganization'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddOrganization'.</param>
            /// <returns>The 'Int32' returned from the 'AddOrganization' operation.</returns>
            int EndAddOrganization(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadAllOrganizations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/ReadAllOrganizationsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/ReadAllOrganizations", ReplyAction="http://tempuri.org/OrganizationDomainService/ReadAllOrganizationsResponse")]
            IAsyncResult BeginReadAllOrganizations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadAllOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadAllOrganizations'.</param>
            /// <returns>The 'List`1' returned from the 'ReadAllOrganizations' operation.</returns>
            List<OrganizationDto> EndReadAllOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrganization' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/ReadOrganizationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/ReadOrganization", ReplyAction="http://tempuri.org/OrganizationDomainService/ReadOrganizationResponse")]
            IAsyncResult BeginReadOrganization(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrganization'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrganization'.</param>
            /// <returns>The 'OrganizationDto' returned from the 'ReadOrganization' operation.</returns>
            OrganizationDto EndReadOrganization(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RemoveOrganization' operation.
            /// </summary>
            /// <param name="organzationId">The value for the 'organzationId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/RemoveOrganizationDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/RemoveOrganization", ReplyAction="http://tempuri.org/OrganizationDomainService/RemoveOrganizationResponse")]
            IAsyncResult BeginRemoveOrganization(int organzationId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRemoveOrganization'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRemoveOrganization'.</param>
            /// <returns>The 'Boolean' returned from the 'RemoveOrganization' operation.</returns>
            bool EndRemoveOrganization(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateOrganization' operation.
            /// </summary>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/UpdateOrganizationDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/UpdateOrganization", ReplyAction="http://tempuri.org/OrganizationDomainService/UpdateOrganizationResponse")]
            IAsyncResult BeginUpdateOrganization(OrganizationDto dto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateOrganization'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateOrganization'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateOrganization' operation.</returns>
            bool EndUpdateOrganization(IAsyncResult result);
        }
        
        internal sealed class OrganizationDomainContextEntityContainer : EntityContainer
        {
            
            public OrganizationDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'ScatterDataDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class ScatterDataDTO : ComplexObject
    {
        
        private List<NumericDataValue> _dataValues;
        
        private NumericDataValue _maxValue;
        
        private NumericDataValue _minValue;
        
        private LinRegressionResults _regresResults;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataValuesChanging(List<NumericDataValue> value);
        partial void OnDataValuesChanged();
        partial void OnMaxValueChanging(NumericDataValue value);
        partial void OnMaxValueChanged();
        partial void OnMinValueChanging(NumericDataValue value);
        partial void OnMinValueChanged();
        partial void OnRegresResultsChanging(LinRegressionResults value);
        partial void OnRegresResultsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScatterDataDTO"/> class.
        /// </summary>
        public ScatterDataDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DataValues' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<NumericDataValue> DataValues
        {
            get
            {
                return this._dataValues;
            }
            set
            {
                if ((this._dataValues != value))
                {
                    this.OnDataValuesChanging(value);
                    this.RaiseDataMemberChanging("DataValues");
                    this.ValidateProperty("DataValues", value);
                    this._dataValues = value;
                    this.RaiseDataMemberChanged("DataValues");
                    this.OnDataValuesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxValue' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public NumericDataValue MaxValue
        {
            get
            {
                return this._maxValue;
            }
            set
            {
                if ((this._maxValue != value))
                {
                    this.OnMaxValueChanging(value);
                    this.RaiseDataMemberChanging("MaxValue");
                    this.ValidateProperty("MaxValue", value);
                    this._maxValue = value;
                    this.RaiseDataMemberChanged("MaxValue");
                    this.OnMaxValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinValue' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public NumericDataValue MinValue
        {
            get
            {
                return this._minValue;
            }
            set
            {
                if ((this._minValue != value))
                {
                    this.OnMinValueChanging(value);
                    this.RaiseDataMemberChanging("MinValue");
                    this.ValidateProperty("MinValue", value);
                    this._minValue = value;
                    this.RaiseDataMemberChanged("MinValue");
                    this.OnMinValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegresResults' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public LinRegressionResults RegresResults
        {
            get
            {
                return this._regresResults;
            }
            set
            {
                if ((this._regresResults != value))
                {
                    this.OnRegresResultsChanging(value);
                    this.RaiseDataMemberChanging("RegresResults");
                    this.ValidateProperty("RegresResults", value);
                    this._regresResults = value;
                    this.RaiseDataMemberChanged("RegresResults");
                    this.OnRegresResultsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ScatterDomainService' DomainService.
    /// </summary>
    public sealed partial class ScatterDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScatterDomainContext"/> class.
        /// </summary>
        public ScatterDomainContext() : 
                this(new WebDomainClient<IScatterDomainServiceContract>(new Uri("EWAV-Web-Services-ScatterDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScatterDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ScatterDomainService service URI.</param>
        public ScatterDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IScatterDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScatterDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ScatterDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="ScatterDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ScatterDataDTO> GenerateTable(GadgetParameters gadgetOptions, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<ScatterDataDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetOptions", gadgetOptions);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateTable", parameters);
            return ((InvokeOperation<ScatterDataDTO>)(this.InvokeOperation("GenerateTable", typeof(ScatterDataDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ScatterDataDTO> GenerateTable(GadgetParameters gadgetOptions, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetOptions", gadgetOptions);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateTable", parameters);
            return ((InvokeOperation<ScatterDataDTO>)(this.InvokeOperation("GenerateTable", typeof(ScatterDataDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortThisToClient' method of the DomainService.
        /// </summary>
        /// <param name="rr">The value for the 'rr' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortThisToClient(LinearRegressionResults rr, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rr", rr);
            this.ValidateMethod("PortThisToClient", parameters);
            return this.InvokeOperation("PortThisToClient", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortThisToClient' method of the DomainService.
        /// </summary>
        /// <param name="rr">The value for the 'rr' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortThisToClient(LinearRegressionResults rr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rr", rr);
            this.ValidateMethod("PortThisToClient", parameters);
            return this.InvokeOperation("PortThisToClient", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ScatterDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ScatterDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IScatterDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateTable' operation.
            /// </summary>
            /// <param name="gadgetOptions">The value for the 'gadgetOptions' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScatterDomainService/GenerateTableDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScatterDomainService/GenerateTable", ReplyAction="http://tempuri.org/ScatterDomainService/GenerateTableResponse")]
            IAsyncResult BeginGenerateTable(GadgetParameters gadgetOptions, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateTable'.</param>
            /// <returns>The 'ScatterDataDTO' returned from the 'GenerateTable' operation.</returns>
            ScatterDataDTO EndGenerateTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScatterDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScatterDomainService/GetColumns", ReplyAction="http://tempuri.org/ScatterDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScatterDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScatterDomainService/Getrule", ReplyAction="http://tempuri.org/ScatterDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortThisToClient' operation.
            /// </summary>
            /// <param name="rr">The value for the 'rr' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScatterDomainService/PortThisToClientDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScatterDomainService/PortThisToClient", ReplyAction="http://tempuri.org/ScatterDomainService/PortThisToClientResponse")]
            IAsyncResult BeginPortThisToClient(LinearRegressionResults rr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortThisToClient'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortThisToClient'.</param>
            void EndPortThisToClient(IAsyncResult result);
        }
        
        internal sealed class ScatterDomainContextEntityContainer : EntityContainer
        {
            
            public ScatterDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'StatCalcDomainService' DomainService.
    /// </summary>
    public sealed partial class StatCalcDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StatCalcDomainContext"/> class.
        /// </summary>
        public StatCalcDomainContext() : 
                this(new WebDomainClient<IStatCalcDomainServiceContract>(new Uri("EWAV-Web-Services-StatCalcDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StatCalcDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The StatCalcDomainService service URI.</param>
        public StatCalcDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IStatCalcDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StatCalcDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public StatCalcDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ConvertToDictionaryWithBoolKey' method of the DomainService.
        /// </summary>
        /// <param name="dtoList">The value for the 'dtoList' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ConvertToDictionaryWithBoolKey(List<DictionaryDTO> dtoList, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dtoList", dtoList);
            this.ValidateMethod("ConvertToDictionaryWithBoolKey", parameters);
            return this.InvokeOperation("ConvertToDictionaryWithBoolKey", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ConvertToDictionaryWithBoolKey' method of the DomainService.
        /// </summary>
        /// <param name="dtoList">The value for the 'dtoList' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ConvertToDictionaryWithBoolKey(List<DictionaryDTO> dtoList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dtoList", dtoList);
            this.ValidateMethod("ConvertToDictionaryWithBoolKey", parameters);
            return this.InvokeOperation("ConvertToDictionaryWithBoolKey", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ConvertToDictionaryWithDoubleKey' method of the DomainService.
        /// </summary>
        /// <param name="dtoList">The value for the 'dtoList' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ConvertToDictionaryWithDoubleKey(List<DictionaryDTO> dtoList, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dtoList", dtoList);
            this.ValidateMethod("ConvertToDictionaryWithDoubleKey", parameters);
            return this.InvokeOperation("ConvertToDictionaryWithDoubleKey", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ConvertToDictionaryWithDoubleKey' method of the DomainService.
        /// </summary>
        /// <param name="dtoList">The value for the 'dtoList' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ConvertToDictionaryWithDoubleKey(List<DictionaryDTO> dtoList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dtoList", dtoList);
            this.ValidateMethod("ConvertToDictionaryWithDoubleKey", parameters);
            return this.InvokeOperation("ConvertToDictionaryWithDoubleKey", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateSigTable' method of the DomainService.
        /// </summary>
        /// <param name="ytVal">The value for the 'ytVal' parameter of this action.</param>
        /// <param name="ntVal">The value for the 'ntVal' parameter of this action.</param>
        /// <param name="tyVal">The value for the 'tyVal' parameter of this action.</param>
        /// <param name="tnVal">The value for the 'tnVal' parameter of this action.</param>
        /// <param name="yyVal">The value for the 'yyVal' parameter of this action.</param>
        /// <param name="ynVal">The value for the 'ynVal' parameter of this action.</param>
        /// <param name="nyVal">The value for the 'nyVal' parameter of this action.</param>
        /// <param name="nnVal">The value for the 'nnVal' parameter of this action.</param>
        /// <param name="strataActive">The value for the 'strataActive' parameter of this action.</param>
        /// <param name="strataVals">The value for the 'strataVals' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<StatCalcDTO> GenerateSigTable(int ytVal, int ntVal, int tyVal, int tnVal, int yyVal, int ynVal, int nyVal, int nnVal, List<DictionaryDTO> strataActive, List<DictionaryDTO> strataVals, Action<InvokeOperation<StatCalcDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ytVal", ytVal);
            parameters.Add("ntVal", ntVal);
            parameters.Add("tyVal", tyVal);
            parameters.Add("tnVal", tnVal);
            parameters.Add("yyVal", yyVal);
            parameters.Add("ynVal", ynVal);
            parameters.Add("nyVal", nyVal);
            parameters.Add("nnVal", nnVal);
            parameters.Add("strataActive", strataActive);
            parameters.Add("strataVals", strataVals);
            this.ValidateMethod("GenerateSigTable", parameters);
            return ((InvokeOperation<StatCalcDTO>)(this.InvokeOperation("GenerateSigTable", typeof(StatCalcDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateSigTable' method of the DomainService.
        /// </summary>
        /// <param name="ytVal">The value for the 'ytVal' parameter of this action.</param>
        /// <param name="ntVal">The value for the 'ntVal' parameter of this action.</param>
        /// <param name="tyVal">The value for the 'tyVal' parameter of this action.</param>
        /// <param name="tnVal">The value for the 'tnVal' parameter of this action.</param>
        /// <param name="yyVal">The value for the 'yyVal' parameter of this action.</param>
        /// <param name="ynVal">The value for the 'ynVal' parameter of this action.</param>
        /// <param name="nyVal">The value for the 'nyVal' parameter of this action.</param>
        /// <param name="nnVal">The value for the 'nnVal' parameter of this action.</param>
        /// <param name="strataActive">The value for the 'strataActive' parameter of this action.</param>
        /// <param name="strataVals">The value for the 'strataVals' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<StatCalcDTO> GenerateSigTable(int ytVal, int ntVal, int tyVal, int tnVal, int yyVal, int ynVal, int nyVal, int nnVal, List<DictionaryDTO> strataActive, List<DictionaryDTO> strataVals)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ytVal", ytVal);
            parameters.Add("ntVal", ntVal);
            parameters.Add("tyVal", tyVal);
            parameters.Add("tnVal", tnVal);
            parameters.Add("yyVal", yyVal);
            parameters.Add("ynVal", ynVal);
            parameters.Add("nyVal", nyVal);
            parameters.Add("nnVal", nnVal);
            parameters.Add("strataActive", strataActive);
            parameters.Add("strataVals", strataVals);
            this.ValidateMethod("GenerateSigTable", parameters);
            return ((InvokeOperation<StatCalcDTO>)(this.InvokeOperation("GenerateSigTable", typeof(StatCalcDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InitializeStatCalc' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InitializeStatCalc(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("InitializeStatCalc", null);
            return this.InvokeOperation("InitializeStatCalc", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InitializeStatCalc' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InitializeStatCalc()
        {
            this.ValidateMethod("InitializeStatCalc", null);
            return this.InvokeOperation("InitializeStatCalc", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient1' method of the DomainService.
        /// </summary>
        /// <param name="e">The value for the 'e' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient1(DictionaryDTO e, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("e", e);
            this.ValidateMethod("PortClassToClient1", parameters);
            return this.InvokeOperation("PortClassToClient1", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient1' method of the DomainService.
        /// </summary>
        /// <param name="e">The value for the 'e' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient1(DictionaryDTO e)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("e", e);
            this.ValidateMethod("PortClassToClient1", parameters);
            return this.InvokeOperation("PortClassToClient1", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(GadgetParameters gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient7' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient7(EWAVFrequencyControlDto gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient7", parameters);
            return this.InvokeOperation("PortClassToClient7", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient77' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient77(EWAVColumn gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient77", parameters);
            return this.InvokeOperation("PortClassToClient77", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient777' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient777(DescriptiveStatistics ds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("PortClassToClient777", parameters);
            return this.InvokeOperation("PortClassToClient777", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient79' method of the DomainService.
        /// </summary>
        /// <param name="aa">The value for the 'aa' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient79(EWAVConnectionString aa)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aa", aa);
            this.ValidateMethod("PortClassToClient79", parameters);
            return this.InvokeOperation("PortClassToClient79", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new StatCalcDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'StatCalcDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IStatCalcDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'ConvertToDictionaryWithBoolKey' operation.
            /// </summary>
            /// <param name="dtoList">The value for the 'dtoList' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/ConvertToDictionaryWithBoolKeyDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/ConvertToDictionaryWithBoolKey", ReplyAction="http://tempuri.org/StatCalcDomainService/ConvertToDictionaryWithBoolKeyResponse")]
            IAsyncResult BeginConvertToDictionaryWithBoolKey(List<DictionaryDTO> dtoList, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginConvertToDictionaryWithBoolKey'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginConvertToDictionaryWithBoolKey'.</param>
            void EndConvertToDictionaryWithBoolKey(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ConvertToDictionaryWithDoubleKey' operation.
            /// </summary>
            /// <param name="dtoList">The value for the 'dtoList' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/ConvertToDictionaryWithDoubleKeyDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/ConvertToDictionaryWithDoubleKey", ReplyAction="http://tempuri.org/StatCalcDomainService/ConvertToDictionaryWithDoubleKeyResponse" +
                "")]
            IAsyncResult BeginConvertToDictionaryWithDoubleKey(List<DictionaryDTO> dtoList, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginConvertToDictionaryWithDoubleKey'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginConvertToDictionaryWithDoubleKey'.</param>
            void EndConvertToDictionaryWithDoubleKey(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateSigTable' operation.
            /// </summary>
            /// <param name="ytVal">The value for the 'ytVal' parameter of this action.</param>
            /// <param name="ntVal">The value for the 'ntVal' parameter of this action.</param>
            /// <param name="tyVal">The value for the 'tyVal' parameter of this action.</param>
            /// <param name="tnVal">The value for the 'tnVal' parameter of this action.</param>
            /// <param name="yyVal">The value for the 'yyVal' parameter of this action.</param>
            /// <param name="ynVal">The value for the 'ynVal' parameter of this action.</param>
            /// <param name="nyVal">The value for the 'nyVal' parameter of this action.</param>
            /// <param name="nnVal">The value for the 'nnVal' parameter of this action.</param>
            /// <param name="strataActive">The value for the 'strataActive' parameter of this action.</param>
            /// <param name="strataVals">The value for the 'strataVals' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/GenerateSigTableDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/GenerateSigTable", ReplyAction="http://tempuri.org/StatCalcDomainService/GenerateSigTableResponse")]
            IAsyncResult BeginGenerateSigTable(int ytVal, int ntVal, int tyVal, int tnVal, int yyVal, int ynVal, int nyVal, int nnVal, List<DictionaryDTO> strataActive, List<DictionaryDTO> strataVals, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateSigTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateSigTable'.</param>
            /// <returns>The 'StatCalcDTO' returned from the 'GenerateSigTable' operation.</returns>
            StatCalcDTO EndGenerateSigTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InitializeStatCalc' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/InitializeStatCalcDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/InitializeStatCalc", ReplyAction="http://tempuri.org/StatCalcDomainService/InitializeStatCalcResponse")]
            IAsyncResult BeginInitializeStatCalc(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInitializeStatCalc'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInitializeStatCalc'.</param>
            void EndInitializeStatCalc(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient1' operation.
            /// </summary>
            /// <param name="e">The value for the 'e' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/PortClassToClient1DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/PortClassToClient1", ReplyAction="http://tempuri.org/StatCalcDomainService/PortClassToClient1Response")]
            IAsyncResult BeginPortClassToClient1(DictionaryDTO e, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient1'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient1'.</param>
            void EndPortClassToClient1(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient4' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/PortClassToClient4DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/PortClassToClient4", ReplyAction="http://tempuri.org/StatCalcDomainService/PortClassToClient4Response")]
            IAsyncResult BeginPortClassToClient4(GadgetParameters gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient4'.</param>
            void EndPortClassToClient4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient7' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/PortClassToClient7DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/PortClassToClient7", ReplyAction="http://tempuri.org/StatCalcDomainService/PortClassToClient7Response")]
            IAsyncResult BeginPortClassToClient7(EWAVFrequencyControlDto gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient7'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient7'.</param>
            void EndPortClassToClient7(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient77' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/PortClassToClient77DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/PortClassToClient77", ReplyAction="http://tempuri.org/StatCalcDomainService/PortClassToClient77Response")]
            IAsyncResult BeginPortClassToClient77(EWAVColumn gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient77'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient77'.</param>
            void EndPortClassToClient77(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient777' operation.
            /// </summary>
            /// <param name="ds">The value for the 'ds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/PortClassToClient777DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/PortClassToClient777", ReplyAction="http://tempuri.org/StatCalcDomainService/PortClassToClient777Response")]
            IAsyncResult BeginPortClassToClient777(DescriptiveStatistics ds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient777'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient777'.</param>
            void EndPortClassToClient777(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient79' operation.
            /// </summary>
            /// <param name="aa">The value for the 'aa' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StatCalcDomainService/PortClassToClient79DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StatCalcDomainService/PortClassToClient79", ReplyAction="http://tempuri.org/StatCalcDomainService/PortClassToClient79Response")]
            IAsyncResult BeginPortClassToClient79(EWAVConnectionString aa, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient79'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient79'.</param>
            void EndPortClassToClient79(IAsyncResult result);
        }
        
        internal sealed class StatCalcDomainContextEntityContainer : EntityContainer
        {
            
            public StatCalcDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'StatCalcDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class StatCalcDTO : ComplexObject
    {
        
        private List<MyString> _results;
        
        private MySingleTableResults _singleResults;
        
        private StatCalc2x2 _textBoxesData;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnResultsChanging(List<MyString> value);
        partial void OnResultsChanged();
        partial void OnSingleResultsChanging(MySingleTableResults value);
        partial void OnSingleResultsChanged();
        partial void OnTextBoxesDataChanging(StatCalc2x2 value);
        partial void OnTextBoxesDataChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StatCalcDTO"/> class.
        /// </summary>
        public StatCalcDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Results' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> Results
        {
            get
            {
                return this._results;
            }
            set
            {
                if ((this._results != value))
                {
                    this.OnResultsChanging(value);
                    this.RaiseDataMemberChanging("Results");
                    this.ValidateProperty("Results", value);
                    this._results = value;
                    this.RaiseDataMemberChanged("Results");
                    this.OnResultsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SingleResults' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public MySingleTableResults SingleResults
        {
            get
            {
                return this._singleResults;
            }
            set
            {
                if ((this._singleResults != value))
                {
                    this.OnSingleResultsChanging(value);
                    this.RaiseDataMemberChanging("SingleResults");
                    this.ValidateProperty("SingleResults", value);
                    this._singleResults = value;
                    this.RaiseDataMemberChanged("SingleResults");
                    this.OnSingleResultsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TextBoxesData' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public StatCalc2x2 TextBoxesData
        {
            get
            {
                return this._textBoxesData;
            }
            set
            {
                if ((this._textBoxesData != value))
                {
                    this.OnTextBoxesDataChanging(value);
                    this.RaiseDataMemberChanging("TextBoxesData");
                    this.ValidateProperty("TextBoxesData", value);
                    this._textBoxesData = value;
                    this.RaiseDataMemberChanged("TextBoxesData");
                    this.OnTextBoxesDataChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'TwoByTwoDomainService' DomainService.
    /// </summary>
    public sealed partial class TwoByTwoDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoByTwoDomainContext"/> class.
        /// </summary>
        public TwoByTwoDomainContext() : 
                this(new WebDomainClient<ITwoByTwoDomainServiceContract>(new Uri("EWAV-Web-Services-TwoByTwoDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoByTwoDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The TwoByTwoDomainService service URI.</param>
        public TwoByTwoDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ITwoByTwoDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoByTwoDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public TwoByTwoDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="TwoByTwoDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName, Action<InvokeOperation<List<EWAVColumn>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetColumns' method of the DomainService.
        /// </summary>
        /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<EWAVColumn>> GetColumns(string DataSourceName, string TableName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DataSourceName", DataSourceName);
            parameters.Add("TableName", TableName);
            this.ValidateMethod("GetColumns", parameters);
            return ((InvokeOperation<List<EWAVColumn>>)(this.InvokeOperation("GetColumns", typeof(List<EWAVColumn>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(TwoxTwoTableDTO gp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient4' method of the DomainService.
        /// </summary>
        /// <param name="gp">The value for the 'gp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient4(TwoxTwoTableDTO gp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gp", gp);
            this.ValidateMethod("PortClassToClient4", parameters);
            return this.InvokeOperation("PortClassToClient4", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient441' method of the DomainService.
        /// </summary>
        /// <param name="dtc">The value for the 'dtc' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient441(DatatableBag dtc, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dtc", dtc);
            this.ValidateMethod("PortClassToClient441", parameters);
            return this.InvokeOperation("PortClassToClient441", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PortClassToClient441' method of the DomainService.
        /// </summary>
        /// <param name="dtc">The value for the 'dtc' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PortClassToClient441(DatatableBag dtc)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dtc", dtc);
            this.ValidateMethod("PortClassToClient441", parameters);
            return this.InvokeOperation("PortClassToClient441", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetupGadget' method of the DomainService.
        /// </summary>
        /// <param name="clientGadgetOptions">The value for the 'clientGadgetOptions' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TwoxTwoAndMxNResultsSet> SetupGadget(GadgetParameters clientGadgetOptions, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, Action<InvokeOperation<TwoxTwoAndMxNResultsSet>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("clientGadgetOptions", clientGadgetOptions);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            this.ValidateMethod("SetupGadget", parameters);
            return ((InvokeOperation<TwoxTwoAndMxNResultsSet>)(this.InvokeOperation("SetupGadget", typeof(TwoxTwoAndMxNResultsSet), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetupGadget' method of the DomainService.
        /// </summary>
        /// <param name="clientGadgetOptions">The value for the 'clientGadgetOptions' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<TwoxTwoAndMxNResultsSet> SetupGadget(GadgetParameters clientGadgetOptions, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("clientGadgetOptions", clientGadgetOptions);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            this.ValidateMethod("SetupGadget", parameters);
            return ((InvokeOperation<TwoxTwoAndMxNResultsSet>)(this.InvokeOperation("SetupGadget", typeof(TwoxTwoAndMxNResultsSet), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new TwoByTwoDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'TwoByTwoDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ITwoByTwoDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetColumns' operation.
            /// </summary>
            /// <param name="DataSourceName">The value for the 'DataSourceName' parameter of this action.</param>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TwoByTwoDomainService/GetColumnsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TwoByTwoDomainService/GetColumns", ReplyAction="http://tempuri.org/TwoByTwoDomainService/GetColumnsResponse")]
            IAsyncResult BeginGetColumns(string DataSourceName, string TableName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetColumns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetColumns'.</param>
            /// <returns>The 'List`1' returned from the 'GetColumns' operation.</returns>
            List<EWAVColumn> EndGetColumns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TwoByTwoDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TwoByTwoDomainService/Getrule", ReplyAction="http://tempuri.org/TwoByTwoDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient4' operation.
            /// </summary>
            /// <param name="gp">The value for the 'gp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TwoByTwoDomainService/PortClassToClient4DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TwoByTwoDomainService/PortClassToClient4", ReplyAction="http://tempuri.org/TwoByTwoDomainService/PortClassToClient4Response")]
            IAsyncResult BeginPortClassToClient4(TwoxTwoTableDTO gp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient4'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient4'.</param>
            void EndPortClassToClient4(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PortClassToClient441' operation.
            /// </summary>
            /// <param name="dtc">The value for the 'dtc' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TwoByTwoDomainService/PortClassToClient441DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TwoByTwoDomainService/PortClassToClient441", ReplyAction="http://tempuri.org/TwoByTwoDomainService/PortClassToClient441Response")]
            IAsyncResult BeginPortClassToClient441(DatatableBag dtc, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPortClassToClient441'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPortClassToClient441'.</param>
            void EndPortClassToClient441(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetupGadget' operation.
            /// </summary>
            /// <param name="clientGadgetOptions">The value for the 'clientGadgetOptions' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TwoByTwoDomainService/SetupGadgetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TwoByTwoDomainService/SetupGadget", ReplyAction="http://tempuri.org/TwoByTwoDomainService/SetupGadgetResponse")]
            IAsyncResult BeginSetupGadget(GadgetParameters clientGadgetOptions, List<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetupGadget'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetupGadget'.</param>
            /// <returns>The 'TwoxTwoAndMxNResultsSet' returned from the 'SetupGadget' operation.</returns>
            TwoxTwoAndMxNResultsSet EndSetupGadget(IAsyncResult result);
        }
        
        internal sealed class TwoByTwoDomainContextEntityContainer : EntityContainer
        {
            
            public TwoByTwoDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'TwoxTwoAndMxNResultsSet' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class TwoxTwoAndMxNResultsSet : ComplexObject
    {
        
        private IEnumerable<string> _allColumns;
        
        private string[] _columnNamesAsArray;
        
        private DatatableBag _datatableBag;
        
        private DatatableBag[] _datatableBagArray;
        
        private List<MyString> _errors;
        
        private List<MyString> _errorTypes;
        
        private bool _exceededMaxColumns;
        
        private bool _exceededMaxRows;
        
        private List<DescriptiveStatistics> _freqResultsDescriptiveStatistics;
        
        private GridCells _gridCells;
        
        private int _gridRowHeight;
        
        private bool _is2x2;
        
        private List<MxNGridSetupParameter> _mxNGridCells;
        
        private List<MxNGridRow> _mxNGridRows;
        
        private List<MxNSetTextParameter> _mxNSetTextParameters;
        
        private int _rowCount;
        
        private string _strataValue;
        
        private string _tableHeading;
        
        private string _tableName;
        
        private int[] _totals;
        
        private TwoxTwoTableDTO _twoxTwoTableDTO;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllColumnsChanging(IEnumerable<string> value);
        partial void OnAllColumnsChanged();
        partial void OnColumnNamesAsArrayChanging(string[] value);
        partial void OnColumnNamesAsArrayChanged();
        partial void OnDatatableBagChanging(DatatableBag value);
        partial void OnDatatableBagChanged();
        partial void OnDatatableBagArrayChanging(DatatableBag[] value);
        partial void OnDatatableBagArrayChanged();
        partial void OnErrorsChanging(List<MyString> value);
        partial void OnErrorsChanged();
        partial void OnErrorTypesChanging(List<MyString> value);
        partial void OnErrorTypesChanged();
        partial void OnexceededMaxColumnsChanging(bool value);
        partial void OnexceededMaxColumnsChanged();
        partial void OnexceededMaxRowsChanging(bool value);
        partial void OnexceededMaxRowsChanged();
        partial void OnFreqResultsDescriptiveStatisticsChanging(List<DescriptiveStatistics> value);
        partial void OnFreqResultsDescriptiveStatisticsChanged();
        partial void OnGridCellsChanging(GridCells value);
        partial void OnGridCellsChanged();
        partial void OnGridRowHeightChanging(int value);
        partial void OnGridRowHeightChanged();
        partial void OnIs2x2Changing(bool value);
        partial void OnIs2x2Changed();
        partial void OnMxNGridCellsChanging(List<MxNGridSetupParameter> value);
        partial void OnMxNGridCellsChanged();
        partial void OnMxNGridRowsChanging(List<MxNGridRow> value);
        partial void OnMxNGridRowsChanged();
        partial void OnMxNSetTextParametersChanging(List<MxNSetTextParameter> value);
        partial void OnMxNSetTextParametersChanged();
        partial void OnRowCountChanging(int value);
        partial void OnRowCountChanged();
        partial void OnstrataValueChanging(string value);
        partial void OnstrataValueChanged();
        partial void OntableHeadingChanging(string value);
        partial void OntableHeadingChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnTotalsChanging(int[] value);
        partial void OnTotalsChanged();
        partial void OnTwoxTwoTableDTOChanging(TwoxTwoTableDTO value);
        partial void OnTwoxTwoTableDTOChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoxTwoAndMxNResultsSet"/> class.
        /// </summary>
        public TwoxTwoAndMxNResultsSet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllColumns' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public IEnumerable<string> AllColumns
        {
            get
            {
                return this._allColumns;
            }
            set
            {
                if ((this._allColumns != value))
                {
                    this.OnAllColumnsChanging(value);
                    this.ValidateProperty("AllColumns", value);
                    this._allColumns = value;
                    this.RaisePropertyChanged("AllColumns");
                    this.OnAllColumnsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ColumnNamesAsArray' value.
        /// </summary>
        [DataMember()]
        public string[] ColumnNamesAsArray
        {
            get
            {
                return this._columnNamesAsArray;
            }
            set
            {
                if ((this._columnNamesAsArray != value))
                {
                    this.OnColumnNamesAsArrayChanging(value);
                    this.RaiseDataMemberChanging("ColumnNamesAsArray");
                    this.ValidateProperty("ColumnNamesAsArray", value);
                    this._columnNamesAsArray = value;
                    this.RaiseDataMemberChanged("ColumnNamesAsArray");
                    this.OnColumnNamesAsArrayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatatableBag' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false)]
        [ReadOnly(true)]
        public DatatableBag DatatableBag
        {
            get
            {
                return this._datatableBag;
            }
            set
            {
                if ((this._datatableBag != value))
                {
                    this.OnDatatableBagChanging(value);
                    this.ValidateProperty("DatatableBag", value);
                    this._datatableBag = value;
                    this.RaisePropertyChanged("DatatableBag");
                    this.OnDatatableBagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatatableBagArray' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public DatatableBag[] DatatableBagArray
        {
            get
            {
                return this._datatableBagArray;
            }
            set
            {
                if ((this._datatableBagArray != value))
                {
                    this.OnDatatableBagArrayChanging(value);
                    this.RaiseDataMemberChanging("DatatableBagArray");
                    this.ValidateProperty("DatatableBagArray", value);
                    this._datatableBagArray = value;
                    this.RaiseDataMemberChanged("DatatableBagArray");
                    this.OnDatatableBagArrayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Errors' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> Errors
        {
            get
            {
                return this._errors;
            }
            set
            {
                if ((this._errors != value))
                {
                    this.OnErrorsChanging(value);
                    this.RaiseDataMemberChanging("Errors");
                    this.ValidateProperty("Errors", value);
                    this._errors = value;
                    this.RaiseDataMemberChanged("Errors");
                    this.OnErrorsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorTypes' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MyString> ErrorTypes
        {
            get
            {
                return this._errorTypes;
            }
            set
            {
                if ((this._errorTypes != value))
                {
                    this.OnErrorTypesChanging(value);
                    this.RaiseDataMemberChanging("ErrorTypes");
                    this.ValidateProperty("ErrorTypes", value);
                    this._errorTypes = value;
                    this.RaiseDataMemberChanged("ErrorTypes");
                    this.OnErrorTypesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'exceededMaxColumns' value.
        /// </summary>
        [DataMember()]
        public bool exceededMaxColumns
        {
            get
            {
                return this._exceededMaxColumns;
            }
            set
            {
                if ((this._exceededMaxColumns != value))
                {
                    this.OnexceededMaxColumnsChanging(value);
                    this.RaiseDataMemberChanging("exceededMaxColumns");
                    this.ValidateProperty("exceededMaxColumns", value);
                    this._exceededMaxColumns = value;
                    this.RaiseDataMemberChanged("exceededMaxColumns");
                    this.OnexceededMaxColumnsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'exceededMaxRows' value.
        /// </summary>
        [DataMember()]
        public bool exceededMaxRows
        {
            get
            {
                return this._exceededMaxRows;
            }
            set
            {
                if ((this._exceededMaxRows != value))
                {
                    this.OnexceededMaxRowsChanging(value);
                    this.RaiseDataMemberChanging("exceededMaxRows");
                    this.ValidateProperty("exceededMaxRows", value);
                    this._exceededMaxRows = value;
                    this.RaiseDataMemberChanged("exceededMaxRows");
                    this.OnexceededMaxRowsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FreqResultsDescriptiveStatistics' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DescriptiveStatistics> FreqResultsDescriptiveStatistics
        {
            get
            {
                return this._freqResultsDescriptiveStatistics;
            }
            set
            {
                if ((this._freqResultsDescriptiveStatistics != value))
                {
                    this.OnFreqResultsDescriptiveStatisticsChanging(value);
                    this.RaiseDataMemberChanging("FreqResultsDescriptiveStatistics");
                    this.ValidateProperty("FreqResultsDescriptiveStatistics", value);
                    this._freqResultsDescriptiveStatistics = value;
                    this.RaiseDataMemberChanged("FreqResultsDescriptiveStatistics");
                    this.OnFreqResultsDescriptiveStatisticsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GridCells' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public GridCells GridCells
        {
            get
            {
                return this._gridCells;
            }
            set
            {
                if ((this._gridCells != value))
                {
                    this.OnGridCellsChanging(value);
                    this.RaiseDataMemberChanging("GridCells");
                    this.ValidateProperty("GridCells", value);
                    this._gridCells = value;
                    this.RaiseDataMemberChanged("GridCells");
                    this.OnGridCellsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GridRowHeight' value.
        /// </summary>
        [DataMember()]
        public int GridRowHeight
        {
            get
            {
                return this._gridRowHeight;
            }
            set
            {
                if ((this._gridRowHeight != value))
                {
                    this.OnGridRowHeightChanging(value);
                    this.RaiseDataMemberChanging("GridRowHeight");
                    this.ValidateProperty("GridRowHeight", value);
                    this._gridRowHeight = value;
                    this.RaiseDataMemberChanged("GridRowHeight");
                    this.OnGridRowHeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Is2x2' value.
        /// </summary>
        [DataMember()]
        public bool Is2x2
        {
            get
            {
                return this._is2x2;
            }
            set
            {
                if ((this._is2x2 != value))
                {
                    this.OnIs2x2Changing(value);
                    this.RaiseDataMemberChanging("Is2x2");
                    this.ValidateProperty("Is2x2", value);
                    this._is2x2 = value;
                    this.RaiseDataMemberChanged("Is2x2");
                    this.OnIs2x2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MxNGridCells' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MxNGridSetupParameter> MxNGridCells
        {
            get
            {
                return this._mxNGridCells;
            }
            set
            {
                if ((this._mxNGridCells != value))
                {
                    this.OnMxNGridCellsChanging(value);
                    this.RaiseDataMemberChanging("MxNGridCells");
                    this.ValidateProperty("MxNGridCells", value);
                    this._mxNGridCells = value;
                    this.RaiseDataMemberChanged("MxNGridCells");
                    this.OnMxNGridCellsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MxNGridRows' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MxNGridRow> MxNGridRows
        {
            get
            {
                return this._mxNGridRows;
            }
            set
            {
                if ((this._mxNGridRows != value))
                {
                    this.OnMxNGridRowsChanging(value);
                    this.RaiseDataMemberChanging("MxNGridRows");
                    this.ValidateProperty("MxNGridRows", value);
                    this._mxNGridRows = value;
                    this.RaiseDataMemberChanged("MxNGridRows");
                    this.OnMxNGridRowsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MxNSetTextParameters' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<MxNSetTextParameter> MxNSetTextParameters
        {
            get
            {
                return this._mxNSetTextParameters;
            }
            set
            {
                if ((this._mxNSetTextParameters != value))
                {
                    this.OnMxNSetTextParametersChanging(value);
                    this.RaiseDataMemberChanging("MxNSetTextParameters");
                    this.ValidateProperty("MxNSetTextParameters", value);
                    this._mxNSetTextParameters = value;
                    this.RaiseDataMemberChanged("MxNSetTextParameters");
                    this.OnMxNSetTextParametersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowCount' value.
        /// </summary>
        [DataMember()]
        public int RowCount
        {
            get
            {
                return this._rowCount;
            }
            set
            {
                if ((this._rowCount != value))
                {
                    this.OnRowCountChanging(value);
                    this.RaiseDataMemberChanging("RowCount");
                    this.ValidateProperty("RowCount", value);
                    this._rowCount = value;
                    this.RaiseDataMemberChanged("RowCount");
                    this.OnRowCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'strataValue' value.
        /// </summary>
        [DataMember()]
        public string strataValue
        {
            get
            {
                return this._strataValue;
            }
            set
            {
                if ((this._strataValue != value))
                {
                    this.OnstrataValueChanging(value);
                    this.RaiseDataMemberChanging("strataValue");
                    this.ValidateProperty("strataValue", value);
                    this._strataValue = value;
                    this.RaiseDataMemberChanged("strataValue");
                    this.OnstrataValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tableHeading' value.
        /// </summary>
        [DataMember()]
        public string tableHeading
        {
            get
            {
                return this._tableHeading;
            }
            set
            {
                if ((this._tableHeading != value))
                {
                    this.OntableHeadingChanging(value);
                    this.RaiseDataMemberChanging("tableHeading");
                    this.ValidateProperty("tableHeading", value);
                    this._tableHeading = value;
                    this.RaiseDataMemberChanged("tableHeading");
                    this.OntableHeadingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Totals' value.
        /// </summary>
        [DataMember()]
        public int[] Totals
        {
            get
            {
                return this._totals;
            }
            set
            {
                if ((this._totals != value))
                {
                    this.OnTotalsChanging(value);
                    this.RaiseDataMemberChanging("Totals");
                    this.ValidateProperty("Totals", value);
                    this._totals = value;
                    this.RaiseDataMemberChanged("Totals");
                    this.OnTotalsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TwoxTwoTableDTO' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public TwoxTwoTableDTO TwoxTwoTableDTO
        {
            get
            {
                return this._twoxTwoTableDTO;
            }
            set
            {
                if ((this._twoxTwoTableDTO != value))
                {
                    this.OnTwoxTwoTableDTOChanging(value);
                    this.RaiseDataMemberChanging("TwoxTwoTableDTO");
                    this.ValidateProperty("TwoxTwoTableDTO", value);
                    this._twoxTwoTableDTO = value;
                    this.RaiseDataMemberChanged("TwoxTwoTableDTO");
                    this.OnTwoxTwoTableDTOChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'TwoxTwoTableDTO' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class TwoxTwoTableDTO : ComplexObject
    {
        
        private string _columnName1;
        
        private string _columnName2;
        
        private int _nn;
        
        private int _ny;
        
        private string _tableName;
        
        private int _yn;
        
        private int _yy;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnColumnName1Changing(string value);
        partial void OnColumnName1Changed();
        partial void OnColumnName2Changing(string value);
        partial void OnColumnName2Changed();
        partial void OnNnChanging(int value);
        partial void OnNnChanged();
        partial void OnNyChanging(int value);
        partial void OnNyChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnYnChanging(int value);
        partial void OnYnChanged();
        partial void OnYyChanging(int value);
        partial void OnYyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoxTwoTableDTO"/> class.
        /// </summary>
        public TwoxTwoTableDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ColumnName1' value.
        /// </summary>
        [DataMember()]
        public string ColumnName1
        {
            get
            {
                return this._columnName1;
            }
            set
            {
                if ((this._columnName1 != value))
                {
                    this.OnColumnName1Changing(value);
                    this.RaiseDataMemberChanging("ColumnName1");
                    this.ValidateProperty("ColumnName1", value);
                    this._columnName1 = value;
                    this.RaiseDataMemberChanged("ColumnName1");
                    this.OnColumnName1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ColumnName2' value.
        /// </summary>
        [DataMember()]
        public string ColumnName2
        {
            get
            {
                return this._columnName2;
            }
            set
            {
                if ((this._columnName2 != value))
                {
                    this.OnColumnName2Changing(value);
                    this.RaiseDataMemberChanging("ColumnName2");
                    this.ValidateProperty("ColumnName2", value);
                    this._columnName2 = value;
                    this.RaiseDataMemberChanged("ColumnName2");
                    this.OnColumnName2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nn' value.
        /// </summary>
        [DataMember()]
        public int Nn
        {
            get
            {
                return this._nn;
            }
            set
            {
                if ((this._nn != value))
                {
                    this.OnNnChanging(value);
                    this.RaiseDataMemberChanging("Nn");
                    this.ValidateProperty("Nn", value);
                    this._nn = value;
                    this.RaiseDataMemberChanged("Nn");
                    this.OnNnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ny' value.
        /// </summary>
        [DataMember()]
        public int Ny
        {
            get
            {
                return this._ny;
            }
            set
            {
                if ((this._ny != value))
                {
                    this.OnNyChanging(value);
                    this.RaiseDataMemberChanging("Ny");
                    this.ValidateProperty("Ny", value);
                    this._ny = value;
                    this.RaiseDataMemberChanged("Ny");
                    this.OnNyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Yn' value.
        /// </summary>
        [DataMember()]
        public int Yn
        {
            get
            {
                return this._yn;
            }
            set
            {
                if ((this._yn != value))
                {
                    this.OnYnChanging(value);
                    this.RaiseDataMemberChanging("Yn");
                    this.ValidateProperty("Yn", value);
                    this._yn = value;
                    this.RaiseDataMemberChanged("Yn");
                    this.OnYnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Yy' value.
        /// </summary>
        [DataMember()]
        public int Yy
        {
            get
            {
                return this._yy;
            }
            set
            {
                if ((this._yy != value))
                {
                    this.OnYyChanging(value);
                    this.RaiseDataMemberChanging("Yy");
                    this.ValidateProperty("Yy", value);
                    this._yy = value;
                    this.RaiseDataMemberChanged("Yy");
                    this.OnYyChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserDomainService' DomainService.
    /// </summary>
    public sealed partial class UserDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDomainContext"/> class.
        /// </summary>
        public UserDomainContext() : 
                this(new WebDomainClient<IUserDomainServiceContract>(new Uri("EWAV-Web-Services-UserDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserDomainService service URI.</param>
        public UserDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EditUser' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> EditUser(UserOrganizationDto dto, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("EditUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("EditUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EditUser' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> EditUser(UserOrganizationDto dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("EditUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("EditUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ForgotPassword' method of the DomainService.
        /// </summary>
        /// <param name="email">The value for the 'email' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ForgotPassword(string email, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("email", email);
            this.ValidateMethod("ForgotPassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ForgotPassword", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ForgotPassword' method of the DomainService.
        /// </summary>
        /// <param name="email">The value for the 'email' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ForgotPassword(string email)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("email", email);
            this.ValidateMethod("ForgotPassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ForgotPassword", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateUser' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> GenerateUser(UserOrganizationDto dto, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("GenerateUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("GenerateUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateUser' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> GenerateUser(UserOrganizationDto dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("GenerateUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("GenerateUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetClientUserName' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetClientUserName(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetClientUserName", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetClientUserName", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetClientUserName' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetClientUserName()
        {
            this.ValidateMethod("GetClientUserName", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetClientUserName", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserForAuthentication' method of the DomainService.
        /// </summary>
        /// <param name="userDTO">The value for the 'userDTO' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> GetUserForAuthentication(UserDTO userDTO, Action<InvokeOperation<UserDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userDTO", userDTO);
            this.ValidateMethod("GetUserForAuthentication", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("GetUserForAuthentication", typeof(UserDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserForAuthentication' method of the DomainService.
        /// </summary>
        /// <param name="userDTO">The value for the 'userDTO' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> GetUserForAuthentication(UserDTO userDTO)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userDTO", userDTO);
            this.ValidateMethod("GetUserForAuthentication", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("GetUserForAuthentication", typeof(UserDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadUser' method of the DomainService.
        /// </summary>
        /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> LoadUser(string UserName, Action<InvokeOperation<UserDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserName", UserName);
            this.ValidateMethod("LoadUser", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("LoadUser", typeof(UserDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadUser' method of the DomainService.
        /// </summary>
        /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> LoadUser(string UserName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserName", UserName);
            this.ValidateMethod("LoadUser", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("LoadUser", typeof(UserDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadUserFromActivedirectory' method of the DomainService.
        /// </summary>
        /// <param name="DomainName">The value for the 'DomainName' parameter of this action.</param>
        /// <param name="EmailAddress">The value for the 'EmailAddress' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> LoadUserFromActivedirectory(string DomainName, string EmailAddress, Action<InvokeOperation<UserDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DomainName", DomainName);
            parameters.Add("EmailAddress", EmailAddress);
            this.ValidateMethod("LoadUserFromActivedirectory", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("LoadUserFromActivedirectory", typeof(UserDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadUserFromActivedirectory' method of the DomainService.
        /// </summary>
        /// <param name="DomainName">The value for the 'DomainName' parameter of this action.</param>
        /// <param name="EmailAddress">The value for the 'EmailAddress' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> LoadUserFromActivedirectory(string DomainName, string EmailAddress)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DomainName", DomainName);
            parameters.Add("EmailAddress", EmailAddress);
            this.ValidateMethod("LoadUserFromActivedirectory", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("LoadUserFromActivedirectory", typeof(UserDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAllOrgsForUser' method of the DomainService.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<OrganizationDto>> ReadAllOrgsForUser(int userID, Action<InvokeOperation<List<OrganizationDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("ReadAllOrgsForUser", parameters);
            return ((InvokeOperation<List<OrganizationDto>>)(this.InvokeOperation("ReadAllOrgsForUser", typeof(List<OrganizationDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAllOrgsForUser' method of the DomainService.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<OrganizationDto>> ReadAllOrgsForUser(int userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("ReadAllOrgsForUser", parameters);
            return ((InvokeOperation<List<OrganizationDto>>)(this.InvokeOperation("ReadAllOrgsForUser", typeof(List<OrganizationDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAssociatedDatasources' method of the DomainService.
        /// </summary>
        /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
        /// <param name="OrganizationId">The value for the 'OrganizationId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<DatasourceDto>> ReadAssociatedDatasources(int UserId, int OrganizationId, Action<InvokeOperation<List<DatasourceDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserId", UserId);
            parameters.Add("OrganizationId", OrganizationId);
            this.ValidateMethod("ReadAssociatedDatasources", parameters);
            return ((InvokeOperation<List<DatasourceDto>>)(this.InvokeOperation("ReadAssociatedDatasources", typeof(List<DatasourceDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAssociatedDatasources' method of the DomainService.
        /// </summary>
        /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
        /// <param name="OrganizationId">The value for the 'OrganizationId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<DatasourceDto>> ReadAssociatedDatasources(int UserId, int OrganizationId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserId", UserId);
            parameters.Add("OrganizationId", OrganizationId);
            this.ValidateMethod("ReadAssociatedDatasources", parameters);
            return ((InvokeOperation<List<DatasourceDto>>)(this.InvokeOperation("ReadAssociatedDatasources", typeof(List<DatasourceDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadPasswordRules' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<PasswordRulesDTO> ReadPasswordRules(Action<InvokeOperation<PasswordRulesDTO>> callback, object userState)
        {
            this.ValidateMethod("ReadPasswordRules", null);
            return ((InvokeOperation<PasswordRulesDTO>)(this.InvokeOperation("ReadPasswordRules", typeof(PasswordRulesDTO), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadPasswordRules' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<PasswordRulesDTO> ReadPasswordRules()
        {
            this.ValidateMethod("ReadPasswordRules", null);
            return ((InvokeOperation<PasswordRulesDTO>)(this.InvokeOperation("ReadPasswordRules", typeof(PasswordRulesDTO), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadUser' method of the DomainService.
        /// </summary>
        /// <param name="roleid">The value for the 'roleid' parameter of this action.</param>
        /// <param name="organizationId">The value for the 'organizationId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<UserDTO>> ReadUser(int roleid, int organizationId, Action<InvokeOperation<List<UserDTO>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleid", roleid);
            parameters.Add("organizationId", organizationId);
            this.ValidateMethod("ReadUser", parameters);
            return ((InvokeOperation<List<UserDTO>>)(this.InvokeOperation("ReadUser", typeof(List<UserDTO>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadUser' method of the DomainService.
        /// </summary>
        /// <param name="roleid">The value for the 'roleid' parameter of this action.</param>
        /// <param name="organizationId">The value for the 'organizationId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<UserDTO>> ReadUser(int roleid, int organizationId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleid", roleid);
            parameters.Add("organizationId", organizationId);
            this.ValidateMethod("ReadUser", parameters);
            return ((InvokeOperation<List<UserDTO>>)(this.InvokeOperation("ReadUser", typeof(List<UserDTO>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadUserByUserName' method of the DomainService.
        /// </summary>
        /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
        /// <param name="OrganizationId">The value for the 'OrganizationId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> ReadUserByUserName(string UserName, int OrganizationId, Action<InvokeOperation<UserDTO>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserName", UserName);
            parameters.Add("OrganizationId", OrganizationId);
            this.ValidateMethod("ReadUserByUserName", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("ReadUserByUserName", typeof(UserDTO), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadUserByUserName' method of the DomainService.
        /// </summary>
        /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
        /// <param name="OrganizationId">The value for the 'OrganizationId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserDTO> ReadUserByUserName(string UserName, int OrganizationId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserName", UserName);
            parameters.Add("OrganizationId", OrganizationId);
            this.ValidateMethod("ReadUserByUserName", parameters);
            return ((InvokeOperation<UserDTO>)(this.InvokeOperation("ReadUserByUserName", typeof(UserDTO), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadUserNamesFromEWAV' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ReadUserNamesFromEWAV(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("ReadUserNamesFromEWAV", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("ReadUserNamesFromEWAV", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadUserNamesFromEWAV' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ReadUserNamesFromEWAV()
        {
            this.ValidateMethod("ReadUserNamesFromEWAV", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("ReadUserNamesFromEWAV", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveUser' method of the DomainService.
        /// </summary>
        /// <param name="userId">The value for the 'userId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveUser(int userId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("RemoveUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveUser' method of the DomainService.
        /// </summary>
        /// <param name="userId">The value for the 'userId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveUser(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("RemoveUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'userOrganizationDto' method of the DomainService.
        /// </summary>
        /// <param name="userOrganizationDto">The value for the 'userOrganizationDto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<OrganizationDto>> userOrganizationDto(List<OrganizationDto> userOrganizationDto, Action<InvokeOperation<List<OrganizationDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userOrganizationDto", userOrganizationDto);
            this.ValidateMethod("userOrganizationDto", parameters);
            return ((InvokeOperation<List<OrganizationDto>>)(this.InvokeOperation("userOrganizationDto", typeof(List<OrganizationDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'userOrganizationDto' method of the DomainService.
        /// </summary>
        /// <param name="userOrganizationDto">The value for the 'userOrganizationDto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<OrganizationDto>> userOrganizationDto(List<OrganizationDto> userOrganizationDto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userOrganizationDto", userOrganizationDto);
            this.ValidateMethod("userOrganizationDto", parameters);
            return ((InvokeOperation<List<OrganizationDto>>)(this.InvokeOperation("userOrganizationDto", typeof(List<OrganizationDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'EditUser' operation.
            /// </summary>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/EditUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/EditUser", ReplyAction="http://tempuri.org/UserDomainService/EditUserResponse")]
            IAsyncResult BeginEditUser(UserOrganizationDto dto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEditUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEditUser'.</param>
            /// <returns>The 'Boolean' returned from the 'EditUser' operation.</returns>
            bool EndEditUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ForgotPassword' operation.
            /// </summary>
            /// <param name="email">The value for the 'email' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ForgotPasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ForgotPassword", ReplyAction="http://tempuri.org/UserDomainService/ForgotPasswordResponse")]
            IAsyncResult BeginForgotPassword(string email, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginForgotPassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginForgotPassword'.</param>
            /// <returns>The 'Boolean' returned from the 'ForgotPassword' operation.</returns>
            bool EndForgotPassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateUser' operation.
            /// </summary>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/GenerateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/GenerateUser", ReplyAction="http://tempuri.org/UserDomainService/GenerateUserResponse")]
            IAsyncResult BeginGenerateUser(UserOrganizationDto dto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateUser'.</param>
            /// <returns>The 'Boolean' returned from the 'GenerateUser' operation.</returns>
            bool EndGenerateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClientUserName' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/GetClientUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/GetClientUserName", ReplyAction="http://tempuri.org/UserDomainService/GetClientUserNameResponse")]
            IAsyncResult BeginGetClientUserName(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClientUserName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClientUserName'.</param>
            /// <returns>The 'String' returned from the 'GetClientUserName' operation.</returns>
            string EndGetClientUserName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserForAuthentication' operation.
            /// </summary>
            /// <param name="userDTO">The value for the 'userDTO' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/GetUserForAuthenticationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/GetUserForAuthentication", ReplyAction="http://tempuri.org/UserDomainService/GetUserForAuthenticationResponse")]
            IAsyncResult BeginGetUserForAuthentication(UserDTO userDTO, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserForAuthentication'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserForAuthentication'.</param>
            /// <returns>The 'UserDTO' returned from the 'GetUserForAuthentication' operation.</returns>
            UserDTO EndGetUserForAuthentication(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadUser' operation.
            /// </summary>
            /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/LoadUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/LoadUser", ReplyAction="http://tempuri.org/UserDomainService/LoadUserResponse")]
            IAsyncResult BeginLoadUser(string UserName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadUser'.</param>
            /// <returns>The 'UserDTO' returned from the 'LoadUser' operation.</returns>
            UserDTO EndLoadUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadUserFromActivedirectory' operation.
            /// </summary>
            /// <param name="DomainName">The value for the 'DomainName' parameter of this action.</param>
            /// <param name="EmailAddress">The value for the 'EmailAddress' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/LoadUserFromActivedirectoryDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/LoadUserFromActivedirectory", ReplyAction="http://tempuri.org/UserDomainService/LoadUserFromActivedirectoryResponse")]
            IAsyncResult BeginLoadUserFromActivedirectory(string DomainName, string EmailAddress, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadUserFromActivedirectory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadUserFromActivedirectory'.</param>
            /// <returns>The 'UserDTO' returned from the 'LoadUserFromActivedirectory' operation.</returns>
            UserDTO EndLoadUserFromActivedirectory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadAllOrgsForUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ReadAllOrgsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ReadAllOrgsForUser", ReplyAction="http://tempuri.org/UserDomainService/ReadAllOrgsForUserResponse")]
            IAsyncResult BeginReadAllOrgsForUser(int userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadAllOrgsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadAllOrgsForUser'.</param>
            /// <returns>The 'List`1' returned from the 'ReadAllOrgsForUser' operation.</returns>
            List<OrganizationDto> EndReadAllOrgsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadAssociatedDatasources' operation.
            /// </summary>
            /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
            /// <param name="OrganizationId">The value for the 'OrganizationId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ReadAssociatedDatasourcesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ReadAssociatedDatasources", ReplyAction="http://tempuri.org/UserDomainService/ReadAssociatedDatasourcesResponse")]
            IAsyncResult BeginReadAssociatedDatasources(int UserId, int OrganizationId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadAssociatedDatasources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadAssociatedDatasources'.</param>
            /// <returns>The 'List`1' returned from the 'ReadAssociatedDatasources' operation.</returns>
            List<DatasourceDto> EndReadAssociatedDatasources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadPasswordRules' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ReadPasswordRulesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ReadPasswordRules", ReplyAction="http://tempuri.org/UserDomainService/ReadPasswordRulesResponse")]
            IAsyncResult BeginReadPasswordRules(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadPasswordRules'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadPasswordRules'.</param>
            /// <returns>The 'PasswordRulesDTO' returned from the 'ReadPasswordRules' operation.</returns>
            PasswordRulesDTO EndReadPasswordRules(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadUser' operation.
            /// </summary>
            /// <param name="roleid">The value for the 'roleid' parameter of this action.</param>
            /// <param name="organizationId">The value for the 'organizationId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ReadUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ReadUser", ReplyAction="http://tempuri.org/UserDomainService/ReadUserResponse")]
            IAsyncResult BeginReadUser(int roleid, int organizationId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadUser'.</param>
            /// <returns>The 'List`1' returned from the 'ReadUser' operation.</returns>
            List<UserDTO> EndReadUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadUserByUserName' operation.
            /// </summary>
            /// <param name="UserName">The value for the 'UserName' parameter of this action.</param>
            /// <param name="OrganizationId">The value for the 'OrganizationId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ReadUserByUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ReadUserByUserName", ReplyAction="http://tempuri.org/UserDomainService/ReadUserByUserNameResponse")]
            IAsyncResult BeginReadUserByUserName(string UserName, int OrganizationId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadUserByUserName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadUserByUserName'.</param>
            /// <returns>The 'UserDTO' returned from the 'ReadUserByUserName' operation.</returns>
            UserDTO EndReadUserByUserName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadUserNamesFromEWAV' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/ReadUserNamesFromEWAVDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/ReadUserNamesFromEWAV", ReplyAction="http://tempuri.org/UserDomainService/ReadUserNamesFromEWAVResponse")]
            IAsyncResult BeginReadUserNamesFromEWAV(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadUserNamesFromEWAV'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadUserNamesFromEWAV'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'ReadUserNamesFromEWAV' operation.</returns>
            IEnumerable<string> EndReadUserNamesFromEWAV(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RemoveUser' operation.
            /// </summary>
            /// <param name="userId">The value for the 'userId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/RemoveUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/RemoveUser", ReplyAction="http://tempuri.org/UserDomainService/RemoveUserResponse")]
            IAsyncResult BeginRemoveUser(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRemoveUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRemoveUser'.</param>
            /// <returns>The 'Boolean' returned from the 'RemoveUser' operation.</returns>
            bool EndRemoveUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'userOrganizationDto' operation.
            /// </summary>
            /// <param name="userOrganizationDto">The value for the 'userOrganizationDto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserDomainService/userOrganizationDtoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserDomainService/userOrganizationDto", ReplyAction="http://tempuri.org/UserDomainService/userOrganizationDtoResponse")]
            IAsyncResult BeginuserOrganizationDto(List<OrganizationDto> userOrganizationDto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginuserOrganizationDto'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginuserOrganizationDto'.</param>
            /// <returns>The 'List`1' returned from the 'userOrganizationDto' operation.</returns>
            List<OrganizationDto> EnduserOrganizationDto(IAsyncResult result);
        }
        
        internal sealed class UserDomainContextEntityContainer : EntityContainer
        {
            
            public UserDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'VariableRow' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services")]
    public sealed partial class VariableRow : ComplexObject
    {
        
        private double _ci;
        
        private double _coefficient;
        
        private double _ninetyFivePercent;
        
        private double _oddsRatio;
        
        private double _p;
        
        private double _se;
        
        private string _variableName;
        
        private double _z;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCiChanging(double value);
        partial void OnCiChanged();
        partial void OnCoefficientChanging(double value);
        partial void OnCoefficientChanged();
        partial void OnNinetyFivePercentChanging(double value);
        partial void OnNinetyFivePercentChanged();
        partial void OnOddsRatioChanging(double value);
        partial void OnOddsRatioChanged();
        partial void OnPChanging(double value);
        partial void OnPChanged();
        partial void OnSeChanging(double value);
        partial void OnSeChanged();
        partial void OnVariableNameChanging(string value);
        partial void OnVariableNameChanged();
        partial void OnZChanging(double value);
        partial void OnZChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableRow"/> class.
        /// </summary>
        public VariableRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Ci' value.
        /// </summary>
        [DataMember()]
        public double Ci
        {
            get
            {
                return this._ci;
            }
            set
            {
                if ((this._ci != value))
                {
                    this.OnCiChanging(value);
                    this.RaiseDataMemberChanging("Ci");
                    this.ValidateProperty("Ci", value);
                    this._ci = value;
                    this.RaiseDataMemberChanged("Ci");
                    this.OnCiChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Coefficient' value.
        /// </summary>
        [DataMember()]
        public double Coefficient
        {
            get
            {
                return this._coefficient;
            }
            set
            {
                if ((this._coefficient != value))
                {
                    this.OnCoefficientChanging(value);
                    this.RaiseDataMemberChanging("Coefficient");
                    this.ValidateProperty("Coefficient", value);
                    this._coefficient = value;
                    this.RaiseDataMemberChanged("Coefficient");
                    this.OnCoefficientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NinetyFivePercent' value.
        /// </summary>
        [DataMember()]
        public double NinetyFivePercent
        {
            get
            {
                return this._ninetyFivePercent;
            }
            set
            {
                if ((this._ninetyFivePercent != value))
                {
                    this.OnNinetyFivePercentChanging(value);
                    this.RaiseDataMemberChanging("NinetyFivePercent");
                    this.ValidateProperty("NinetyFivePercent", value);
                    this._ninetyFivePercent = value;
                    this.RaiseDataMemberChanged("NinetyFivePercent");
                    this.OnNinetyFivePercentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OddsRatio' value.
        /// </summary>
        [DataMember()]
        public double OddsRatio
        {
            get
            {
                return this._oddsRatio;
            }
            set
            {
                if ((this._oddsRatio != value))
                {
                    this.OnOddsRatioChanging(value);
                    this.RaiseDataMemberChanging("OddsRatio");
                    this.ValidateProperty("OddsRatio", value);
                    this._oddsRatio = value;
                    this.RaiseDataMemberChanged("OddsRatio");
                    this.OnOddsRatioChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'P' value.
        /// </summary>
        [DataMember()]
        public double P
        {
            get
            {
                return this._p;
            }
            set
            {
                if ((this._p != value))
                {
                    this.OnPChanging(value);
                    this.RaiseDataMemberChanging("P");
                    this.ValidateProperty("P", value);
                    this._p = value;
                    this.RaiseDataMemberChanged("P");
                    this.OnPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Se' value.
        /// </summary>
        [DataMember()]
        public double Se
        {
            get
            {
                return this._se;
            }
            set
            {
                if ((this._se != value))
                {
                    this.OnSeChanging(value);
                    this.RaiseDataMemberChanging("Se");
                    this.ValidateProperty("Se", value);
                    this._se = value;
                    this.RaiseDataMemberChanged("Se");
                    this.OnSeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VariableName' value.
        /// </summary>
        [DataMember()]
        public string VariableName
        {
            get
            {
                return this._variableName;
            }
            set
            {
                if ((this._variableName != value))
                {
                    this.OnVariableNameChanging(value);
                    this.RaiseDataMemberChanging("VariableName");
                    this.ValidateProperty("VariableName", value);
                    this._variableName = value;
                    this.RaiseDataMemberChanged("VariableName");
                    this.OnVariableNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Z' value.
        /// </summary>
        [DataMember()]
        public double Z
        {
            get
            {
                return this._z;
            }
            set
            {
                if ((this._z != value))
                {
                    this.OnZChanging(value);
                    this.RaiseDataMemberChanging("Z");
                    this.ValidateProperty("Z", value);
                    this._z = value;
                    this.RaiseDataMemberChanged("Z");
                    this.OnZChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'XYChartDomainService' DomainService.
    /// </summary>
    public sealed partial class XYChartDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XYChartDomainContext"/> class.
        /// </summary>
        public XYChartDomainContext() : 
                this(new WebDomainClient<IXYChartDomainServiceContract>(new Uri("EWAV-Web-Services-XYChartDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XYChartDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The XYChartDomainService service URI.</param>
        public XYChartDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IXYChartDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XYChartDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public XYChartDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="XYChartDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<List<FrequencyResultData>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateFrequencyTable' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<FrequencyResultData>> GenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateFrequencyTable", parameters);
            return ((InvokeOperation<List<FrequencyResultData>>)(this.InvokeOperation("GenerateFrequencyTable", typeof(List<FrequencyResultData>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new XYChartDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'XYChartDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IXYChartDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateFrequencyTable' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/XYChartDomainService/GenerateFrequencyTableDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/XYChartDomainService/GenerateFrequencyTable", ReplyAction="http://tempuri.org/XYChartDomainService/GenerateFrequencyTableResponse")]
            IAsyncResult BeginGenerateFrequencyTable(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateFrequencyTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateFrequencyTable'.</param>
            /// <returns>The 'List`1' returned from the 'GenerateFrequencyTable' operation.</returns>
            List<FrequencyResultData> EndGenerateFrequencyTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/XYChartDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/XYChartDomainService/Getrule", ReplyAction="http://tempuri.org/XYChartDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
        }
        
        internal sealed class XYChartDomainContextEntityContainer : EntityContainer
        {
            
            public XYChartDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
}
namespace EWAV.Web.Services.AdminDatasourcesDomainService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV.DTO;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AdminDatasourcesDomainService' DomainService.
    /// </summary>
    public sealed partial class AdminDatasourcesDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminDatasourcesDomainContext"/> class.
        /// </summary>
        public AdminDatasourcesDomainContext() : 
                this(new WebDomainClient<IAdminDatasourcesDomainServiceContract>(new Uri("EWAV-Web-Services-AdminDatasourcesDomainService-AdminDatasourcesDomainService.svc" +
                                "", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminDatasourcesDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AdminDatasourcesDomainService service URI.</param>
        public AdminDatasourcesDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAdminDatasourcesDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminDatasourcesDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AdminDatasourcesDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDatasource' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddDatasource(DatasourceDto ds, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("AddDatasource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddDatasource", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDatasource' method of the DomainService.
        /// </summary>
        /// <param name="ds">The value for the 'ds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddDatasource(DatasourceDto ds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ds", ds);
            this.ValidateMethod("AddDatasource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddDatasource", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CopyDashboard' method of the DomainService.
        /// </summary>
        /// <param name="OldCanvasName">The value for the 'OldCanvasName' parameter of this action.</param>
        /// <param name="NewCanvasName">The value for the 'NewCanvasName' parameter of this action.</param>
        /// <param name="OldDatasourceName">The value for the 'OldDatasourceName' parameter of this action.</param>
        /// <param name="NewDatasourceName">The value for the 'NewDatasourceName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> CopyDashboard(string OldCanvasName, string NewCanvasName, string OldDatasourceName, string NewDatasourceName, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("OldCanvasName", OldCanvasName);
            parameters.Add("NewCanvasName", NewCanvasName);
            parameters.Add("OldDatasourceName", OldDatasourceName);
            parameters.Add("NewDatasourceName", NewDatasourceName);
            this.ValidateMethod("CopyDashboard", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("CopyDashboard", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CopyDashboard' method of the DomainService.
        /// </summary>
        /// <param name="OldCanvasName">The value for the 'OldCanvasName' parameter of this action.</param>
        /// <param name="NewCanvasName">The value for the 'NewCanvasName' parameter of this action.</param>
        /// <param name="OldDatasourceName">The value for the 'OldDatasourceName' parameter of this action.</param>
        /// <param name="NewDatasourceName">The value for the 'NewDatasourceName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> CopyDashboard(string OldCanvasName, string NewCanvasName, string OldDatasourceName, string NewDatasourceName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("OldCanvasName", OldCanvasName);
            parameters.Add("NewCanvasName", NewCanvasName);
            parameters.Add("OldDatasourceName", OldDatasourceName);
            parameters.Add("NewDatasourceName", NewDatasourceName);
            this.ValidateMethod("CopyDashboard", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("CopyDashboard", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAllDatasourceUser' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<DatasourceUserDto>> GetAllDatasourceUser(Action<InvokeOperation<IEnumerable<DatasourceUserDto>>> callback, object userState)
        {
            this.ValidateMethod("GetAllDatasourceUser", null);
            return ((InvokeOperation<IEnumerable<DatasourceUserDto>>)(this.InvokeOperation("GetAllDatasourceUser", typeof(IEnumerable<DatasourceUserDto>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAllDatasourceUser' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<DatasourceUserDto>> GetAllDatasourceUser()
        {
            this.ValidateMethod("GetAllDatasourceUser", null);
            return ((InvokeOperation<IEnumerable<DatasourceUserDto>>)(this.InvokeOperation("GetAllDatasourceUser", typeof(IEnumerable<DatasourceUserDto>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAssociatedUsers' method of the DomainService.
        /// </summary>
        /// <param name="dsId">The value for the 'dsId' parameter of this action.</param>
        /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<UserDTO>> ReadAssociatedUsers(int dsId, int orgId, Action<InvokeOperation<List<UserDTO>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dsId", dsId);
            parameters.Add("orgId", orgId);
            this.ValidateMethod("ReadAssociatedUsers", parameters);
            return ((InvokeOperation<List<UserDTO>>)(this.InvokeOperation("ReadAssociatedUsers", typeof(List<UserDTO>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAssociatedUsers' method of the DomainService.
        /// </summary>
        /// <param name="dsId">The value for the 'dsId' parameter of this action.</param>
        /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<UserDTO>> ReadAssociatedUsers(int dsId, int orgId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dsId", dsId);
            parameters.Add("orgId", orgId);
            this.ValidateMethod("ReadAssociatedUsers", parameters);
            return ((InvokeOperation<List<UserDTO>>)(this.InvokeOperation("ReadAssociatedUsers", typeof(List<UserDTO>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadDatasource' method of the DomainService.
        /// </summary>
        /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<DatasourceDto>> ReadDatasource(int orgId, Action<InvokeOperation<List<DatasourceDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            this.ValidateMethod("ReadDatasource", parameters);
            return ((InvokeOperation<List<DatasourceDto>>)(this.InvokeOperation("ReadDatasource", typeof(List<DatasourceDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadDatasource' method of the DomainService.
        /// </summary>
        /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<DatasourceDto>> ReadDatasource(int orgId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            this.ValidateMethod("ReadDatasource", parameters);
            return ((InvokeOperation<List<DatasourceDto>>)(this.InvokeOperation("ReadDatasource", typeof(List<DatasourceDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadEWEDatasourceFormId' method of the DomainService.
        /// </summary>
        /// <param name="EWEDsDto">The value for the 'EWEDsDto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReadEWEDatasourceFormId(EWEDatasourceDto EWEDsDto, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("EWEDsDto", EWEDsDto);
            this.ValidateMethod("ReadEWEDatasourceFormId", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ReadEWEDatasourceFormId", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadEWEDatasourceFormId' method of the DomainService.
        /// </summary>
        /// <param name="EWEDsDto">The value for the 'EWEDsDto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ReadEWEDatasourceFormId(EWEDatasourceDto EWEDsDto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("EWEDsDto", EWEDsDto);
            this.ValidateMethod("ReadEWEDatasourceFormId", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ReadEWEDatasourceFormId", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveDatasource' method of the DomainService.
        /// </summary>
        /// <param name="dsId">The value for the 'dsId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveDatasource(int dsId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dsId", dsId);
            this.ValidateMethod("RemoveDatasource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveDatasource", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveDatasource' method of the DomainService.
        /// </summary>
        /// <param name="dsId">The value for the 'dsId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveDatasource(int dsId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dsId", dsId);
            this.ValidateMethod("RemoveDatasource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveDatasource", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestData' method of the DomainService.
        /// </summary>
        /// <param name="connectionInfo">The value for the 'connectionInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestData(Connection connectionInfo, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("connectionInfo", connectionInfo);
            this.ValidateMethod("TestData", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("TestData", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestData' method of the DomainService.
        /// </summary>
        /// <param name="connectionInfo">The value for the 'connectionInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestData(Connection connectionInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("connectionInfo", connectionInfo);
            this.ValidateMethod("TestData", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("TestData", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestDBConnection' method of the DomainService.
        /// </summary>
        /// <param name="connInfo">The value for the 'connInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestDBConnection(Connection connInfo, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("connInfo", connInfo);
            this.ValidateMethod("TestDBConnection", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("TestDBConnection", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TestDBConnection' method of the DomainService.
        /// </summary>
        /// <param name="connInfo">The value for the 'connInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> TestDBConnection(Connection connInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("connInfo", connInfo);
            this.ValidateMethod("TestDBConnection", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("TestDBConnection", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDatasource' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateDatasource(DatasourceDto dto, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("UpdateDatasource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateDatasource", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDatasource' method of the DomainService.
        /// </summary>
        /// <param name="dto">The value for the 'dto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateDatasource(DatasourceDto dto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dto", dto);
            this.ValidateMethod("UpdateDatasource", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateDatasource", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AdminDatasourcesDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AdminDatasourcesDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAdminDatasourcesDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'AddDatasource' operation.
            /// </summary>
            /// <param name="ds">The value for the 'ds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/AddDatasourceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/AddDatasource", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/AddDatasourceResponse")]
            IAsyncResult BeginAddDatasource(DatasourceDto ds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddDatasource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddDatasource'.</param>
            /// <returns>The 'Boolean' returned from the 'AddDatasource' operation.</returns>
            bool EndAddDatasource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CopyDashboard' operation.
            /// </summary>
            /// <param name="OldCanvasName">The value for the 'OldCanvasName' parameter of this action.</param>
            /// <param name="NewCanvasName">The value for the 'NewCanvasName' parameter of this action.</param>
            /// <param name="OldDatasourceName">The value for the 'OldDatasourceName' parameter of this action.</param>
            /// <param name="NewDatasourceName">The value for the 'NewDatasourceName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/CopyDashboardDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/CopyDashboard", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/CopyDashboardResponse")]
            IAsyncResult BeginCopyDashboard(string OldCanvasName, string NewCanvasName, string OldDatasourceName, string NewDatasourceName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCopyDashboard'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCopyDashboard'.</param>
            /// <returns>The 'String' returned from the 'CopyDashboard' operation.</returns>
            string EndCopyDashboard(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllDatasourceUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/GetAllDatasourceUserDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/GetAllDatasourceUser", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/GetAllDatasourceUserResponse")]
            IAsyncResult BeginGetAllDatasourceUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllDatasourceUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllDatasourceUser'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetAllDatasourceUser' operation.</returns>
            IEnumerable<DatasourceUserDto> EndGetAllDatasourceUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadAssociatedUsers' operation.
            /// </summary>
            /// <param name="dsId">The value for the 'dsId' parameter of this action.</param>
            /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/ReadAssociatedUsersDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/ReadAssociatedUsers", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/ReadAssociatedUsersResponse")]
            IAsyncResult BeginReadAssociatedUsers(int dsId, int orgId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadAssociatedUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadAssociatedUsers'.</param>
            /// <returns>The 'List`1' returned from the 'ReadAssociatedUsers' operation.</returns>
            List<UserDTO> EndReadAssociatedUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadDatasource' operation.
            /// </summary>
            /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/ReadDatasourceDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/ReadDatasource", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/ReadDatasourceResponse")]
            IAsyncResult BeginReadDatasource(int orgId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadDatasource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadDatasource'.</param>
            /// <returns>The 'List`1' returned from the 'ReadDatasource' operation.</returns>
            List<DatasourceDto> EndReadDatasource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadEWEDatasourceFormId' operation.
            /// </summary>
            /// <param name="EWEDsDto">The value for the 'EWEDsDto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/ReadEWEDatasourceFormIdDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/ReadEWEDatasourceFormId", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/ReadEWEDatasourceFormIdResponse")]
            IAsyncResult BeginReadEWEDatasourceFormId(EWEDatasourceDto EWEDsDto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadEWEDatasourceFormId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadEWEDatasourceFormId'.</param>
            /// <returns>The 'String' returned from the 'ReadEWEDatasourceFormId' operation.</returns>
            string EndReadEWEDatasourceFormId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RemoveDatasource' operation.
            /// </summary>
            /// <param name="dsId">The value for the 'dsId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/RemoveDatasourceDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/RemoveDatasource", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/RemoveDatasourceResponse")]
            IAsyncResult BeginRemoveDatasource(int dsId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRemoveDatasource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRemoveDatasource'.</param>
            /// <returns>The 'Boolean' returned from the 'RemoveDatasource' operation.</returns>
            bool EndRemoveDatasource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'TestData' operation.
            /// </summary>
            /// <param name="connectionInfo">The value for the 'connectionInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/TestDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/TestData", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/TestDataResponse")]
            IAsyncResult BeginTestData(Connection connectionInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginTestData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginTestData'.</param>
            /// <returns>The 'Boolean' returned from the 'TestData' operation.</returns>
            bool EndTestData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'TestDBConnection' operation.
            /// </summary>
            /// <param name="connInfo">The value for the 'connInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/TestDBConnectionDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/TestDBConnection", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/TestDBConnectionResponse")]
            IAsyncResult BeginTestDBConnection(Connection connInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginTestDBConnection'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginTestDBConnection'.</param>
            /// <returns>The 'Boolean' returned from the 'TestDBConnection' operation.</returns>
            bool EndTestDBConnection(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateDatasource' operation.
            /// </summary>
            /// <param name="dto">The value for the 'dto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdminDatasourcesDomainService/UpdateDatasourceDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdminDatasourcesDomainService/UpdateDatasource", ReplyAction="http://tempuri.org/AdminDatasourcesDomainService/UpdateDatasourceResponse")]
            IAsyncResult BeginUpdateDatasource(DatasourceDto dto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateDatasource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateDatasource'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateDatasource' operation.</returns>
            bool EndUpdateDatasource(IAsyncResult result);
        }
        
        internal sealed class AdminDatasourcesDomainContextEntityContainer : EntityContainer
        {
            
            public AdminDatasourcesDomainContextEntityContainer()
            {
            }
        }
    }
}
namespace EWAV.Web.Services.AuthenticationDomainService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationDomainService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationDomainContext"/> class.
        /// </summary>
        public AuthenticationDomainContext() : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(new Uri("EWAV-Web-Services-AuthenticationDomainService-AuthenticationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationDomainService service URI.</param>
        public AuthenticationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationDomainContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/GetUser", ReplyAction="http://tempuri.org/AuthenticationDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Login", ReplyAction="http://tempuri.org/AuthenticationDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Logout", ReplyAction="http://tempuri.org/AuthenticationDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationDomainContextEntityContainer : EntityContainer
        {
            
            public AuthenticationDomainContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/EWAV.Web.Services.AuthenticationDomainSer" +
        "vice")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'EWAV.Client'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
namespace EWAV.Web.Services.CanvasDomainService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV;
    using EWAV.DTO;
    using EWAV.Web.Services;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'CanvasDomainService' DomainService.
    /// </summary>
    public sealed partial class CanvasDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasDomainContext"/> class.
        /// </summary>
        public CanvasDomainContext() : 
                this(new WebDomainClient<ICanvasDomainServiceContract>(new Uri("EWAV-Web-Services-CanvasDomainService-CanvasDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CanvasDomainService service URI.</param>
        public CanvasDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ICanvasDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CanvasDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteCanvas(int canvasId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            this.ValidateMethod("DeleteCanvas", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteCanvas", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteCanvas(int canvasId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            this.ValidateMethod("DeleteCanvas", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteCanvas", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCanvasShareStatus' method of the DomainService.
        /// </summary>
        /// <param name="canvasID">The value for the 'canvasID' parameter of this action.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<CanvasShareStatusDto>> GetCanvasShareStatus(int canvasID, int organizationID, Action<InvokeOperation<List<CanvasShareStatusDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasID", canvasID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetCanvasShareStatus", parameters);
            return ((InvokeOperation<List<CanvasShareStatusDto>>)(this.InvokeOperation("GetCanvasShareStatus", typeof(List<CanvasShareStatusDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCanvasShareStatus' method of the DomainService.
        /// </summary>
        /// <param name="canvasID">The value for the 'canvasID' parameter of this action.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<CanvasShareStatusDto>> GetCanvasShareStatus(int canvasID, int organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasID", canvasID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetCanvasShareStatus", parameters);
            return ((InvokeOperation<List<CanvasShareStatusDto>>)(this.InvokeOperation("GetCanvasShareStatus", typeof(List<CanvasShareStatusDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCanvasShareStatusGuid' method of the DomainService.
        /// </summary>
        /// <param name="canvasGUID">The value for the 'canvasGUID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<CanvasShareStatusDto>> GetCanvasShareStatusGuid(string canvasGUID, Action<InvokeOperation<List<CanvasShareStatusDto>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasGUID", canvasGUID);
            this.ValidateMethod("GetCanvasShareStatusGuid", parameters);
            return ((InvokeOperation<List<CanvasShareStatusDto>>)(this.InvokeOperation("GetCanvasShareStatusGuid", typeof(List<CanvasShareStatusDto>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCanvasShareStatusGuid' method of the DomainService.
        /// </summary>
        /// <param name="canvasGUID">The value for the 'canvasGUID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<CanvasShareStatusDto>> GetCanvasShareStatusGuid(string canvasGUID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasGUID", canvasGUID);
            this.ValidateMethod("GetCanvasShareStatusGuid", parameters);
            return ((InvokeOperation<List<CanvasShareStatusDto>>)(this.InvokeOperation("GetCanvasShareStatusGuid", typeof(List<CanvasShareStatusDto>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CanvasDto> LoadCanvas(int canvasId, Action<InvokeOperation<CanvasDto>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            this.ValidateMethod("LoadCanvas", parameters);
            return ((InvokeOperation<CanvasDto>)(this.InvokeOperation("LoadCanvas", typeof(CanvasDto), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CanvasDto> LoadCanvas(int canvasId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            this.ValidateMethod("LoadCanvas", parameters);
            return ((InvokeOperation<CanvasDto>)(this.InvokeOperation("LoadCanvas", typeof(CanvasDto), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadCanvasGUID' method of the DomainService.
        /// </summary>
        /// <param name="canvasGUID">The value for the 'canvasGUID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CanvasDto> LoadCanvasGUID(Guid canvasGUID, Action<InvokeOperation<CanvasDto>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasGUID", canvasGUID);
            this.ValidateMethod("LoadCanvasGUID", parameters);
            return ((InvokeOperation<CanvasDto>)(this.InvokeOperation("LoadCanvasGUID", typeof(CanvasDto), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadCanvasGUID' method of the DomainService.
        /// </summary>
        /// <param name="canvasGUID">The value for the 'canvasGUID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CanvasDto> LoadCanvasGUID(Guid canvasGUID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasGUID", canvasGUID);
            this.ValidateMethod("LoadCanvasGUID", parameters);
            return ((InvokeOperation<CanvasDto>)(this.InvokeOperation("LoadCanvasGUID", typeof(CanvasDto), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadCanvasListForUser' method of the DomainService.
        /// </summary>
        /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> LoadCanvasListForUser(int UserId, Action<InvokeOperation<DatatableBag>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserId", UserId);
            this.ValidateMethod("LoadCanvasListForUser", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("LoadCanvasListForUser", typeof(DatatableBag), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadCanvasListForUser' method of the DomainService.
        /// </summary>
        /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> LoadCanvasListForUser(int UserId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserId", UserId);
            this.ValidateMethod("LoadCanvasListForUser", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("LoadCanvasListForUser", typeof(DatatableBag), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAllUsersInMyOrg' method of the DomainService.
        /// </summary>
        /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> ReadAllUsersInMyOrg(int orgId, Action<InvokeOperation<DatatableBag>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            this.ValidateMethod("ReadAllUsersInMyOrg", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("ReadAllUsersInMyOrg", typeof(DatatableBag), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadAllUsersInMyOrg' method of the DomainService.
        /// </summary>
        /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> ReadAllUsersInMyOrg(int orgId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            this.ValidateMethod("ReadAllUsersInMyOrg", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("ReadAllUsersInMyOrg", typeof(DatatableBag), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadCanvasListForLite' method of the DomainService.
        /// </summary>
        /// <param name="FormId">The value for the 'FormId' parameter of this action.</param>
        /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> ReadCanvasListForLite(string FormId, int UserId, Action<InvokeOperation<DatatableBag>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("FormId", FormId);
            parameters.Add("UserId", UserId);
            this.ValidateMethod("ReadCanvasListForLite", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("ReadCanvasListForLite", typeof(DatatableBag), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadCanvasListForLite' method of the DomainService.
        /// </summary>
        /// <param name="FormId">The value for the 'FormId' parameter of this action.</param>
        /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> ReadCanvasListForLite(string FormId, int UserId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("FormId", FormId);
            parameters.Add("UserId", UserId);
            this.ValidateMethod("ReadCanvasListForLite", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("ReadCanvasListForLite", typeof(DatatableBag), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResendEmail' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <param name="SharedUserIds">The value for the 'SharedUserIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ResendEmail(int canvasId, IEnumerable<int> SharedUserIds, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            parameters.Add("SharedUserIds", SharedUserIds);
            this.ValidateMethod("ResendEmail", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ResendEmail", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResendEmail' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <param name="SharedUserIds">The value for the 'SharedUserIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ResendEmail(int canvasId, IEnumerable<int> SharedUserIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            parameters.Add("SharedUserIds", SharedUserIds);
            this.ValidateMethod("ResendEmail", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ResendEmail", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasDto">The value for the 'canvasDto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> SaveCanvas(CanvasDto canvasDto, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasDto", canvasDto);
            this.ValidateMethod("SaveCanvas", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("SaveCanvas", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasDto">The value for the 'canvasDto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> SaveCanvas(CanvasDto canvasDto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasDto", canvasDto);
            this.ValidateMethod("SaveCanvas", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("SaveCanvas", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveCanvasSnapshot' method of the DomainService.
        /// </summary>
        /// <param name="cdto">The value for the 'cdto' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> SaveCanvasSnapshot(CanvasDto cdto, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("cdto", cdto);
            this.ValidateMethod("SaveCanvasSnapshot", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("SaveCanvasSnapshot", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveCanvasSnapshot' method of the DomainService.
        /// </summary>
        /// <param name="cdto">The value for the 'cdto' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> SaveCanvasSnapshot(CanvasDto cdto)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("cdto", cdto);
            this.ValidateMethod("SaveCanvasSnapshot", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("SaveCanvasSnapshot", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ShareCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <param name="sharedUserIds">The value for the 'sharedUserIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ShareCanvas(int canvasId, IEnumerable<int> sharedUserIds, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            parameters.Add("sharedUserIds", sharedUserIds);
            this.ValidateMethod("ShareCanvas", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ShareCanvas", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ShareCanvas' method of the DomainService.
        /// </summary>
        /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
        /// <param name="sharedUserIds">The value for the 'sharedUserIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ShareCanvas(int canvasId, IEnumerable<int> sharedUserIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("canvasId", canvasId);
            parameters.Add("sharedUserIds", sharedUserIds);
            this.ValidateMethod("ShareCanvas", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ShareCanvas", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CanvasDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CanvasDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICanvasDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteCanvas' operation.
            /// </summary>
            /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/DeleteCanvasDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/DeleteCanvas", ReplyAction="http://tempuri.org/CanvasDomainService/DeleteCanvasResponse")]
            IAsyncResult BeginDeleteCanvas(int canvasId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteCanvas'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteCanvas'.</param>
            /// <returns>The 'Boolean' returned from the 'DeleteCanvas' operation.</returns>
            bool EndDeleteCanvas(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCanvasShareStatus' operation.
            /// </summary>
            /// <param name="canvasID">The value for the 'canvasID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/GetCanvasShareStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/GetCanvasShareStatus", ReplyAction="http://tempuri.org/CanvasDomainService/GetCanvasShareStatusResponse")]
            IAsyncResult BeginGetCanvasShareStatus(int canvasID, int organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCanvasShareStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCanvasShareStatus'.</param>
            /// <returns>The 'List`1' returned from the 'GetCanvasShareStatus' operation.</returns>
            List<CanvasShareStatusDto> EndGetCanvasShareStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCanvasShareStatusGuid' operation.
            /// </summary>
            /// <param name="canvasGUID">The value for the 'canvasGUID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/GetCanvasShareStatusGuidDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/GetCanvasShareStatusGuid", ReplyAction="http://tempuri.org/CanvasDomainService/GetCanvasShareStatusGuidResponse")]
            IAsyncResult BeginGetCanvasShareStatusGuid(string canvasGUID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCanvasShareStatusGuid'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCanvasShareStatusGuid'.</param>
            /// <returns>The 'List`1' returned from the 'GetCanvasShareStatusGuid' operation.</returns>
            List<CanvasShareStatusDto> EndGetCanvasShareStatusGuid(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadCanvas' operation.
            /// </summary>
            /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/LoadCanvasDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/LoadCanvas", ReplyAction="http://tempuri.org/CanvasDomainService/LoadCanvasResponse")]
            IAsyncResult BeginLoadCanvas(int canvasId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadCanvas'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadCanvas'.</param>
            /// <returns>The 'CanvasDto' returned from the 'LoadCanvas' operation.</returns>
            CanvasDto EndLoadCanvas(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadCanvasGUID' operation.
            /// </summary>
            /// <param name="canvasGUID">The value for the 'canvasGUID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/LoadCanvasGUIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/LoadCanvasGUID", ReplyAction="http://tempuri.org/CanvasDomainService/LoadCanvasGUIDResponse")]
            IAsyncResult BeginLoadCanvasGUID(Guid canvasGUID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadCanvasGUID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadCanvasGUID'.</param>
            /// <returns>The 'CanvasDto' returned from the 'LoadCanvasGUID' operation.</returns>
            CanvasDto EndLoadCanvasGUID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadCanvasListForUser' operation.
            /// </summary>
            /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/LoadCanvasListForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/LoadCanvasListForUser", ReplyAction="http://tempuri.org/CanvasDomainService/LoadCanvasListForUserResponse")]
            IAsyncResult BeginLoadCanvasListForUser(int UserId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadCanvasListForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadCanvasListForUser'.</param>
            /// <returns>The 'DatatableBag' returned from the 'LoadCanvasListForUser' operation.</returns>
            DatatableBag EndLoadCanvasListForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadAllUsersInMyOrg' operation.
            /// </summary>
            /// <param name="orgId">The value for the 'orgId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/ReadAllUsersInMyOrgDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/ReadAllUsersInMyOrg", ReplyAction="http://tempuri.org/CanvasDomainService/ReadAllUsersInMyOrgResponse")]
            IAsyncResult BeginReadAllUsersInMyOrg(int orgId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadAllUsersInMyOrg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadAllUsersInMyOrg'.</param>
            /// <returns>The 'DatatableBag' returned from the 'ReadAllUsersInMyOrg' operation.</returns>
            DatatableBag EndReadAllUsersInMyOrg(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadCanvasListForLite' operation.
            /// </summary>
            /// <param name="FormId">The value for the 'FormId' parameter of this action.</param>
            /// <param name="UserId">The value for the 'UserId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/ReadCanvasListForLiteDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/ReadCanvasListForLite", ReplyAction="http://tempuri.org/CanvasDomainService/ReadCanvasListForLiteResponse")]
            IAsyncResult BeginReadCanvasListForLite(string FormId, int UserId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadCanvasListForLite'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadCanvasListForLite'.</param>
            /// <returns>The 'DatatableBag' returned from the 'ReadCanvasListForLite' operation.</returns>
            DatatableBag EndReadCanvasListForLite(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ResendEmail' operation.
            /// </summary>
            /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
            /// <param name="SharedUserIds">The value for the 'SharedUserIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/ResendEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/ResendEmail", ReplyAction="http://tempuri.org/CanvasDomainService/ResendEmailResponse")]
            IAsyncResult BeginResendEmail(int canvasId, IEnumerable<int> SharedUserIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginResendEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginResendEmail'.</param>
            /// <returns>The 'Boolean' returned from the 'ResendEmail' operation.</returns>
            bool EndResendEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SaveCanvas' operation.
            /// </summary>
            /// <param name="canvasDto">The value for the 'canvasDto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/SaveCanvasDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/SaveCanvas", ReplyAction="http://tempuri.org/CanvasDomainService/SaveCanvasResponse")]
            IAsyncResult BeginSaveCanvas(CanvasDto canvasDto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSaveCanvas'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSaveCanvas'.</param>
            /// <returns>The 'Int32' returned from the 'SaveCanvas' operation.</returns>
            int EndSaveCanvas(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SaveCanvasSnapshot' operation.
            /// </summary>
            /// <param name="cdto">The value for the 'cdto' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/SaveCanvasSnapshotDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/SaveCanvasSnapshot", ReplyAction="http://tempuri.org/CanvasDomainService/SaveCanvasSnapshotResponse")]
            IAsyncResult BeginSaveCanvasSnapshot(CanvasDto cdto, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSaveCanvasSnapshot'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSaveCanvasSnapshot'.</param>
            /// <returns>The 'String' returned from the 'SaveCanvasSnapshot' operation.</returns>
            string EndSaveCanvasSnapshot(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ShareCanvas' operation.
            /// </summary>
            /// <param name="canvasId">The value for the 'canvasId' parameter of this action.</param>
            /// <param name="sharedUserIds">The value for the 'sharedUserIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CanvasDomainService/ShareCanvasDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CanvasDomainService/ShareCanvas", ReplyAction="http://tempuri.org/CanvasDomainService/ShareCanvasResponse")]
            IAsyncResult BeginShareCanvas(int canvasId, IEnumerable<int> sharedUserIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginShareCanvas'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginShareCanvas'.</param>
            /// <returns>The 'Boolean' returned from the 'ShareCanvas' operation.</returns>
            bool EndShareCanvas(IAsyncResult result);
        }
        
        internal sealed class CanvasDomainContextEntityContainer : EntityContainer
        {
            
            public CanvasDomainContextEntityContainer()
            {
            }
        }
    }
}
namespace EWAV.Web.Services.CombinedFrequencyDomainService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using EWAV.Web.EpiDashboard;
    using EWAV.Web.Services;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'CombinedFrequencyDomainService' DomainService.
    /// </summary>
    public sealed partial class CombinedFrequencyDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedFrequencyDomainContext"/> class.
        /// </summary>
        public CombinedFrequencyDomainContext() : 
                this(new WebDomainClient<ICombinedFrequencyDomainServiceContract>(new Uri("EWAV-Web-Services-CombinedFrequencyDomainService-CombinedFrequencyDomainService.s" +
                                "vc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedFrequencyDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CombinedFrequencyDomainService service URI.</param>
        public CombinedFrequencyDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ICombinedFrequencyDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedFrequencyDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CombinedFrequencyDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="CombinedFrequencyDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateCombinedFrequency' method of the DomainService.
        /// </summary>
        /// <param name="combinedParameters">The value for the 'combinedParameters' parameter of this action.</param>
        /// <param name="groupVar">The value for the 'groupVar' parameter of this action.</param>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> GenerateCombinedFrequency(EWAVCombinedFrequencyGadgetParameters combinedParameters, string groupVar, GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<DatatableBag>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("combinedParameters", combinedParameters);
            parameters.Add("groupVar", groupVar);
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateCombinedFrequency", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("GenerateCombinedFrequency", typeof(DatatableBag), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateCombinedFrequency' method of the DomainService.
        /// </summary>
        /// <param name="combinedParameters">The value for the 'combinedParameters' parameter of this action.</param>
        /// <param name="groupVar">The value for the 'groupVar' parameter of this action.</param>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DatatableBag> GenerateCombinedFrequency(EWAVCombinedFrequencyGadgetParameters combinedParameters, string groupVar, GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("combinedParameters", combinedParameters);
            parameters.Add("groupVar", groupVar);
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GenerateCombinedFrequency", parameters);
            return ((InvokeOperation<DatatableBag>)(this.InvokeOperation("GenerateCombinedFrequency", typeof(DatatableBag), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CombinedFrequencyDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CombinedFrequencyDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICombinedFrequencyDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateCombinedFrequency' operation.
            /// </summary>
            /// <param name="combinedParameters">The value for the 'combinedParameters' parameter of this action.</param>
            /// <param name="groupVar">The value for the 'groupVar' parameter of this action.</param>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CombinedFrequencyDomainService/GenerateCombinedFrequencyDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CombinedFrequencyDomainService/GenerateCombinedFrequency", ReplyAction="http://tempuri.org/CombinedFrequencyDomainService/GenerateCombinedFrequencyRespon" +
                "se")]
            IAsyncResult BeginGenerateCombinedFrequency(EWAVCombinedFrequencyGadgetParameters combinedParameters, string groupVar, GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateCombinedFrequency'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateCombinedFrequency'.</param>
            /// <returns>The 'DatatableBag' returned from the 'GenerateCombinedFrequency' operation.</returns>
            DatatableBag EndGenerateCombinedFrequency(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CombinedFrequencyDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CombinedFrequencyDomainService/Getrule", ReplyAction="http://tempuri.org/CombinedFrequencyDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
        }
        
        internal sealed class CombinedFrequencyDomainContextEntityContainer : EntityContainer
        {
            
            public CombinedFrequencyDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
}
namespace EWAV.Web.Services.ErrorDomainService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'ErrorDomainService' DomainService.
    /// </summary>
    public sealed partial class ErrorDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDomainContext"/> class.
        /// </summary>
        public ErrorDomainContext() : 
                this(new WebDomainClient<IErrorDomainServiceContract>(new Uri("EWAV-Web-Services-ErrorDomainService-ErrorDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ErrorDomainService service URI.</param>
        public ErrorDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IErrorDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ErrorDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailErrorMessage' method of the DomainService.
        /// </summary>
        /// <param name="EmailMessage">The value for the 'EmailMessage' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> EmailErrorMessage(string EmailMessage, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("EmailMessage", EmailMessage);
            this.ValidateMethod("EmailErrorMessage", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("EmailErrorMessage", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailErrorMessage' method of the DomainService.
        /// </summary>
        /// <param name="EmailMessage">The value for the 'EmailMessage' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> EmailErrorMessage(string EmailMessage)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("EmailMessage", EmailMessage);
            this.ValidateMethod("EmailErrorMessage", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("EmailErrorMessage", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ErrorDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ErrorDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IErrorDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'EmailErrorMessage' operation.
            /// </summary>
            /// <param name="EmailMessage">The value for the 'EmailMessage' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ErrorDomainService/EmailErrorMessageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ErrorDomainService/EmailErrorMessage", ReplyAction="http://tempuri.org/ErrorDomainService/EmailErrorMessageResponse")]
            IAsyncResult BeginEmailErrorMessage(string EmailMessage, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailErrorMessage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailErrorMessage'.</param>
            /// <returns>The 'Boolean' returned from the 'EmailErrorMessage' operation.</returns>
            bool EndEmailErrorMessage(IAsyncResult result);
        }
        
        internal sealed class ErrorDomainContextEntityContainer : EntityContainer
        {
            
            public ErrorDomainContextEntityContainer()
            {
            }
        }
    }
}
namespace EWAV.Web.Services.MapCluster
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using EWAV.DTO;
    using EWAV.Web.EpiDashboard;
    using EWAV.Web.Services;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'MapClusterDomainService' DomainService.
    /// </summary>
    public sealed partial class MapClusterDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MapClusterDomainContext"/> class.
        /// </summary>
        public MapClusterDomainContext() : 
                this(new WebDomainClient<IMapClusterDomainServiceContract>(new Uri("EWAV-Web-Services-MapCluster-MapClusterDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MapClusterDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MapClusterDomainService service URI.</param>
        public MapClusterDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMapClusterDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MapClusterDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MapClusterDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EWAVRule_Base"/> entity instances that have been loaded into this <see cref="MapClusterDomainContext"/> instance.
        /// </summary>
        public EntitySet<EWAVRule_Base> EWAVRule_Bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EWAVRule_Base>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EWAVRule_Base"/> entity instances using the 'Getrule' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EWAVRule_Base"/> entity instances.</returns>
        public EntityQuery<EWAVRule_Base> GetruleQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetruleQuery", parameters);
            return base.CreateQuery<EWAVRule_Base>("Getrule", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMapValues' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<PointDTOCollection>> GetMapValues(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, Action<InvokeOperation<List<PointDTOCollection>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GetMapValues", parameters);
            return ((InvokeOperation<List<PointDTOCollection>>)(this.InvokeOperation("GetMapValues", typeof(List<PointDTOCollection>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMapValues' method of the DomainService.
        /// </summary>
        /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
        /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
        /// <param name="rules">The value for the 'rules' parameter of this action.</param>
        /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<PointDTOCollection>> GetMapValues(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("gadgetParameters", gadgetParameters);
            parameters.Add("ewavDataFilters", ewavDataFilters);
            parameters.Add("rules", rules);
            parameters.Add("filterString", filterString);
            this.ValidateMethod("GetMapValues", parameters);
            return ((InvokeOperation<List<PointDTOCollection>>)(this.InvokeOperation("GetMapValues", typeof(List<PointDTOCollection>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MapClusterDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MapClusterDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMapClusterDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMapValues' operation.
            /// </summary>
            /// <param name="gadgetParameters">The value for the 'gadgetParameters' parameter of this action.</param>
            /// <param name="ewavDataFilters">The value for the 'ewavDataFilters' parameter of this action.</param>
            /// <param name="rules">The value for the 'rules' parameter of this action.</param>
            /// <param name="filterString">The value for the 'filterString' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MapClusterDomainService/GetMapValuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MapClusterDomainService/GetMapValues", ReplyAction="http://tempuri.org/MapClusterDomainService/GetMapValuesResponse")]
            IAsyncResult BeginGetMapValues(GadgetParameters gadgetParameters, IEnumerable<EWAVDataFilterCondition> ewavDataFilters, List<EWAVRule_Base> rules, string filterString, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMapValues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMapValues'.</param>
            /// <returns>The 'List`1' returned from the 'GetMapValues' operation.</returns>
            List<PointDTOCollection> EndGetMapValues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Getrule' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MapClusterDomainService/GetruleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MapClusterDomainService/Getrule", ReplyAction="http://tempuri.org/MapClusterDomainService/GetruleResponse")]
            [WebGet()]
            IAsyncResult BeginGetrule(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetrule'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetrule'.</param>
            /// <returns>The 'QueryResult' returned from the 'Getrule' operation.</returns>
            QueryResult<EWAVRule_Base> EndGetrule(IAsyncResult result);
        }
        
        internal sealed class MapClusterDomainContextEntityContainer : EntityContainer
        {
            
            public MapClusterDomainContextEntityContainer()
            {
                this.CreateEntitySet<EWAVRule_Base>(EntitySetOperations.None);
            }
        }
    }
}
namespace EWAVD3
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using EWAV.Web.Services.AuthenticationDomainService;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
